@printChar:
 Local variables
   arg 0: chr
   var 1: $.1
   var 2: $.2
        ; 7:21 var chr(%0)
        addrOf r0, [0@argument]
        ; 7:20 var $.1(%1)
        addrOf r1, [1@function]
        ; 7:20 assign
        store [r1], r0 (8)
        ; 7:26 int lit 1
        ld r0, 1 (8)
        ; 7:26 var $.2(%2)
        addrOf r1, [2@function]
        ; 7:26 assign
        store [r1], r0 (8)
        ; 7:2 call printStringLength
        call @printStringLength (1, 2)
@printChar_ret:

@printUint:
 Local variables
   arg 0: number
   var 1: buffer
   var 2: pos
   var 3: remainder
   var 4: digit
   var 5: $.5
   var 6: $.6
        ; 12:11 int lit 20
        ld r0, 20 (1)
        ; 12:2 var pos(%2)
        addrOf r1, [2@function]
        ; 12:2 assign
        store [r1], r0 (1)
        ; 13:2 while true
@while_1:
        ; 13:9 bool lit true
        ld r0, 1 (1)
        branch-false r0, @while_1_break
        ; while body
        ; 14:9 read var pos(%2)
        addrOf r0, [2@function]
        load r1, [r0] (1)
        ; 14:15 int lit 1
        ld r0, 1 (1)
        ; 14:13 sub
        sub r1, r0 (1)
        ; 14:3 var pos(%2)
        addrOf r0, [2@function]
        ; 14:7 assign
        store [r0], r1 (1)
        ; 15:19 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 15:28 int lit 10
        ld r0, 10 (8)
        ; 15:26 mod
        mod r1, r0 (8)
        ; 15:3 var remainder(%3)
        addrOf r0, [3@function]
        ; 15:3 assign
        store [r0], r1 (8)
        ; 16:12 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 16:21 int lit 10
        ld r0, 10 (8)
        ; 16:19 divide
        div r1, r0 (8)
        ; 16:3 var number(%0)
        addrOf r0, [0@argument]
        ; 16:10 assign
        store [r0], r1 (8)
        ; 17:18 read var remainder(%3)
        addrOf r0, [3@function]
        load r1, [r0] (8)
        ; 17:30 int lit 48
        ld r0, 48 (1)
        ; 17:28 add
        add r1, r0 (1)
        ; 17:3 var digit(%4)
        addrOf r0, [4@function]
        ; 17:3 assign
        store [r0], r1 (1)
        ; 18:17 read var digit(%4)
        addrOf r0, [4@function]
        load r1, [r0] (1)
        ; 18:10 array buffer(%1)
        ; 18:10 read var pos(%2)
        addrOf r0, [2@function]
        load r2, [r0] (1)
        cast r0 (i64), r2 (u8)
        mul r0, 1
        addrOf r2, [1@function]
        add r2, r0 (0)
        ; 18:15 assign
        store [r2], r1 (1)
        ; 19:3 if number == 0
        ; 19:7 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 19:17 int lit 0
        ld r0, 0 (8)
        ; 19:14 ==
        cmp r2, (r1 == r0) (i64)
        branch-false r2, @else_2
        ; then
        jmp @while_1_break
        jmp @endif_2
        ; else
@else_2:
@endif_2:
        jmp @while_1
@while_1_break:
        ; 23:28 array buffer(%1)
        ; 23:28 read var pos(%2)
        addrOf r0, [2@function]
        load r1, [r0] (1)
        cast r0 (i64), r1 (u8)
        mul r0, 1
        addrOf r1, [1@function]
        add r1, r0 (0)
        ; 23:20 var $.5(%5)
        addrOf r0, [5@function]
        ; 23:20 assign
        store [r0], r1 (8)
        ; 23:34 int lit 20
        ld r0, 20 (1)
        ; 23:39 read var pos(%2)
        addrOf r1, [2@function]
        load r2, [r1] (1)
        ; 23:37 sub
        sub r0, r2 (1)
        cast r1 (i64), r0 (u8)
        ; 23:37 var $.6(%6)
        addrOf r0, [6@function]
        ; 23:37 assign
        store [r0], r1 (8)
        ; 23:2 call printStringLength
        call @printStringLength (5, 6)
@printUint_ret:

@printIntLf:
 Local variables
   arg 0: number
   var 1: $.1
   var 2: $.2
   var 3: $.3
        ; 27:2 if number < 0
        ; 27:6 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 27:15 int lit 0
        ld r0, 0 (8)
        ; 27:13 <
        cmp r2, (r1 < r0) (i64)
        branch-false r2, @else_3
        ; then
        ; 28:13 int lit 45
        ld r0, 45 (1)
        ; 28:13 var $.1(%1)
        addrOf r1, [1@function]
        ; 28:13 assign
        store [r1], r0 (1)
        ; 28:3 call printChar
        call @printChar (1)
        ; 29:13 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 29:12 neg
        neg r1 (8)
        ; 29:3 var number(%0)
        addrOf r0, [0@argument]
        ; 29:10 assign
        store [r0], r1 (8)
        jmp @endif_3
        ; else
@else_3:
@endif_3:
        ; 31:12 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 31:12 var $.2(%2)
        addrOf r0, [2@function]
        ; 31:12 assign
        store [r0], r1 (8)
        ; 31:2 call printUint
        call @printUint (2)
        ; 32:12 int lit 10
        ld r0, 10 (1)
        ; 32:12 var $.3(%3)
        addrOf r1, [3@function]
        ; 32:12 assign
        store [r1], r0 (1)
        ; 32:2 call printChar
        call @printChar (3)
@printIntLf_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

@main:
 Local variables
   var 0: $.0
   var 1: $.1
   var 2: $.2
   var 3: $.3
   var 4: $.4
   var 5: $.5
   var 6: $.6
   var 7: $.7
   var 8: $.8
   var 9: $.9
        ; 4:16 int lit 1
        ld r0, 1 (1)
        ; 4:20 int lit 2
        ld r1, 2 (1)
        ; 4:18 <
        cmp r2, (r0 < r1) (u8)
        cast r0 (i64), r2 (bool)
        ; 4:18 var $.0(%0)
        addrOf r1, [0@function]
        ; 4:18 assign
        store [r1], r0 (8)
        ; 4:5 call printIntLf
        call @printIntLf (0)
        ; 5:16 int lit 2
        ld r0, 2 (1)
        ; 5:20 int lit 1
        ld r1, 1 (1)
        ; 5:18 <
        cmp r2, (r0 < r1) (u8)
        cast r0 (i64), r2 (bool)
        ; 5:18 var $.1(%1)
        addrOf r1, [1@function]
        ; 5:18 assign
        store [r1], r0 (8)
        ; 5:5 call printIntLf
        call @printIntLf (1)
        ; 7:16 int lit 1
        ld r0, 1 (1)
        ; 7:21 int lit 2
        ld r1, 2 (1)
        ; 7:18 <=
        cmp r2, (r0 <= r1) (u8)
        cast r0 (i64), r2 (bool)
        ; 7:18 var $.2(%2)
        addrOf r1, [2@function]
        ; 7:18 assign
        store [r1], r0 (8)
        ; 7:5 call printIntLf
        call @printIntLf (2)
        ; 8:16 int lit 2
        ld r0, 2 (1)
        ; 8:21 int lit 1
        ld r1, 1 (1)
        ; 8:18 <=
        cmp r2, (r0 <= r1) (u8)
        cast r0 (i64), r2 (bool)
        ; 8:18 var $.3(%3)
        addrOf r1, [3@function]
        ; 8:18 assign
        store [r1], r0 (8)
        ; 8:5 call printIntLf
        call @printIntLf (3)
        ; 10:16 int lit 1
        ld r0, 1 (1)
        ; 10:21 int lit 2
        ld r1, 2 (1)
        ; 10:18 ==
        cmp r2, (r0 == r1) (u8)
        cast r0 (i64), r2 (bool)
        ; 10:18 var $.4(%4)
        addrOf r1, [4@function]
        ; 10:18 assign
        store [r1], r0 (8)
        ; 10:5 call printIntLf
        call @printIntLf (4)
        ; 12:16 int lit 1
        ld r0, 1 (1)
        ; 12:21 int lit 2
        ld r1, 2 (1)
        ; 12:18 !=
        cmp r2, (r0 != r1) (u8)
        cast r0 (i64), r2 (bool)
        ; 12:18 var $.5(%5)
        addrOf r1, [5@function]
        ; 12:18 assign
        store [r1], r0 (8)
        ; 12:5 call printIntLf
        call @printIntLf (5)
        ; 14:16 int lit 1
        ld r0, 1 (1)
        ; 14:21 int lit 2
        ld r1, 2 (1)
        ; 14:18 >=
        cmp r2, (r0 >= r1) (u8)
        cast r0 (i64), r2 (bool)
        ; 14:18 var $.6(%6)
        addrOf r1, [6@function]
        ; 14:18 assign
        store [r1], r0 (8)
        ; 14:5 call printIntLf
        call @printIntLf (6)
        ; 15:16 int lit 2
        ld r0, 2 (1)
        ; 15:21 int lit 1
        ld r1, 1 (1)
        ; 15:18 >=
        cmp r2, (r0 >= r1) (u8)
        cast r0 (i64), r2 (bool)
        ; 15:18 var $.7(%7)
        addrOf r1, [7@function]
        ; 15:18 assign
        store [r1], r0 (8)
        ; 15:5 call printIntLf
        call @printIntLf (7)
        ; 17:16 int lit 1
        ld r0, 1 (1)
        ; 17:20 int lit 2
        ld r1, 2 (1)
        ; 17:18 >
        cmp r2, (r0 > r1) (u8)
        cast r0 (i64), r2 (bool)
        ; 17:18 var $.8(%8)
        addrOf r1, [8@function]
        ; 17:18 assign
        store [r1], r0 (8)
        ; 17:5 call printIntLf
        call @printIntLf (8)
        ; 18:16 int lit 2
        ld r0, 2 (1)
        ; 18:20 int lit 1
        ld r1, 1 (1)
        ; 18:18 >
        cmp r2, (r0 > r1) (u8)
        cast r0 (i64), r2 (bool)
        ; 18:18 var $.9(%9)
        addrOf r1, [9@function]
        ; 18:18 assign
        store [r1], r0 (8)
        ; 18:5 call printIntLf
        call @printIntLf (9)
@main_ret:

