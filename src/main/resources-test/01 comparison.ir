@printString:
 Local variables
	arg 0: str
	var 1: length
	; 10 pc
	call length, strlen, [str]
	call _, printStringLength [str, length]
@printString_ret:

@printChar:
 Local variables
	arg 0: chr
	var 1: t.1
	var 2: t.2
	; 12 pc
	addrof t.1, chr
	const t.2, 1
	call _, printStringLength [t.1, t.2]
@printChar_ret:

@printUint:
 Local variables
	arg 0: number
	var 1: buffer
	var 2: pos
	var 3: remainder
	var 4: digit
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	var 9: t.9
	var 10: t.10
	var 11: t.11
	var 12: t.12
	var 13: t.13
	var 14: t.14
	var 15: t.15
	var 16: t.16
	var 17: t.17
	var 18: t.18
	var 19: t.19
	var 20: t.20
	; 122 pc
	const pos, 20
	; 13:2 while true
@while_1:
	const t.5, 1
	sub pos, pos, t.5
	const t.6, 10
	mod remainder, number, t.6
	const t.7, 10
	div number, number, t.7
	cast t.8, remainder
	const t.9, 48
	add digit, t.8, t.9
	cast t.11, pos
	cast t.12, t.11
	addrof t.10, [buffer]
	add t.10, t.10, t.12
	store [t.10], digit
	; 19:3 if number == 0
	const t.14, 0
	equals t.13, number, t.14
	branch t.13, false, @if_2_end
	jump @while_1_break
@if_2_end:
	jump @while_1
@while_1_break:
	cast t.16, pos
	cast t.17, t.16
	addrof t.15, [buffer]
	add t.15, t.15, t.17
	const t.20, 20
	sub t.19, t.20, pos
	cast t.18, t.19
	call _, printStringLength [t.15, t.18]
@printUint_ret:

@printIntLf:
 Local variables
	arg 0: number
	var 1: t.1
	var 2: t.2
	var 3: t.3
	var 4: t.4
	; 30 pc
	; 27:2 if number < 0
	const t.2, 0
	lt t.1, number, t.2
	branch t.1, false, @if_3_end
	const t.3, 45
	call _, printChar [t.3]
	neg number, number
@if_3_end:
	call _, printUint [number]
	const t.4, 10
	call _, printChar [t.4]
@printIntLf_ret:

@strlen:
 Local variables
	arg 0: str
	var 1: length
	var 2: t.2
	var 3: t.3
	var 4: t.4
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	; 53 pc
	const length, 0
	; 37:2 for *str != 0
@for_4:
	load t.3, [str]
	const t.4, 0
	notequals t.2, t.3, t.4
	branch t.2, false, @for_4_break
	const t.5, 1
	add length, length, t.5
@for_4_continue:
	cast t.7, str
	const t.8, 1
	add t.6, t.7, t.8
	cast str, t.6
	jump @for_4
@for_4_break:
	; 40:9 return length
	ret length
	jump @strlen_ret
@strlen_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

@main:
 Local variables
	var 0: a
	var 1: b
	var 2: c
	var 3: d
	var 4: t.4
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	var 9: t.9
	var 10: t.10
	var 11: t.11
	var 12: t.12
	var 13: t.13
	var 14: t.14
	var 15: t.15
	var 16: t.16
	var 17: t.17
	var 18: t.18
	var 19: t.19
	var 20: t.20
	var 21: t.21
	var 22: t.22
	var 23: t.23
	var 24: t.24
	var 25: t.25
	var 26: t.26
	var 27: t.27
	var 28: t.28
	var 29: t.29
	var 30: t.30
	var 31: t.31
	var 32: t.32
	var 33: t.33
	var 34: t.34
	var 35: t.35
	var 36: t.36
	var 37: t.37
	var 38: t.38
	var 39: t.39
	var 40: t.40
	var 41: t.41
	var 42: t.42
	var 43: t.43
	var 44: t.44
	var 45: t.45
	var 46: t.46
	var 47: t.47
	var 48: t.48
	var 49: t.49
	var 50: t.50
	var 51: t.51
	var 52: t.52
	var 53: t.53
	; 368 pc
	const t.4, [string-0]
	call _, printString [t.4]
	const a, 1
	const b, 2
	lt t.6, a, b
	cast t.5, t.6
	call _, printIntLf [t.5]
	lt t.8, b, a
	cast t.7, t.8
	call _, printIntLf [t.7]
	const t.9, [string-1]
	call _, printString [t.9]
	const c, 0
	const d, 128
	lt t.11, c, d
	cast t.10, t.11
	call _, printIntLf [t.10]
	lt t.13, d, c
	cast t.12, t.13
	call _, printIntLf [t.12]
	const t.14, [string-2]
	call _, printString [t.14]
	lteq t.16, a, b
	cast t.15, t.16
	call _, printIntLf [t.15]
	lteq t.18, b, a
	cast t.17, t.18
	call _, printIntLf [t.17]
	const t.19, [string-3]
	call _, printString [t.19]
	lteq t.21, c, d
	cast t.20, t.21
	call _, printIntLf [t.20]
	lteq t.23, d, c
	cast t.22, t.23
	call _, printIntLf [t.22]
	const t.24, [string-4]
	call _, printString [t.24]
	equals t.26, a, b
	cast t.25, t.26
	call _, printIntLf [t.25]
	equals t.28, b, a
	cast t.27, t.28
	call _, printIntLf [t.27]
	const t.29, [string-5]
	call _, printString [t.29]
	notequals t.31, a, b
	cast t.30, t.31
	call _, printIntLf [t.30]
	notequals t.33, b, a
	cast t.32, t.33
	call _, printIntLf [t.32]
	const t.34, [string-6]
	call _, printString [t.34]
	gteq t.36, a, b
	cast t.35, t.36
	call _, printIntLf [t.35]
	gteq t.38, b, a
	cast t.37, t.38
	call _, printIntLf [t.37]
	const t.39, [string-7]
	call _, printString [t.39]
	gteq t.41, c, d
	cast t.40, t.41
	call _, printIntLf [t.40]
	gteq t.43, d, c
	cast t.42, t.43
	call _, printIntLf [t.42]
	const t.44, [string-8]
	call _, printString [t.44]
	gt t.46, a, b
	cast t.45, t.46
	call _, printIntLf [t.45]
	gt t.48, b, a
	cast t.47, t.48
	call _, printIntLf [t.47]
	const t.49, [string-9]
	call _, printString [t.49]
	gt t.51, c, d
	cast t.50, t.51
	call _, printIntLf [t.50]
	gt t.53, d, c
	cast t.52, t.53
	call _, printIntLf [t.52]
@main_ret:

String literals
	string lit 0 "< (signed)\n\0"
	string lit 1 "< (unsigned)\n\0"
	string lit 2 "<= (signed)\n\0"
	string lit 3 "<= (unsigned)\n\0"
	string lit 4 "==\n\0"
	string lit 5 "!=\n\0"
	string lit 6 ">= (signed)\n\0"
	string lit 7 ">= (unsigned)\n\0"
	string lit 8 "> (signed)\n\0"
	string lit 9 "> (unsigned)\n\0"
