; CFG for function printString
; block printString
	; predecessors=[]
		1: str
	; 11 pc
	call length(1@function,i64), strlen, [str(0@argument,u8*)]
		2: length, str
	call _, printStringLength [str(0@argument,u8*), length(1@function,i64)]
	jump @printString_ret
	; successors=[@printString_ret]

; block @printString_ret
	; predecessors=[printString]
	; successors=[]


; CFG for function printChar
; block printChar
	; predecessors=[]
		1: chr
	; 13 pc
	addrof t.1(1@function,u8*), chr(0@argument,u8)
		1: t.1
	const t.2(2@function,i64), 1
		2: t.1, t.2
	call _, printStringLength [t.1(1@function,u8*), t.2(2@function,i64)]
	jump @printChar_ret
	; successors=[@printChar_ret]

; block @printChar_ret
	; predecessors=[printChar]
	; successors=[]


; CFG for function printUint
; block printUint
	; predecessors=[]
		1: number
	; 3 pc
	const pos(2@function,u8), 20
		2: number, pos
	; 13:2 while true
	jump @while_1
		2: number, pos
	; successors=[@while_1]

; block @while_1
	; predecessors=[printUint, @if_2_end]
		2: number, pos
	; 80 pc
	const t.5(5@function,u8), 1
		3: number, pos, t.5
	sub pos(2@function,u8), pos(2@function,u8), t.5(5@function,u8)
		2: number, pos
	const t.6(6@function,i64), 10
		3: number, pos, t.6
	mod remainder(3@function,i64), number(0@argument,i64), t.6(6@function,i64)
		3: number, pos, remainder
	const t.7(7@function,i64), 10
		4: number, pos, remainder, t.7
	div number(0@argument,i64), number(0@argument,i64), t.7(7@function,i64)
		3: number, pos, remainder
	cast t.8(8@function,u8), remainder(3@function,i64)
		3: number, pos, t.8
	const t.9(9@function,u8), 48
		4: number, pos, t.8, t.9
	add digit(4@function,u8), t.8(8@function,u8), t.9(9@function,u8)
		3: digit, number, pos
	cast t.11(11@function,i64), pos(2@function,u8)
		4: digit, number, pos, t.11
	cast t.12(12@function,u8*), t.11(11@function,i64)
		4: digit, number, pos, t.12
	addrof t.10(10@function,u8*), [buffer(1@function,u8*)]
		5: digit, number, pos, t.10, t.12
	add t.10(10@function,u8*), t.10(10@function,u8*), t.12(12@function,u8*)
		4: digit, number, pos, t.10
	store [t.10(10@function,u8*)], digit(4@function,u8)
		2: number, pos
	; 19:3 if number == 0
	const t.14(14@function,i64), 0
		3: number, pos, t.14
	equals t.13(13@function,bool), number(0@argument,i64), t.14(14@function,i64)
		3: number, pos, t.13
	branch t.13(13@function,bool), false, @if_2_end
		2: number, pos
	jump @if_2_then
		2: number, pos
	; successors=[@if_2_end, @if_2_then]

; block @if_2_then
	; predecessors=[@while_1]
		1: pos
	; 1 pc
	jump @while_1_break
		1: pos
	; successors=[@while_1_break]

; block @while_1_break
	; predecessors=[@if_2_then]
		1: pos
	; 40 pc
	cast t.16(16@function,i64), pos(2@function,u8)
		2: pos, t.16
	cast t.17(17@function,u8*), t.16(16@function,i64)
		2: pos, t.17
	addrof t.15(15@function,u8*), [buffer(1@function,u8*)]
		3: pos, t.15, t.17
	add t.15(15@function,u8*), t.15(15@function,u8*), t.17(17@function,u8*)
		2: pos, t.15
	const t.20(20@function,u8), 20
		3: pos, t.15, t.20
	sub t.19(19@function,u8), t.20(20@function,u8), pos(2@function,u8)
		2: t.15, t.19
	cast t.18(18@function,i64), t.19(19@function,u8)
		2: t.15, t.18
	call _, printStringLength [t.15(15@function,u8*), t.18(18@function,i64)]
	jump @printUint_ret
	; successors=[@printUint_ret]

; block @if_2_end
	; predecessors=[@while_1]
		2: number, pos
	; 1 pc
	jump @while_1
		2: number, pos
	; successors=[@while_1]

; block @printUint_ret
	; predecessors=[@while_1_break]
	; successors=[]


; CFG for function printIntLf
; block printIntLf
	; predecessors=[]
		1: number
	; 13 pc
	; 27:2 if number < 0
	const t.2(2@function,i64), 0
		2: number, t.2
	lt t.1(1@function,bool), number(0@argument,i64), t.2(2@function,i64)
		2: number, t.1
	branch t.1(1@function,bool), false, @no_critical_edge_4
		1: number
	jump @if_3_then
		1: number
	; successors=[@no_critical_edge_4, @if_3_then]

; block @if_3_then
	; predecessors=[printIntLf]
		1: number
	; 11 pc
	const t.3(3@function,u8), 45
		2: number, t.3
	call _, printChar [t.3(3@function,u8)]
		1: number
	neg number(0@argument,i64), number(0@argument,i64)
		1: number
	jump @if_3_end
		1: number
	; successors=[@if_3_end]

; block @no_critical_edge_4
	; predecessors=[printIntLf]
		1: number
	; 1 pc
	jump @if_3_end
		1: number
	; successors=[@if_3_end]

; block @if_3_end
	; predecessors=[@no_critical_edge_4, @if_3_then]
		1: number
	; 9 pc
	call _, printUint [number(0@argument,i64)]
	const t.4(4@function,u8), 10
		1: t.4
	call _, printChar [t.4(4@function,u8)]
	jump @printIntLf_ret
	; successors=[@printIntLf_ret]

; block @printIntLf_ret
	; predecessors=[@if_3_end]
	; successors=[]


; CFG for function strlen
; block strlen
	; predecessors=[]
		1: str
	; 3 pc
	const length(1@function,i64), 0
		2: length, str
	; 37:2 for *str != 0
	jump @for_4
		2: length, str
	; successors=[@for_4]

; block @for_4
	; predecessors=[strlen, @for_4_continue]
		2: length, str
	; 19 pc
	load t.3(3@function,u8), [str(0@argument,u8*)]
		3: length, str, t.3
	const t.4(4@function,u8), 0
		4: length, str, t.3, t.4
	notequals t.2(2@function,bool), t.3(3@function,u8), t.4(4@function,u8)
		3: length, str, t.2
	branch t.2(2@function,bool), false, @for_4_break
		2: length, str
	jump @for_4_body
		2: length, str
	; successors=[@for_4_break, @for_4_body]

; block @for_4_body
	; predecessors=[@for_4]
		2: length, str
	; 10 pc
	const t.5(5@function,i64), 1
		3: length, str, t.5
	add length(1@function,i64), length(1@function,i64), t.5(5@function,i64)
		2: length, str
	jump @for_4_continue
		2: length, str
	; successors=[@for_4_continue]

; block @for_4_continue
	; predecessors=[@for_4_body]
		2: length, str
	; 20 pc
	cast t.7(7@function,i64), str(0@argument,u8*)
		2: length, t.7
	const t.8(8@function,i64), 1
		3: length, t.7, t.8
	add t.6(6@function,i64), t.7(7@function,i64), t.8(8@function,i64)
		2: length, t.6
	cast str(0@argument,u8*), t.6(6@function,i64)
		2: length, str
	jump @for_4
		2: length, str
	; successors=[@for_4]

; block @for_4_break
	; predecessors=[@for_4]
		1: length
	; 4 pc
	; 40:9 return length
	ret length(1@function,i64)
	jump @strlen_ret
	; successors=[@strlen_ret]

; block @strlen_ret
	; predecessors=[@for_4_break]
	; successors=[]


; CFG for function main
; block main
	; predecessors=[]
	; 369 pc
	const t.4(4@function,u8*), [string-0]
		1: t.4
	call _, printString [t.4(4@function,u8*)]
	const a(0@function,i16), 1
		1: a
	const b(1@function,i16), 2
		2: a, b
	lt t.6(6@function,bool), a(0@function,i16), b(1@function,i16)
		3: a, b, t.6
	cast t.5(5@function,i64), t.6(6@function,bool)
		3: a, b, t.5
	call _, printIntLf [t.5(5@function,i64)]
		2: a, b
	lt t.8(8@function,bool), b(1@function,i16), a(0@function,i16)
		3: a, b, t.8
	cast t.7(7@function,i64), t.8(8@function,bool)
		3: a, b, t.7
	call _, printIntLf [t.7(7@function,i64)]
		2: a, b
	const t.9(9@function,u8*), [string-1]
		3: a, b, t.9
	call _, printString [t.9(9@function,u8*)]
		2: a, b
	const c(2@function,u8), 0
		3: a, b, c
	const d(3@function,u8), 128
		4: a, b, c, d
	lt t.11(11@function,bool), c(2@function,u8), d(3@function,u8)
		5: a, b, c, d, t.11
	cast t.10(10@function,i64), t.11(11@function,bool)
		5: a, b, c, d, t.10
	call _, printIntLf [t.10(10@function,i64)]
		4: a, b, c, d
	lt t.13(13@function,bool), d(3@function,u8), c(2@function,u8)
		5: a, b, c, d, t.13
	cast t.12(12@function,i64), t.13(13@function,bool)
		5: a, b, c, d, t.12
	call _, printIntLf [t.12(12@function,i64)]
		4: a, b, c, d
	const t.14(14@function,u8*), [string-2]
		5: a, b, c, d, t.14
	call _, printString [t.14(14@function,u8*)]
		4: a, b, c, d
	lteq t.16(16@function,bool), a(0@function,i16), b(1@function,i16)
		5: a, b, c, d, t.16
	cast t.15(15@function,i64), t.16(16@function,bool)
		5: a, b, c, d, t.15
	call _, printIntLf [t.15(15@function,i64)]
		4: a, b, c, d
	lteq t.18(18@function,bool), b(1@function,i16), a(0@function,i16)
		5: a, b, c, d, t.18
	cast t.17(17@function,i64), t.18(18@function,bool)
		5: a, b, c, d, t.17
	call _, printIntLf [t.17(17@function,i64)]
		4: a, b, c, d
	const t.19(19@function,u8*), [string-3]
		5: a, b, c, d, t.19
	call _, printString [t.19(19@function,u8*)]
		4: a, b, c, d
	lteq t.21(21@function,bool), c(2@function,u8), d(3@function,u8)
		5: a, b, c, d, t.21
	cast t.20(20@function,i64), t.21(21@function,bool)
		5: a, b, c, d, t.20
	call _, printIntLf [t.20(20@function,i64)]
		4: a, b, c, d
	lteq t.23(23@function,bool), d(3@function,u8), c(2@function,u8)
		5: a, b, c, d, t.23
	cast t.22(22@function,i64), t.23(23@function,bool)
		5: a, b, c, d, t.22
	call _, printIntLf [t.22(22@function,i64)]
		4: a, b, c, d
	const t.24(24@function,u8*), [string-4]
		5: a, b, c, d, t.24
	call _, printString [t.24(24@function,u8*)]
		4: a, b, c, d
	equals t.26(26@function,bool), a(0@function,i16), b(1@function,i16)
		5: a, b, c, d, t.26
	cast t.25(25@function,i64), t.26(26@function,bool)
		5: a, b, c, d, t.25
	call _, printIntLf [t.25(25@function,i64)]
		4: a, b, c, d
	equals t.28(28@function,bool), b(1@function,i16), a(0@function,i16)
		5: a, b, c, d, t.28
	cast t.27(27@function,i64), t.28(28@function,bool)
		5: a, b, c, d, t.27
	call _, printIntLf [t.27(27@function,i64)]
		4: a, b, c, d
	const t.29(29@function,u8*), [string-5]
		5: a, b, c, d, t.29
	call _, printString [t.29(29@function,u8*)]
		4: a, b, c, d
	notequals t.31(31@function,bool), a(0@function,i16), b(1@function,i16)
		5: a, b, c, d, t.31
	cast t.30(30@function,i64), t.31(31@function,bool)
		5: a, b, c, d, t.30
	call _, printIntLf [t.30(30@function,i64)]
		4: a, b, c, d
	notequals t.33(33@function,bool), b(1@function,i16), a(0@function,i16)
		5: a, b, c, d, t.33
	cast t.32(32@function,i64), t.33(33@function,bool)
		5: a, b, c, d, t.32
	call _, printIntLf [t.32(32@function,i64)]
		4: a, b, c, d
	const t.34(34@function,u8*), [string-6]
		5: a, b, c, d, t.34
	call _, printString [t.34(34@function,u8*)]
		4: a, b, c, d
	gteq t.36(36@function,bool), a(0@function,i16), b(1@function,i16)
		5: a, b, c, d, t.36
	cast t.35(35@function,i64), t.36(36@function,bool)
		5: a, b, c, d, t.35
	call _, printIntLf [t.35(35@function,i64)]
		4: a, b, c, d
	gteq t.38(38@function,bool), b(1@function,i16), a(0@function,i16)
		5: a, b, c, d, t.38
	cast t.37(37@function,i64), t.38(38@function,bool)
		5: a, b, c, d, t.37
	call _, printIntLf [t.37(37@function,i64)]
		4: a, b, c, d
	const t.39(39@function,u8*), [string-7]
		5: a, b, c, d, t.39
	call _, printString [t.39(39@function,u8*)]
		4: a, b, c, d
	gteq t.41(41@function,bool), c(2@function,u8), d(3@function,u8)
		5: a, b, c, d, t.41
	cast t.40(40@function,i64), t.41(41@function,bool)
		5: a, b, c, d, t.40
	call _, printIntLf [t.40(40@function,i64)]
		4: a, b, c, d
	gteq t.43(43@function,bool), d(3@function,u8), c(2@function,u8)
		5: a, b, c, d, t.43
	cast t.42(42@function,i64), t.43(43@function,bool)
		5: a, b, c, d, t.42
	call _, printIntLf [t.42(42@function,i64)]
		4: a, b, c, d
	const t.44(44@function,u8*), [string-8]
		5: a, b, c, d, t.44
	call _, printString [t.44(44@function,u8*)]
		4: a, b, c, d
	gt t.46(46@function,bool), a(0@function,i16), b(1@function,i16)
		5: a, b, c, d, t.46
	cast t.45(45@function,i64), t.46(46@function,bool)
		5: a, b, c, d, t.45
	call _, printIntLf [t.45(45@function,i64)]
		4: a, b, c, d
	gt t.48(48@function,bool), b(1@function,i16), a(0@function,i16)
		3: c, d, t.48
	cast t.47(47@function,i64), t.48(48@function,bool)
		3: c, d, t.47
	call _, printIntLf [t.47(47@function,i64)]
		2: c, d
	const t.49(49@function,u8*), [string-9]
		3: c, d, t.49
	call _, printString [t.49(49@function,u8*)]
		2: c, d
	gt t.51(51@function,bool), c(2@function,u8), d(3@function,u8)
		3: c, d, t.51
	cast t.50(50@function,i64), t.51(51@function,bool)
		3: c, d, t.50
	call _, printIntLf [t.50(50@function,i64)]
		2: c, d
	gt t.53(53@function,bool), d(3@function,u8), c(2@function,u8)
		1: t.53
	cast t.52(52@function,i64), t.53(53@function,bool)
		1: t.52
	call _, printIntLf [t.52(52@function,i64)]
	jump @main_ret
	; successors=[@main_ret]

; block @main_ret
	; predecessors=[main]
	; successors=[]


