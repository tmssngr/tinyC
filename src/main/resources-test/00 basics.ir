@printChar:
 Local variables
	arg 0: chr (u8/1)
	var 1: t.1 (u8*/8)
	var 2: t.2 (i64/8)
	; 12 pc
	addrof t.1, chr
	const t.2, 1
	call _, printStringLength [t.1, t.2]
@printChar_ret:

@printUint:
 Local variables
	arg 0: number (i64/8)
	var 1: buffer[] (u8*/20)
	var 2: pos (u8/1)
	var 3: remainder (i64/8)
	var 4: digit (u8/1)
	var 5: t.5 (u8/1)
	var 6: t.6 (i64/8)
	var 7: t.7 (i64/8)
	var 8: t.8 (u8/1)
	var 9: t.9 (u8/1)
	var 10: t.10 (u8*/8)
	var 11: t.11 (i64/8)
	var 12: t.12 (u8*/8)
	var 13: t.13 (bool/1)
	var 14: t.14 (i64/8)
	var 15: t.15 (u8*/8)
	var 16: t.16 (i64/8)
	var 17: t.17 (u8*/8)
	var 18: t.18 (i64/8)
	var 19: t.19 (u8/1)
	var 20: t.20 (u8/1)
	; 137 pc
	const pos, 20
	; 13:2 while true
@while_1:
	const t.5, 1
	sub pos, pos, t.5
	const t.6, 10
	move remainder, number
	mod remainder, remainder, t.6
	const t.7, 10
	div number, number, t.7
	cast t.8(u8), remainder(i64)
	const t.9, 48
	move digit, t.8
	add digit, digit, t.9
	cast t.11(i64), pos(u8)
	cast t.12(u8*), t.11(i64)
	addrof t.10, [buffer]
	add t.10, t.10, t.12
	store [t.10], digit
	; 19:3 if number == 0
	const t.14, 0
	equals t.13, number, t.14
	branch t.13, false, @if_2_end
	jump @while_1_break
@if_2_end:
	jump @while_1
@while_1_break:
	cast t.16(i64), pos(u8)
	cast t.17(u8*), t.16(i64)
	addrof t.15, [buffer]
	add t.15, t.15, t.17
	const t.20, 20
	move t.19, t.20
	sub t.19, t.19, pos
	cast t.18(i64), t.19(u8)
	call _, printStringLength [t.15, t.18]
@printUint_ret:

@main:
 Local variables
	var 0: onePtr (u8*/8)
	var 1: twoPtr (u8*/8)
	var 2: t.2 (u8/1)
	var 3: t.3 (u8/1)
	var 4: t.4 (u8*/8)
	var 5: t.5 (i64/8)
	var 6: t.6 (u8*/8)
	var 7: t.7 (i64/8)
	var 8: t.8 (u8/1)
	; 71 pc
	; begin initialize global variables
	const zero, 48
	const one, 49
	const two, 50
	const threeFour, 34
	; end initialize global variables
	call _, printChar [zero]
	addrof onePtr, one
	load t.2, [onePtr]
	call _, printChar [t.2]
	addrof twoPtr, two
	const t.5, 0
	cast t.6(u8*), t.5(i64)
	move t.4, twoPtr
	add t.4, t.4, t.6
	load t.3, [t.4]
	call _, printChar [t.3]
	cast t.7(i64), threeFour(u8)
	call _, printUint [t.7]
	const t.8, 10
	call _, printChar [t.8]
@main_ret:

@printStringLength:
	mov     rdi, rsp
	
	mov     r8, rdx
	mov     rdx, rcx
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

Global variables
	0: zero (u8/1)
	1: one (u8/1)
	2: two (u8/1)
	3: threeFour (u8/1)

