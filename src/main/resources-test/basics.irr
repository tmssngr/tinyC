@printChar:
 Local variables
	arg 0: chr (u8/1)
	; 4 pc
	addrof r0, chr
	const r1, 1
	call _, printStringLength [r0, r1]

@printUint:
 Local variables
	arg 0: number (i64/8)
	var 1: buffer[] (u8*/20)
	var 2: pos (u8/1)
	; 39 pc
	const r0, 20
	; 13:2 while true
	move pos, r0
@while_1:
	const r0, 1
	move r1, pos
	sub r0, r1, r0
	const r1, 10
	move r2, number
	move r3, r2
	mod r1, r3, r1
	const r3, 10
	div r2, r2, r3
	cast r1(u8), r1(i64)
	const r3, 48
	add r1, r1, r3
	cast r3(i64), r0(u8)
	cast r3(u8*), r3(i64)
	; Spill pos
	move pos, r0
	addrof r0, [buffer]
	add r0, r0, r3
	store [r0], r1
	; 19:3 if number == 0
	const r0, 0
	equals r0, r2, r0
	move number, r2
	branch r0, false, @while_1
	move r0, pos
	cast r1(i64), r0(u8)
	cast r1(u8*), r1(i64)
	addrof r2, [buffer]
	add r1, r2, r1
	const r2, 20
	sub r0, r2, r0
	cast r0(i64), r0(u8)
	call _, printStringLength [r1, r0]

@main:
	; 33 pc
	; begin initialize global variables
	const r0, 48
	const r1, 49
	const r2, 50
	const r3, 34
	; end initialize global variables
	move zero, r0
	move one, r1
	move two, r2
	move threeFour, r3
	call _, printChar [r0]
	addrof r0, one
	load r0, [r0]
	call _, printChar [r0]
	addrof r0, two
	const r1, 0
	cast r1(u8*), r1(i64)
	add r0, r0, r1
	load r0, [r0]
	call _, printChar [r0]
	move r0, threeFour
	cast r0(i64), r0(u8)
	call _, printUint [r0]
	const r0, 10
	call _, printChar [r0]

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

Global variables
	0: zero (u8/1)
	1: one (u8/1)
	2: two (u8/1)
	3: threeFour (u8/1)

