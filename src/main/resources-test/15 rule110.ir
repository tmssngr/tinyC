@printString:
 Local variables
	arg 0: str
	var 1: length
	var 2: $.2
	var 3: $.3
	; 2:22 read var str(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (8)
	; 2:22 var $.2(%2)
	addrOf r0, [2@function]
	; 2:22 assign
	store [r0], r1 (8)
	; 2:15 call strlen
	call r0, @strlen (2)
	; 2:2 var length(%1)
	addrOf r1, [1@function]
	; 2:2 assign
	store [r1], r0 (8)
	; 3:20 read var str(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (8)
	; 3:20 var $.3(%3)
	addrOf r0, [3@function]
	; 3:20 assign
	store [r0], r1 (8)
	; 3:2 call printStringLength
	call @printStringLength (3, 1)
@printString_ret:

@printChar:
 Local variables
	arg 0: chr
	var 1: $.1
	var 2: $.2
	; 7:21 var chr(%0)
	addrOf r0, [0@argument]
	; 7:20 var $.1(%1)
	addrOf r1, [1@function]
	; 7:20 assign
	store [r1], r0 (8)
	; 7:26 int lit 1
	ld r0, 1 (8)
	; 7:26 var $.2(%2)
	addrOf r1, [2@function]
	; 7:26 assign
	store [r1], r0 (8)
	; 7:2 call printStringLength
	call @printStringLength (1, 2)
@printChar_ret:

@strlen:
 Local variables
	arg 0: str
	var 1: length
	; 36:15 int lit 0
	ld r0, 0 (8)
	; 36:2 var length(%1)
	addrOf r1, [1@function]
	; 36:2 assign
	store [r1], r0 (8)
	; 37:2 for *str != 0
@for_1:
	; 37:10 read var str(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (8)
	; 37:9 deref
	load r0, [r1] (1)
	; 37:17 int lit 0
	ld r1, 0 (1)
	; 37:14 !=
	cmp r2, (r0 != r1) (u8)
	branch-false r2, @for_1_break (else: @for_1_body)
	; 38:12 read var length(%1)
	addrOf r0, [1@function]
	load r1, [r0] (8)
	; 38:21 int lit 1
	ld r0, 1 (8)
	; 38:19 add
	add r1, r0 (i64)
	; 38:3 var length(%1)
	addrOf r0, [1@function]
	; 38:10 assign
	store [r0], r1 (8)
@for_1_continue:
	; 37:26 read var str(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (8)
	; 37:32 int lit 1
	ld r0, 1 (8)
	; 37:30 add
	add r1, r0 (u8*)
	; 37:20 var str(%0)
	addrOf r0, [0@argument]
	; 37:24 assign
	store [r0], r1 (8)
	jmp @for_1
@for_1_break:
	; 40:9 return length
	; 40:9 read var length(%1)
	addrOf r0, [1@function]
	load r1, [r0] (8)
	return r1 (8)
	jmp @strlen_ret
@strlen_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

@printBoard:
 Local variables
	var 0: $.0
	var 1: i
	var 2: $.2
	var 3: $.3
	var 4: $.4
	; 10:12 int lit 124
	ld r0, 124 (1)
	; 10:12 var $.0(%0)
	addrOf r1, [0@function]
	; 10:12 assign
	store [r1], r0 (1)
	; 10:2 call printChar
	call @printChar (0)
	; 11:14 int lit 0
	ld r0, 0 (1)
	; 11:7 var i(%1)
	addrOf r1, [1@function]
	; 11:7 assign
	store [r1], r0 (1)
	; 11:2 for i < 30
@for_2:
	; 11:17 read var i(%1)
	addrOf r0, [1@function]
	load r1, [r0] (1)
	; 11:21 int lit 30
	ld r0, 30 (1)
	; 11:19 <
	cmp r2, (r1 < r0) (u8)
	branch-false r2, @for_2_break (else: @for_2_body)
	; 12:3 if [...] == 0
	; 12:13 array board($0)
	; 12:13 read var i(%1)
	addrOf r0, [1@function]
	load r1, [r0] (1)
	cast r0 (i64), r1 (u8)
	mul r0, 1
	addrOf r1, [0@global]
	add r1, r0 (u8*)
	load r0, [r1] (1)
	; 12:19 int lit 0
	ld r1, 0 (1)
	; 12:16 ==
	cmp r2, (r0 == r1) (u8)
	branch-false r2, @if_3_else (else: @if_3_then)
	; 13:14 int lit 32
	ld r0, 32 (1)
	; 13:14 var $.2(%2)
	addrOf r1, [2@function]
	; 13:14 assign
	store [r1], r0 (1)
	; 13:4 call printChar
	call @printChar (2)
	jmp @if_3_end
@if_3_else:
	; 16:14 int lit 42
	ld r0, 42 (1)
	; 16:14 var $.3(%3)
	addrOf r1, [3@function]
	; 16:14 assign
	store [r1], r0 (1)
	; 16:4 call printChar
	call @printChar (3)
@if_3_end:
@for_2_continue:
	; 11:36 read var i(%1)
	addrOf r0, [1@function]
	load r1, [r0] (1)
	; 11:40 int lit 1
	ld r0, 1 (1)
	; 11:38 add
	add r1, r0 (u8)
	; 11:32 var i(%1)
	addrOf r0, [1@function]
	; 11:34 assign
	store [r0], r1 (1)
	jmp @for_2
@for_2_break:
	; 19:14 string literal string_0
	load r0, stringlit-0
	; 19:14 var $.4(%4)
	addrOf r1, [4@function]
	; 19:14 assign
	store [r1], r0 (8)
	; 19:2 call printString
	call @printString (4)
@printBoard_ret:

@main:
 Local variables
	var 0: i
	var 1: i
	var 2: pattern
	var 3: j
	; 23:14 int lit 0
	ld r0, 0 (1)
	; 23:7 var i(%0)
	addrOf r1, [0@function]
	; 23:7 assign
	store [r1], r0 (1)
	; 23:2 for i < 30
@for_4:
	; 23:17 read var i(%0)
	addrOf r0, [0@function]
	load r1, [r0] (1)
	; 23:21 int lit 30
	ld r0, 30 (1)
	; 23:19 <
	cmp r2, (r1 < r0) (u8)
	branch-false r2, @for_4_break (else: @for_4_body)
	; 24:14 int lit 0
	ld r0, 0 (1)
	; 24:9 array board($0)
	; 24:9 read var i(%0)
	addrOf r1, [0@function]
	load r2, [r1] (1)
	cast r1 (i64), r2 (u8)
	mul r1, 1
	addrOf r2, [0@global]
	add r2, r1 (u8*)
	; 24:12 assign
	store [r2], r0 (1)
@for_4_continue:
	; 23:36 read var i(%0)
	addrOf r0, [0@function]
	load r1, [r0] (1)
	; 23:40 int lit 1
	ld r0, 1 (1)
	; 23:38 add
	add r1, r0 (u8)
	; 23:32 var i(%0)
	addrOf r0, [0@function]
	; 23:34 assign
	store [r0], r1 (1)
	jmp @for_4
@for_4_break:
	; 26:25 int lit 1
	ld r0, 1 (1)
	; 26:18 array board($0)
	; 26:8 int lit 30
	ld r1, 30 (1)
	; 26:20 int lit 1
	ld r2, 1 (1)
	; 26:18 sub
	sub r1, r2 (u8)
	cast r2 (i64), r1 (u8)
	mul r2, 1
	addrOf r1, [0@global]
	add r1, r2 (u8*)
	; 26:23 assign
	store [r1], r0 (1)
	; 28:2 call printBoard
	call @printBoard ()
	; 30:14 int lit 0
	ld r0, 0 (1)
	; 30:7 var i(%1)
	addrOf r1, [1@function]
	; 30:7 assign
	store [r1], r0 (1)
	; 30:2 for i < 30 - 2
@for_5:
	; 30:17 read var i(%1)
	addrOf r0, [1@function]
	load r1, [r0] (1)
	; 30:21 int lit 30
	ld r0, 30 (1)
	; 30:33 int lit 2
	ld r2, 2 (1)
	; 30:31 sub
	sub r0, r2 (u8)
	; 30:19 <
	cmp r2, (r1 < r0) (u8)
	branch-false r2, @for_5_break (else: @for_5_body)
	; 31:23 array board($0)
	; 31:23 int lit 0
	ld r0, 0 (8)
	mul r0, 1
	addrOf r1, [0@global]
	add r1, r0 (u8*)
	load r0, [r1] (1)
	; 31:29 int lit 1
	ld r1, 1 (1)
	; 31:26 shiftleft
	shiftl r0, r1 (u8)
	; 31:40 array board($0)
	; 31:40 int lit 1
	ld r1, 1 (8)
	mul r1, 1
	addrOf r2, [0@global]
	add r2, r1 (u8*)
	load r1, [r2] (1)
	; 31:32 or
	or r0, r1 (u8)
	; 31:3 var pattern(%2)
	addrOf r1, [2@function]
	; 31:3 assign
	store [r1], r0 (1)
	; 32:15 int lit 1
	ld r0, 1 (1)
	; 32:8 var j(%3)
	addrOf r1, [3@function]
	; 32:8 assign
	store [r1], r0 (1)
	; 32:3 for j < 30 - 1
@for_6:
	; 32:18 read var j(%3)
	addrOf r0, [3@function]
	load r1, [r0] (1)
	; 32:22 int lit 30
	ld r0, 30 (1)
	; 32:34 int lit 1
	ld r2, 1 (1)
	; 32:32 sub
	sub r0, r2 (u8)
	; 32:20 <
	cmp r2, (r1 < r0) (u8)
	branch-false r2, @for_6_break (else: @for_6_body)
	; 33:16 read var pattern(%2)
	addrOf r0, [2@function]
	load r1, [r0] (1)
	; 33:27 int lit 1
	ld r0, 1 (1)
	; 33:24 shiftleft
	shiftl r1, r0 (u8)
	; 33:32 int lit 7
	ld r0, 7 (1)
	; 33:30 and
	and r1, r0 (u8)
	; 33:45 array board($0)
	; 33:43 read var j(%3)
	addrOf r0, [3@function]
	load r2, [r0] (1)
	; 33:47 int lit 1
	ld r0, 1 (1)
	; 33:45 add
	add r2, r0 (u8)
	cast r0 (i64), r2 (u8)
	mul r0, 1
	addrOf r2, [0@global]
	add r2, r0 (u8*)
	load r0, [r2] (1)
	; 33:35 or
	or r1, r0 (u8)
	; 33:4 var pattern(%2)
	addrOf r0, [2@function]
	; 33:12 assign
	store [r0], r1 (1)
	; 34:16 int lit 110
	ld r0, 110 (1)
	; 34:23 read var pattern(%2)
	addrOf r1, [2@function]
	load r2, [r1] (1)
	; 34:20 shiftright
	shiftr r0, r2 (u8)
	; 34:34 int lit 1
	ld r1, 1 (1)
	; 34:32 and
	and r0, r1 (u8)
	; 34:10 array board($0)
	; 34:10 read var j(%3)
	addrOf r1, [3@function]
	load r2, [r1] (1)
	cast r1 (i64), r2 (u8)
	mul r1, 1
	addrOf r2, [0@global]
	add r2, r1 (u8*)
	; 34:13 assign
	store [r2], r0 (1)
@for_6_continue:
	; 32:41 read var j(%3)
	addrOf r0, [3@function]
	load r1, [r0] (1)
	; 32:45 int lit 1
	ld r0, 1 (1)
	; 32:43 add
	add r1, r0 (u8)
	; 32:37 var j(%3)
	addrOf r0, [3@function]
	; 32:39 assign
	store [r0], r1 (1)
	jmp @for_6
@for_6_break:
	; 36:3 call printBoard
	call @printBoard ()
@for_5_continue:
	; 30:40 read var i(%1)
	addrOf r0, [1@function]
	load r1, [r0] (1)
	; 30:44 int lit 1
	ld r0, 1 (1)
	; 30:42 add
	add r1, r0 (u8)
	; 30:36 var i(%1)
	addrOf r0, [1@function]
	; 30:38 assign
	store [r0], r1 (1)
	jmp @for_5
@for_5_break:
@main_ret:

Global variables
	0: board (240)

String literals
	string lit 0 "|\n\0"
