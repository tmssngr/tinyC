@printString:
 Local variables
	arg 0: str
	var 1: length
	; 10 pc
	call length, strlen, [str]
	call _, printStringLength [str, length]
@printString_ret:

@printChar:
 Local variables
	arg 0: chr
	var 1: t.1
	var 2: t.2
	; 12 pc
	addrof t.1, chr
	const t.2, 1
	call _, printStringLength [t.1, t.2]
@printChar_ret:

@strlen:
 Local variables
	arg 0: str
	var 1: length
	var 2: t.2
	var 3: t.3
	var 4: t.4
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	; 53 pc
	const length, 0
	; 37:2 for *str != 0
@for_1:
	load t.3, [str]
	const t.4, 0
	notequals t.2, t.3, t.4
	branch t.2, false, @for_1_break
	const t.5, 1
	add length, length, t.5
@for_1_continue:
	cast t.7, str
	const t.8, 1
	add t.6, t.7, t.8
	cast str, t.6
	jump @for_1
@for_1_break:
	; 40:9 return length
	ret length
	jump @strlen_ret
@strlen_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

@printBoard:
 Local variables
	var 0: i
	var 1: t.1
	var 2: t.2
	var 3: t.3
	var 4: t.4
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	var 9: t.9
	var 10: t.10
	var 11: t.11
	var 12: t.12
	var 13: t.13
	; 84 pc
	const t.1, 124
	call _, printChar [t.1]
	const i, 0
	; 11:2 for i < 30
@for_2:
	const t.3, 30
	lt t.2, i, t.3
	branch t.2, false, @for_2_break
	; 12:3 if [...] == 0
	cast t.7, i
	cast t.8, t.7
	addrof t.6, [board]
	add t.6, t.6, t.8
	load t.5, [t.6]
	const t.9, 0
	equals t.4, t.5, t.9
	branch t.4, false, @if_3_else
	const t.10, 32
	call _, printChar [t.10]
	jump @if_3_end
@if_3_else:
	const t.11, 42
	call _, printChar [t.11]
@if_3_end:
@for_2_continue:
	const t.12, 1
	add i, i, t.12
	jump @for_2
@for_2_break:
	const t.13, [string-0]
	call _, printString [t.13]
@printBoard_ret:

@main:
 Local variables
	var 0: i
	var 1: i
	var 2: pattern
	var 3: j
	var 4: t.4
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	var 9: t.9
	var 10: t.10
	var 11: t.11
	var 12: t.12
	var 13: t.13
	var 14: t.14
	var 15: t.15
	var 16: t.16
	var 17: t.17
	var 18: t.18
	var 19: t.19
	var 20: t.20
	var 21: t.21
	var 22: t.22
	var 23: t.23
	var 24: t.24
	var 25: t.25
	var 26: t.26
	var 27: t.27
	var 28: t.28
	var 29: t.29
	var 30: t.30
	var 31: t.31
	var 32: t.32
	var 33: t.33
	var 34: t.34
	var 35: t.35
	var 36: t.36
	var 37: t.37
	var 38: t.38
	var 39: t.39
	var 40: t.40
	var 41: t.41
	var 42: t.42
	var 43: t.43
	var 44: t.44
	var 45: t.45
	var 46: t.46
	var 47: t.47
	var 48: t.48
	; 298 pc
	const i, 0
	; 23:2 for i < 30
@for_4:
	const t.5, 30
	lt t.4, i, t.5
	branch t.4, false, @for_4_break
	const t.6, 0
	cast t.8, i
	cast t.9, t.8
	addrof t.7, [board]
	add t.7, t.7, t.9
	store [t.7], t.6
@for_4_continue:
	const t.10, 1
	add i, i, t.10
	jump @for_4
@for_4_break:
	const t.11, 1
	const t.14, 29
	cast t.13, t.14
	cast t.15, t.13
	addrof t.12, [board]
	add t.12, t.12, t.15
	store [t.12], t.11
	call _, printBoard []
	const i, 0
	; 30:2 for i < 28
@for_5:
	const t.17, 28
	lt t.16, i, t.17
	branch t.16, false, @for_5_break
	const t.21, 0
	cast t.22, t.21
	addrof t.20, [board]
	add t.20, t.20, t.22
	load t.19, [t.20]
	const t.23, 1
	shiftleft t.18, t.19, t.23
	const t.26, 1
	cast t.27, t.26
	addrof t.25, [board]
	add t.25, t.25, t.27
	load t.24, [t.25]
	or pattern, t.18, t.24
	const j, 1
	; 32:3 for j < 29
@for_6:
	const t.29, 29
	lt t.28, j, t.29
	branch t.28, false, @for_6_break
	const t.32, 1
	shiftleft t.31, pattern, t.32
	const t.33, 7
	and t.30, t.31, t.33
	const t.38, 1
	add t.37, j, t.38
	cast t.36, t.37
	cast t.39, t.36
	addrof t.35, [board]
	add t.35, t.35, t.39
	load t.34, [t.35]
	or pattern, t.30, t.34
	const t.42, 110
	shiftright t.41, t.42, pattern
	const t.43, 1
	and t.40, t.41, t.43
	cast t.45, j
	cast t.46, t.45
	addrof t.44, [board]
	add t.44, t.44, t.46
	store [t.44], t.40
@for_6_continue:
	const t.47, 1
	add j, j, t.47
	jump @for_6
@for_6_break:
	call _, printBoard []
@for_5_continue:
	const t.48, 1
	add i, i, t.48
	jump @for_5
@for_5_break:
@main_ret:

Global variables
	0: board (240)

String literals
	string lit 0 "|\n\0"
