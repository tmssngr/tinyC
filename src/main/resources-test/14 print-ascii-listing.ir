@printString:
 Local variables
	arg 0: str (u8*/8)
	var 1: length (i64/8)
	; 10 pc
	call length, strlen, [str]
	call _, printStringLength [str, length]
@printString_ret:

@printChar:
 Local variables
	arg 0: chr (u8/1)
	var 1: t.1 (u8*/8)
	var 2: t.2 (i64/8)
	; 12 pc
	addrof t.1, chr
	const t.2, 1
	call _, printStringLength [t.1, t.2]
@printChar_ret:

@strlen:
 Local variables
	arg 0: str (u8*/8)
	var 1: length (i64/8)
	var 2: t.2 (bool/1)
	var 3: t.3 (u8/1)
	var 4: t.4 (u8/1)
	var 5: t.5 (i64/8)
	var 6: t.6 (i64/8)
	var 7: t.7 (i64/8)
	var 8: t.8 (i64/8)
	; 53 pc
	const length, 0
	; 37:2 for *str != 0
@for_1:
	load t.3, [str]
	const t.4, 0
	notequals t.2, t.3, t.4
	branch t.2, false, @for_1_break
	const t.5, 1
	add length, length, t.5
@for_1_continue:
	cast t.7, str
	const t.8, 1
	add t.6, t.7, t.8
	cast str, t.6
	jump @for_1
@for_1_break:
	; 40:9 return length
	ret length
	jump @strlen_ret
@strlen_ret:

@printNibble:
 Local variables
	arg 0: x (u8/1)
	var 1: t.1 (u8/1)
	var 2: t.2 (bool/1)
	var 3: t.3 (u8/1)
	var 4: t.4 (u8/1)
	var 5: t.5 (u8/1)
	; 42 pc
	const t.1, 15
	and x, x, t.1
	; 5:2 if x > 9
	const t.3, 9
	gt t.2, x, t.3
	branch t.2, false, @if_2_end
	const t.4, 7
	add x, x, t.4
@if_2_end:
	const t.5, 48
	add x, x, t.5
	call _, printChar [x]
@printNibble_ret:

@printHex2:
 Local variables
	arg 0: x (u8/1)
	var 1: t.1 (u8/1)
	var 2: t.2 (u8/1)
	; 15 pc
	const t.2, 4
	shiftright t.1, x, t.2
	call _, printNibble [t.1]
	call _, printNibble [x]
@printHex2_ret:

@main:
 Local variables
	var 0: i (u8/1)
	var 1: i (u8/1)
	var 2: t.2 (u8*/8)
	var 3: t.3 (bool/1)
	var 4: t.4 (u8/1)
	var 5: t.5 (bool/1)
	var 6: t.6 (u8/1)
	var 7: t.7 (u8/1)
	var 8: t.8 (u8/1)
	var 9: t.9 (u8/1)
	var 10: t.10 (u8/1)
	var 11: t.11 (u8/1)
	var 12: t.12 (bool/1)
	var 13: t.13 (u8/1)
	var 14: t.14 (bool/1)
	var 15: t.15 (u8/1)
	var 16: t.16 (u8/1)
	var 17: t.17 (u8/1)
	var 18: t.18 (bool/1)
	var 19: t.19 (u8/1)
	var 20: t.20 (u8/1)
	var 21: t.21 (u8/1)
	var 22: t.22 (u8/1)
	var 23: t.23 (bool/1)
	var 24: t.24 (u8/1)
	var 25: t.25 (u8/1)
	var 26: t.26 (u8/1)
	var 27: t.27 (u8/1)
	var 28: t.28 (u8/1)
	; 167 pc
	const t.2, [string-0]
	call _, printString [t.2]
	const i, 0
	; 19:2 for i < 16
@for_3:
	const t.4, 16
	lt t.3, i, t.4
	branch t.3, false, @for_3_break
	; 20:3 if i & 7 == 0
	const t.7, 7
	and t.6, i, t.7
	const t.8, 0
	equals t.5, t.6, t.8
	branch t.5, false, @if_4_end
	const t.9, 32
	call _, printChar [t.9]
@if_4_end:
	call _, printNibble [i]
@for_3_continue:
	const t.10, 1
	add i, i, t.10
	jump @for_3
@for_3_break:
	const t.11, 10
	call _, printChar [t.11]
	const i, 32
	; 27:2 for i < 128
@for_5:
	const t.13, 128
	lt t.12, i, t.13
	branch t.12, false, @for_5_break
	; 28:3 if i & 15 == 0
	const t.16, 15
	and t.15, i, t.16
	const t.17, 0
	equals t.14, t.15, t.17
	branch t.14, false, @if_6_end
	call _, printHex2 [i]
@if_6_end:
	; 31:3 if i & 7 == 0
	const t.20, 7
	and t.19, i, t.20
	const t.21, 0
	equals t.18, t.19, t.21
	branch t.18, false, @if_7_end
	const t.22, 32
	call _, printChar [t.22]
@if_7_end:
	call _, printChar [i]
	; 35:3 if i & 15 == 15
	const t.25, 15
	and t.24, i, t.25
	const t.26, 15
	equals t.23, t.24, t.26
	branch t.23, false, @if_8_end
	const t.27, 10
	call _, printChar [t.27]
@if_8_end:
@for_5_continue:
	const t.28, 1
	add i, i, t.28
	jump @for_5
@for_5_break:
@main_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

String literals
	string lit 0 " x\0"
