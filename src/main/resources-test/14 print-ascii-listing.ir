@printString:
 Local variables
	arg 0: str
	var 1: length
	var 2: $.2
	var 3: $.3
	; 2:22 read var str(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (8)
	; 2:22 var $.2(%2)
	addrOf r0, [2@function]
	; 2:22 assign
	store [r0], r1 (8)
	; 2:15 call strlen
	call r0, @strlen (2)
	; 2:2 var length(%1)
	addrOf r1, [1@function]
	; 2:2 assign
	store [r1], r0 (8)
	; 3:20 read var str(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (8)
	; 3:20 var $.3(%3)
	addrOf r0, [3@function]
	; 3:20 assign
	store [r0], r1 (8)
	; 3:2 call printStringLength
	call @printStringLength (3, 1)
@printString_ret:

@printChar:
 Local variables
	arg 0: chr
	var 1: $.1
	var 2: $.2
	; 7:21 var chr(%0)
	addrOf r0, [0@argument]
	; 7:20 var $.1(%1)
	addrOf r1, [1@function]
	; 7:20 assign
	store [r1], r0 (8)
	; 7:26 int lit 1
	ld r0, 1 (8)
	; 7:26 var $.2(%2)
	addrOf r1, [2@function]
	; 7:26 assign
	store [r1], r0 (8)
	; 7:2 call printStringLength
	call @printStringLength (1, 2)
@printChar_ret:

@strlen:
 Local variables
	arg 0: str
	var 1: length
	; 36:15 int lit 0
	ld r0, 0 (8)
	; 36:2 var length(%1)
	addrOf r1, [1@function]
	; 36:2 assign
	store [r1], r0 (8)
	; 37:2 for *str != 0
@for_1:
	; 37:10 read var str(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (8)
	; 37:9 deref
	load r0, [r1] (1)
	; 37:17 int lit 0
	ld r1, 0 (1)
	; 37:14 !=
	cmp r2, (r0 != r1) (u8)
	branch-false r2, @for_1_break (else: @for_1_body)
	; 38:12 read var length(%1)
	addrOf r0, [1@function]
	load r1, [r0] (8)
	; 38:21 int lit 1
	ld r0, 1 (8)
	; 38:19 add
	add r1, r0 (i64)
	; 38:3 var length(%1)
	addrOf r0, [1@function]
	; 38:10 assign
	store [r0], r1 (8)
@for_1_continue:
	; 37:26 read var str(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (8)
	; 37:32 int lit 1
	ld r0, 1 (8)
	; 37:30 add
	add r1, r0 (u8*)
	; 37:20 var str(%0)
	addrOf r0, [0@argument]
	; 37:24 assign
	store [r0], r1 (8)
	jmp @for_1
@for_1_break:
	; 40:9 return length
	; 40:9 read var length(%1)
	addrOf r0, [1@function]
	load r1, [r0] (8)
	return r1 (8)
	jmp @strlen_ret
@strlen_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

@printNibble:
 Local variables
	arg 0: x
	var 1: $.1
	; 4:6 read var x(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (1)
	; 4:10 int lit 15
	ld r0, 15 (1)
	; 4:8 and
	and r1, r0 (u8)
	; 4:2 var x(%0)
	addrOf r0, [0@argument]
	; 4:4 assign
	store [r0], r1 (1)
	; 5:2 if x > 9
	; 5:6 read var x(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (1)
	; 5:10 int lit 9
	ld r0, 9 (1)
	; 5:8 >
	cmp r2, (r1 > r0) (u8)
	branch-false r2, @if_2_end (else: @if_2_then)
	; 6:7 read var x(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (1)
	; 6:12 int lit 65
	ld r0, 65 (1)
	; 6:18 int lit 57
	ld r2, 57 (1)
	; 6:16 sub
	sub r0, r2 (u8)
	; 6:24 int lit 1
	ld r2, 1 (1)
	; 6:22 sub
	sub r0, r2 (u8)
	; 6:9 add
	add r1, r0 (u8)
	; 6:3 var x(%0)
	addrOf r0, [0@argument]
	; 6:5 assign
	store [r0], r1 (1)
@if_2_end:
	; 8:6 read var x(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (1)
	; 8:10 int lit 48
	ld r0, 48 (1)
	; 8:8 add
	add r1, r0 (u8)
	; 8:2 var x(%0)
	addrOf r0, [0@argument]
	; 8:4 assign
	store [r0], r1 (1)
	; 9:12 read var x(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (1)
	; 9:12 var $.1(%1)
	addrOf r0, [1@function]
	; 9:12 assign
	store [r0], r1 (1)
	; 9:2 call printChar
	call @printChar (1)
@printNibble_ret:

@printHex2:
 Local variables
	arg 0: x
	var 1: $.1
	var 2: $.2
	; 13:14 read var x(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (1)
	; 13:18 int lit 16
	ld r0, 16 (1)
	; 13:16 divide
	div r1, r0 (u8)
	; 13:16 var $.1(%1)
	addrOf r0, [1@function]
	; 13:16 assign
	store [r0], r1 (1)
	; 13:2 call printNibble
	call @printNibble (1)
	; 14:14 read var x(%0)
	addrOf r0, [0@argument]
	load r1, [r0] (1)
	; 14:14 var $.2(%2)
	addrOf r0, [2@function]
	; 14:14 assign
	store [r0], r1 (1)
	; 14:2 call printNibble
	call @printNibble (2)
@printHex2_ret:

@main:
 Local variables
	var 0: $.0
	var 1: i
	var 2: $.2
	var 3: $.3
	var 4: i
	var 5: $.5
	var 6: $.6
	; 18:14 string literal string_0
	load r0, stringlit-0
	; 18:14 var $.0(%0)
	addrOf r1, [0@function]
	; 18:14 assign
	store [r1], r0 (8)
	; 18:2 call printString
	call @printString (0)
	; 19:14 int lit 0
	ld r0, 0 (1)
	; 19:7 var i(%1)
	addrOf r1, [1@function]
	; 19:7 assign
	store [r1], r0 (1)
	; 19:2 for i < 16
@for_3:
	; 19:17 read var i(%1)
	addrOf r0, [1@function]
	load r1, [r0] (1)
	; 19:21 int lit 16
	ld r0, 16 (1)
	; 19:19 <
	cmp r2, (r1 < r0) (u8)
	branch-false r2, @for_3_break (else: @for_3_body)
	; 20:3 if i & 7 == 0
	; 20:8 read var i(%1)
	addrOf r0, [1@function]
	load r1, [r0] (1)
	; 20:12 int lit 7
	ld r0, 7 (1)
	; 20:10 and
	and r1, r0 (u8)
	; 20:18 int lit 0
	ld r0, 0 (1)
	; 20:15 ==
	cmp r2, (r1 == r0) (u8)
	branch-false r2, @if_4_end (else: @if_4_then)
	; 21:14 int lit 32
	ld r0, 32 (1)
	; 21:14 var $.2(%2)
	addrOf r1, [2@function]
	; 21:14 assign
	store [r1], r0 (1)
	; 21:4 call printChar
	call @printChar (2)
@if_4_end:
	; 23:3 call printNibble
	call @printNibble (1)
@for_3_continue:
	; 19:31 read var i(%1)
	addrOf r0, [1@function]
	load r1, [r0] (1)
	; 19:35 int lit 1
	ld r0, 1 (1)
	; 19:33 add
	add r1, r0 (u8)
	; 19:27 var i(%1)
	addrOf r0, [1@function]
	; 19:29 assign
	store [r0], r1 (1)
	jmp @for_3
@for_3_break:
	; 25:12 int lit 10
	ld r0, 10 (1)
	; 25:12 var $.3(%3)
	addrOf r1, [3@function]
	; 25:12 assign
	store [r1], r0 (1)
	; 25:2 call printChar
	call @printChar (3)
	; 27:14 int lit 32
	ld r0, 32 (1)
	; 27:7 var i(%4)
	addrOf r1, [4@function]
	; 27:7 assign
	store [r1], r0 (1)
	; 27:2 for i < 128
@for_5:
	; 27:20 read var i(%4)
	addrOf r0, [4@function]
	load r1, [r0] (1)
	; 27:24 int lit 128
	ld r0, 128 (1)
	; 27:22 <
	cmp r2, (r1 < r0) (u8)
	branch-false r2, @for_5_break (else: @for_5_body)
	; 28:3 if i & 15 == 0
	; 28:8 read var i(%4)
	addrOf r0, [4@function]
	load r1, [r0] (1)
	; 28:12 int lit 15
	ld r0, 15 (1)
	; 28:10 and
	and r1, r0 (u8)
	; 28:20 int lit 0
	ld r0, 0 (1)
	; 28:17 ==
	cmp r2, (r1 == r0) (u8)
	branch-false r2, @if_6_end (else: @if_6_then)
	; 29:4 call printHex2
	call @printHex2 (4)
@if_6_end:
	; 31:3 if i & 7 == 0
	; 31:8 read var i(%4)
	addrOf r0, [4@function]
	load r1, [r0] (1)
	; 31:12 int lit 7
	ld r0, 7 (1)
	; 31:10 and
	and r1, r0 (u8)
	; 31:18 int lit 0
	ld r0, 0 (1)
	; 31:15 ==
	cmp r2, (r1 == r0) (u8)
	branch-false r2, @if_7_end (else: @if_7_then)
	; 32:14 int lit 32
	ld r0, 32 (1)
	; 32:14 var $.5(%5)
	addrOf r1, [5@function]
	; 32:14 assign
	store [r1], r0 (1)
	; 32:4 call printChar
	call @printChar (5)
@if_7_end:
	; 34:3 call printChar
	call @printChar (4)
	; 35:3 if i & 15 == 15
	; 35:8 read var i(%4)
	addrOf r0, [4@function]
	load r1, [r0] (1)
	; 35:12 int lit 15
	ld r0, 15 (1)
	; 35:10 and
	and r1, r0 (u8)
	; 35:20 int lit 15
	ld r0, 15 (1)
	; 35:17 ==
	cmp r2, (r1 == r0) (u8)
	branch-false r2, @if_8_end (else: @if_8_then)
	; 36:14 int lit 10
	ld r0, 10 (1)
	; 36:14 var $.6(%6)
	addrOf r1, [6@function]
	; 36:14 assign
	store [r1], r0 (1)
	; 36:4 call printChar
	call @printChar (6)
@if_8_end:
@for_5_continue:
	; 27:34 read var i(%4)
	addrOf r0, [4@function]
	load r1, [r0] (1)
	; 27:38 int lit 1
	ld r0, 1 (1)
	; 27:36 add
	add r1, r0 (u8)
	; 27:30 var i(%4)
	addrOf r0, [4@function]
	; 27:32 assign
	store [r0], r1 (1)
	jmp @for_5
@for_5_break:
@main_ret:

String literals
	string lit 0 " x\0"
