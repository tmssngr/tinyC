void printString(u8* str) {
	i64 length;
	u8* $.2;
	u8* $.3;

	$.2 = str;
	length = strlen($.2);
	$.3 = str;
	printStringLength($.3, length);
}

void printChar(u8 chr) {
	u8* $.1;
	i64 $.2;

	$.1 = &chr;
	$.2 = 1;
	printStringLength($.1, $.2);
}

void printUint(i64 number) {
	u8* buffer[20];
	u8 pos;
	i64 remainder;
	u8 digit;
	u8* $.5;
	i64 $.6;

	pos = 20;
	while (true) {
		pos = pos - 1;
		remainder = number % 10;
		number = number / 10;
		digit = ((u8)remainder) + 48;
		buffer[(i64)pos] = digit;
		if (number == 0) {
			break;
		}
	}
	$.5 = &buffer[(i64)pos];
	$.6 = (i64)(20 - pos);
	printStringLength($.5, $.6);
}

void printIntLf(i64 number) {
	u8 $.1;
	i64 $.2;
	u8 $.3;

	if (number < 0) {
		$.1 = 45;
		printChar($.1);
		number = -number;
	}
	$.2 = number;
	printUint($.2);
	$.3 = 10;
	printChar($.3);
}

i64 strlen(u8* str) {
	i64 length;

	length = 0;
	for (; (*str) != 0; str = (u8*)(((i64)str) + 1)) {
		length = length + 1;
	}
	return length;
}

void printStringLength(u8* str, i64 length) {
}

void main() {
	u8* $.0;
	i64 $.1;
	i64 $.2;
	i64 $.3;
	i64 $.4;
	u8* $.5;
	i64 $.6;
	i64 $.7;
	i64 $.8;
	i64 $.9;
	u8* $.10;
	i64 $.11;
	i64 $.12;
	i64 $.13;
	i64 $.14;
	u8* $.15;
	i64 $.16;
	i64 $.17;
	i64 $.18;
	i64 $.19;
	u8* $.20;
	i64 $.21;
	i64 $.22;
	i64 $.23;
	i64 $.24;
	u8* $.25;
	i64 $.26;
	i64 $.27;
	u8* $.28;
	i64 $.29;
	i64 $.30;
	i64 $.31;
	i64 $.32;
	i64 $.33;

	$.0 = "Bit-&:\n";
	printString($.0);
	$.1 = (i64)(0 & 0);
	printIntLf($.1);
	$.2 = (i64)(0 & 1);
	printIntLf($.2);
	$.3 = (i64)(1 & 0);
	printIntLf($.3);
	$.4 = (i64)(1 & 1);
	printIntLf($.4);
	$.5 = "\nBit-|:\n";
	printString($.5);
	$.6 = (i64)(0 | 0);
	printIntLf($.6);
	$.7 = (i64)(0 | 1);
	printIntLf($.7);
	$.8 = (i64)(1 | 0);
	printIntLf($.8);
	$.9 = (i64)(1 | 1);
	printIntLf($.9);
	$.10 = "\nBit-^:\n";
	printString($.10);
	$.11 = (i64)(0 ^ 0);
	printIntLf($.11);
	$.12 = (i64)(0 ^ 2);
	printIntLf($.12);
	$.13 = (i64)(1 ^ 0);
	printIntLf($.13);
	$.14 = (i64)(1 ^ 2);
	printIntLf($.14);
	$.15 = "\nLogic-&&:\n";
	printString($.15);
	$.16 = (i64)((false) && (false));
	printIntLf($.16);
	$.17 = (i64)((false) && (true));
	printIntLf($.17);
	$.18 = (i64)((true) && (false));
	printIntLf($.18);
	$.19 = (i64)((true) && (true));
	printIntLf($.19);
	$.20 = "\nLogic-||:\n";
	printString($.20);
	$.21 = (i64)((false) || (false));
	printIntLf($.21);
	$.22 = (i64)((false) || (true));
	printIntLf($.22);
	$.23 = (i64)((true) || (false));
	printIntLf($.23);
	$.24 = (i64)((true) || (true));
	printIntLf($.24);
	$.25 = "\nLogic-!:\n";
	printString($.25);
	$.26 = (i64)(!(false));
	printIntLf($.26);
	$.27 = (i64)(!(true));
	printIntLf($.27);
	$.28 = "\nmisc:\n";
	printString($.28);
	$.29 = (i64)((10 & 6) | 1);
	printIntLf($.29);
	$.30 = (i64)((1 == 2) || (2 < 3));
	printIntLf($.30);
	$.31 = (i64)((1 == 2) && (2 < 3));
	printIntLf($.31);
	$.32 = (i64)(-1);
	printIntLf($.32);
	$.33 = (i64)(~1);
	printIntLf($.33);
}
