@printString:
 Local variables
	arg 0: str (u8*/8)
	; 8 pc
	move r5, r1
	; 2:2 while true
	jump @while_1
@if_2_end:
	move r1, r6
	call _, printChar [r1]
@while_1:
	load r6, [r5]
	; 4:3 if chr == 0
	const r0, 0
	equals r0, r6, r0
	branch r0, false, @if_2_end

@printStringLength:
 Local variables
	arg 0: str (u8*/8)
	arg 1: length (u8/1)
	; 9 pc
	move r5, r1
	move r6, r2
	; 13:2 while length > 0
	jump @while_3
@while_3_body:
	load r1, [r5]
	call _, printChar [r1]
	const r0, 1
	sub r6, r6, r0
@while_3:
	const r0, 0
	gt r0, r6, r0
	branch r0, true, @while_3_body

@printUint:
 Local variables
	arg 0: number (i16/2)
	var 1: buffer[] (u8*/20)
	; 22 pc
	const r5, 20
	; 24:2 while true
@while_4:
	const r6, 1
	sub r5, r5, r6
	const r6, 10
	move r0, r1
	mod r0, r0, r6
	cast r6(i64), r0(i16)
	const r0, 10
	div r1, r1, r0
	cast r6(u8), r6(i64)
	const r0, 48
	add r6, r6, r0
	cast r0(i16), r5(u8)
	cast r0(u8*), r0(i16)
	addrof r3, [buffer]
	add r3, r3, r0
	store [r3], r6
	; 30:3 if number == 0
	const r6, 0
	equals r6, r1, r6
	branch r6, false, @while_4
	cast r6(i16), r5(u8)
	cast r6(u8*), r6(i16)
	addrof r1, [buffer]
	add r1, r1, r6
	const r6, 20
	move r2, r6
	sub r2, r2, r5
	call _, printStringLength [r1, r2]

@printIntLf:
 Local variables
	arg 0: number (i16/2)
	; 8 pc
	move r5, r1
	; 38:2 if number < 0
	const r6, 0
	lt r6, r5, r6
	branch r6, false, @if_6_end
	const r1, 45
	call _, printChar [r1]
	neg r5, r5
@if_6_end:
	move r1, r5
	call _, printUint [r1]
	const r1, 10
	call _, printChar [r1]

@main:
 Local variables
	var 0: c (u8/1)
	var 1: d (u8/1)
	; 152 pc
	; begin initialize global variables
	; end initialize global variables
	const r1, [string-0]
	call _, printString [r1]
	const r5, 1
	const r6, 2
	lt r0, r5, r6
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	lt r0, r6, r5
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	const r1, [string-1]
	call _, printString [r1]
	const r0, 0
	const r2, 128
	lt r3, r0, r2
	cast r1(i16), r3(bool)
	move c, r0
	move d, r2
	call _, printIntLf [r1]
	move r0, c
	move r2, d
	lt r3, r2, r0
	cast r1(i16), r3(bool)
	move c, r0
	move d, r2
	call _, printIntLf [r1]
	const r1, [string-2]
	call _, printString [r1]
	lteq r0, r5, r6
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	lteq r0, r6, r5
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	const r1, [string-3]
	call _, printString [r1]
	move r0, c
	move r2, d
	lteq r3, r0, r2
	cast r1(i16), r3(bool)
	move c, r0
	move d, r2
	call _, printIntLf [r1]
	move r0, c
	move r2, d
	lteq r3, r2, r0
	cast r1(i16), r3(bool)
	move c, r0
	move d, r2
	call _, printIntLf [r1]
	const r1, [string-4]
	call _, printString [r1]
	equals r0, r5, r6
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	equals r0, r6, r5
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	const r1, [string-5]
	call _, printString [r1]
	notequals r0, r5, r6
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	notequals r0, r6, r5
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	const r1, [string-6]
	call _, printString [r1]
	gteq r0, r5, r6
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	gteq r0, r6, r5
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	const r1, [string-7]
	call _, printString [r1]
	move r0, c
	move r2, d
	gteq r3, r0, r2
	cast r1(i16), r3(bool)
	move c, r0
	move d, r2
	call _, printIntLf [r1]
	move r0, c
	move r2, d
	gteq r3, r2, r0
	cast r1(i16), r3(bool)
	move c, r0
	move d, r2
	call _, printIntLf [r1]
	const r1, [string-8]
	call _, printString [r1]
	gt r0, r5, r6
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	gt r5, r6, r5
	cast r1(i16), r5(bool)
	call _, printIntLf [r1]
	const r1, [string-9]
	call _, printString [r1]
	move r5, c
	move r6, d
	gt r0, r5, r6
	cast r1(i16), r0(bool)
	call _, printIntLf [r1]
	gt r5, r6, r5
	cast r1(i16), r5(bool)
	call _, printIntLf [r1]

@printChar:
	ld   r0, SPH
	ld   r1, SPL
	add  r1, 3
	adc  r0, 0
	ldc  r1, @rr0
	ld   %15, r1
	jp   %0818

String literals
	string lit 0 "< (signed)\n\0"
	string lit 1 "< (unsigned)\n\0"
	string lit 2 "<= (signed)\n\0"
	string lit 3 "<= (unsigned)\n\0"
	string lit 4 "==\n\0"
	string lit 5 "!=\n\0"
	string lit 6 ">= (signed)\n\0"
	string lit 7 ">= (unsigned)\n\0"
	string lit 8 "> (signed)\n\0"
	string lit 9 "> (unsigned)\n\0"
