; CFG for function printString
; block printString
	; predecessors=[]
		1: str
	; 1 pc
	jump @while_1
		1: str
	; successors=[@while_1]

; block @if_2_end
	; predecessors=[@while_1]
		2: chr, str
	; 4 pc
	call _, printChar [chr]
		1: str
	jump @while_1
		1: str
	; successors=[@while_1]

; block @while_1
	; predecessors=[printString, @if_2_end]
		1: str
	; 19 pc
	load chr, [str]
		2: chr, str
	; 4:3 if chr == 0
	const t.3, 0
		3: chr, str, t.3
	equals t.2, chr, t.3
		3: chr, str, t.2
	branch t.2, false, @if_2_end
		2: chr, str
	jump @if_2_then
		2: chr, str
	; successors=[@if_2_end, @if_2_then]

; block @if_2_then
	; predecessors=[@while_1]
	; 1 pc
	jump @printString_ret
	; successors=[@printString_ret]

; block @printString_ret
	; predecessors=[@if_2_then]
	; successors=[]


; CFG for function printNibble
; block printNibble
	; predecessors=[]
		1: x
	; 22 pc
	const t.1, 15
		2: t.1, x
	and x, x, t.1
		1: x
	; 5:2 if x > 9
	const t.3, 9
		2: t.3, x
	gt t.2, x, t.3
		2: t.2, x
	branch t.2, false, @no_critical_edge_4
		1: x
	jump @if_3_then
		1: x
	; successors=[@no_critical_edge_4, @if_3_then]

; block @no_critical_edge_4
	; predecessors=[printNibble]
		1: x
	; 1 pc
	jump @if_3_end
		1: x
	; successors=[@if_3_end]

; block @if_3_then
	; predecessors=[printNibble]
		1: x
	; 10 pc
	const t.4, 7
		2: t.4, x
	add x, x, t.4
		1: x
	jump @if_3_end
		1: x
	; successors=[@if_3_end]

; block @if_3_end
	; predecessors=[@no_critical_edge_4, @if_3_then]
		1: x
	; 13 pc
	const t.5, 48
		2: t.5, x
	add x, x, t.5
		1: x
	call _, printChar [x]
	jump @printNibble_ret
	; successors=[@printNibble_ret]

; block @printNibble_ret
	; predecessors=[@if_3_end]
	; successors=[]


; CFG for function printHex2
; block printHex2
	; predecessors=[]
		1: x
	; 21 pc
	const t.2, 4
		2: t.2, x
	move t.1, x
		3: t.1, t.2, x
	shiftright t.1, t.1, t.2
		2: t.1, x
	call _, printNibble [t.1]
		1: x
	call _, printNibble [x]
	jump @printHex2_ret
	; successors=[@printHex2_ret]

; block @printHex2_ret
	; predecessors=[printHex2]
	; successors=[]


; CFG for function main
; block main
	; predecessors=[]
	; 9 pc
	; begin initialize global variables
	; end initialize global variables
	const t.2, [string-0]
		1: t.2
	call _, printString [t.2]
	const i, 0
		1: i
	; 19:2 for i < 16
	jump @for_4
		1: i
	; successors=[@for_4]

; block @for_4_body
	; predecessors=[@for_4]
		1: i
	; 27 pc
	; 20:3 if i & 7 == 0
	const t.7, 7
		2: i, t.7
	move t.6, i
		3: i, t.6, t.7
	and t.6, t.6, t.7
		2: i, t.6
	const t.8, 0
		3: i, t.6, t.8
	equals t.5, t.6, t.8
		2: i, t.5
	branch t.5, false, @no_critical_edge_21
		1: i
	jump @if_5_then
		1: i
	; successors=[@no_critical_edge_21, @if_5_then]

; block @no_critical_edge_21
	; predecessors=[@for_4_body]
		1: i
	; 1 pc
	jump @if_5_end
		1: i
	; successors=[@if_5_end]

; block @if_5_then
	; predecessors=[@for_4_body]
		1: i
	; 6 pc
	const t.9, 32
		2: i, t.9
	call _, printChar [t.9]
		1: i
	jump @if_5_end
		1: i
	; successors=[@if_5_end]

; block @if_5_end
	; predecessors=[@no_critical_edge_21, @if_5_then]
		1: i
	; 4 pc
	call _, printNibble [i]
		1: i
	jump @for_4_continue
		1: i
	; successors=[@for_4_continue]

; block @for_4_continue
	; predecessors=[@if_5_end]
		1: i
	; 10 pc
	const t.10, 1
		2: i, t.10
	add i, i, t.10
		1: i
	jump @for_4
		1: i
	; successors=[@for_4]

; block @for_4
	; predecessors=[main, @for_4_continue]
		1: i
	; 13 pc
	const t.4, 16
		2: i, t.4
	lt t.3, i, t.4
		2: i, t.3
	branch t.3, false, @for_4_break
		1: i
	jump @for_4_body
		1: i
	; successors=[@for_4_break, @for_4_body]

; block @for_4_break
	; predecessors=[@for_4]
	; 8 pc
	const t.11, 10
		1: t.11
	call _, printChar [t.11]
	const i, 32
		1: i
	; 27:2 for i < 128
	jump @for_6
		1: i
	; successors=[@for_6]

; block @for_6_body
	; predecessors=[@for_6]
		1: i
	; 27 pc
	; 28:3 if i & 15 == 0
	const t.16, 15
		2: i, t.16
	move t.15, i
		3: i, t.15, t.16
	and t.15, t.15, t.16
		2: i, t.15
	const t.17, 0
		3: i, t.15, t.17
	equals t.14, t.15, t.17
		2: i, t.14
	branch t.14, false, @no_critical_edge_18
		1: i
	jump @if_7_then
		1: i
	; successors=[@no_critical_edge_18, @if_7_then]

; block @no_critical_edge_18
	; predecessors=[@for_6_body]
		1: i
	; 1 pc
	jump @if_7_end
		1: i
	; successors=[@if_7_end]

; block @if_7_then
	; predecessors=[@for_6_body]
		1: i
	; 4 pc
	call _, printHex2 [i]
		1: i
	jump @if_7_end
		1: i
	; successors=[@if_7_end]

; block @if_7_end
	; predecessors=[@no_critical_edge_18, @if_7_then]
		1: i
	; 27 pc
	; 31:3 if i & 7 == 0
	const t.20, 7
		2: i, t.20
	move t.19, i
		3: i, t.19, t.20
	and t.19, t.19, t.20
		2: i, t.19
	const t.21, 0
		3: i, t.19, t.21
	equals t.18, t.19, t.21
		2: i, t.18
	branch t.18, false, @no_critical_edge_19
		1: i
	jump @if_8_then
		1: i
	; successors=[@no_critical_edge_19, @if_8_then]

; block @no_critical_edge_19
	; predecessors=[@if_7_end]
		1: i
	; 1 pc
	jump @if_8_end
		1: i
	; successors=[@if_8_end]

; block @if_8_then
	; predecessors=[@if_7_end]
		1: i
	; 6 pc
	const t.22, 32
		2: i, t.22
	call _, printChar [t.22]
		1: i
	jump @if_8_end
		1: i
	; successors=[@if_8_end]

; block @if_8_end
	; predecessors=[@no_critical_edge_19, @if_8_then]
		1: i
	; 30 pc
	call _, printChar [i]
		1: i
	; 35:3 if i & 15 == 15
	const t.25, 15
		2: i, t.25
	move t.24, i
		3: i, t.24, t.25
	and t.24, t.24, t.25
		2: i, t.24
	const t.26, 15
		3: i, t.24, t.26
	equals t.23, t.24, t.26
		2: i, t.23
	branch t.23, false, @no_critical_edge_20
		1: i
	jump @if_9_then
		1: i
	; successors=[@no_critical_edge_20, @if_9_then]

; block @no_critical_edge_20
	; predecessors=[@if_8_end]
		1: i
	; 1 pc
	jump @if_9_end
		1: i
	; successors=[@if_9_end]

; block @if_9_then
	; predecessors=[@if_8_end]
		1: i
	; 6 pc
	const t.27, 10
		2: i, t.27
	call _, printChar [t.27]
		1: i
	jump @if_9_end
		1: i
	; successors=[@if_9_end]

; block @if_9_end
	; predecessors=[@no_critical_edge_20, @if_9_then]
		1: i
	; 1 pc
	jump @for_6_continue
		1: i
	; successors=[@for_6_continue]

; block @for_6_continue
	; predecessors=[@if_9_end]
		1: i
	; 10 pc
	const t.28, 1
		2: i, t.28
	add i, i, t.28
		1: i
	jump @for_6
		1: i
	; successors=[@for_6]

; block @for_6
	; predecessors=[@for_4_break, @for_6_continue]
		1: i
	; 13 pc
	const t.13, 128
		2: i, t.13
	lt t.12, i, t.13
		2: i, t.12
	branch t.12, false, @for_6_break
		1: i
	jump @for_6_body
		1: i
	; successors=[@for_6_break, @for_6_body]

; block @for_6_break
	; predecessors=[@for_6]
	; 1 pc
	jump @main_ret
	; successors=[@main_ret]

; block @main_ret
	; predecessors=[@for_6_break]
	; successors=[]


