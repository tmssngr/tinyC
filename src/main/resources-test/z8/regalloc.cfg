; CFG for function simple
; block simple
	; predecessors=[]
	; 20 pc
	const four, 4
		1: four
	const three, 3
		2: four, three
	move one, four
		2: one, three
	sub one, one, three
		1: one
	; 5:9 return one
	ret one
	jump @simple_ret
	; successors=[@simple_ret]

; block @simple_ret
	; predecessors=[simple]
	; successors=[]


; CFG for function registerHint
; block registerHint
	; predecessors=[]
		2: a, b
	; 16 pc
	; 9:11 return a + b
	move t.2, a
		2: b, t.2
	add t.2, t.2, b
		1: t.2
	ret t.2
	jump @registerHint_ret
	; successors=[@registerHint_ret]

; block @registerHint_ret
	; predecessors=[registerHint]
	; successors=[]


; CFG for function max
; block max
	; predecessors=[]
		2: a, b
	; 11 pc
	; 13:2 if a < b
	lt t.2, a, b
		3: a, b, t.2
	branch t.2, false, @if_1_end
		2: a, b
	jump @if_1_then
		2: a, b
	; successors=[@if_1_end, @if_1_then]

; block @if_1_end
	; predecessors=[max]
		1: a
	; 4 pc
	; 16:9 return a
	ret a
	jump @max_ret
	; successors=[@max_ret]

; block @if_1_then
	; predecessors=[max]
		1: b
	; 4 pc
	; 14:10 return b
	ret b
	jump @max_ret
	; successors=[@max_ret]

; block @max_ret
	; predecessors=[@if_1_end, @if_1_then]
	; successors=[]


; CFG for function fibonacci
; block fibonacci
	; predecessors=[]
		1: i
	; 5 pc
	const a, 0
		2: a, i
	const b, 1
		3: a, b, i
	; 22:2 while i > 0
	jump @while_2
		3: a, b, i
	; successors=[@while_2]

; block @while_2_body
	; predecessors=[@while_2]
		3: a, b, i
	; 32 pc
	const t.6, 1
		4: a, b, i, t.6
	sub i, i, t.6
		3: a, b, i
	move c, a
		3: b, c, i
	add c, c, b
		3: b, c, i
	move a, b
		3: a, c, i
	move b, c
		3: a, b, i
	jump @while_2
		3: a, b, i
	; successors=[@while_2]

; block @while_2
	; predecessors=[fibonacci, @while_2_body]
		3: a, b, i
	; 13 pc
	const t.5, 0
		4: a, b, i, t.5
	gt t.4, i, t.5
		4: a, b, i, t.4
	branch t.4, false, @while_2_break
		3: a, b, i
	jump @while_2_body
		3: a, b, i
	; successors=[@while_2_break, @while_2_body]

; block @while_2_break
	; predecessors=[@while_2]
		1: a
	; 4 pc
	; 28:9 return a
	ret a
	jump @fibonacci_ret
	; successors=[@fibonacci_ret]

; block @fibonacci_ret
	; predecessors=[@while_2_break]
	; successors=[]


; CFG for function main
; block main
	; predecessors=[]
	; 25 pc
	call one, simple, []
		1: one
	const two, 2
		2: one, two
	call _, registerHint [one, two]
		2: one, two
	call oneOrTwo, max, [one, two]
	const t.4, 5
		1: t.4
	call f5, fibonacci, [t.4]
	jump @main_ret
	; successors=[@main_ret]

; block @main_ret
	; predecessors=[main]
	; successors=[]


