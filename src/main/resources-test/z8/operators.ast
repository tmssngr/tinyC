i32 __random__;

void printString(u8* str) {
	u8 chr;

	while (true) {
		chr = *str;
		if (chr == 0) {
			break;
		}
		printChar(chr);
	}
}

void printStringLength(u8* str, u8 length) {
	u8 chr;

	while (length > 0) {
		chr = *str;
		printChar(chr);
		length = length - 1;
	}
}

void printUint(i16 number) {
	u8* buffer[20];
	u8 pos;
	i64 remainder;
	u8 digit;

	pos = 20;
	while (true) {
		pos = pos - 1;
		remainder = (i64)(number % 10);
		number = number / 10;
		digit = ((u8)remainder) + 48;
		buffer[(i16)pos] = digit;
		if (number == 0) {
			break;
		}
	}
	printStringLength(&buffer[(i16)pos], 20 - pos);
}

void printIntLf(i16 number) {
	if (number < 0) {
		printChar(45);
		number = -number;
	}
	printUint(number);
	printChar(10);
}

void printChar(u8 chr) {
}

void main() {
	i16 a;
	i16 b;
	i16 c;
	i16 d;
	bool t;
	bool f;
	u8 b10;
	u8 b6;
	u8 b1;

	printString("Bit-&:\n");
	a = 0;
	b = 1;
	c = 2;
	d = 3;
	t = true;
	f = false;
	printIntLf(a & a);
	printIntLf(a & b);
	printIntLf(b & a);
	printIntLf(b & b);
	printString("\nBit-|:\n");
	printIntLf(a | a);
	printIntLf(a | b);
	printIntLf(b | a);
	printIntLf(b | b);
	printString("\nBit-^:\n");
	printIntLf(a ^ a);
	printIntLf(a ^ c);
	printIntLf(b ^ a);
	printIntLf(b ^ c);
	printString("\nLogic-&&:\n");
	printIntLf((i16)(f && f));
	printIntLf((i16)(f && t));
	printIntLf((i16)(t && f));
	printIntLf((i16)(t && t));
	printString("\nLogic-||:\n");
	printIntLf((i16)(f || f));
	printIntLf((i16)(f || t));
	printIntLf((i16)(t || f));
	printIntLf((i16)(t || t));
	printString("\nLogic-!:\n");
	printIntLf((i16)(!f));
	printIntLf((i16)(!t));
	printString("\nmisc:\n");
	b10 = 10;
	b6 = 6;
	b1 = 1;
	printIntLf((i16)((b10 & b6) | b1));
	printIntLf((i16)((b == c) || (c < d)));
	printIntLf((i16)((b == c) && (c < d)));
	printIntLf(-1);
	printIntLf(-b);
	printIntLf((i16)(~b1));
}
