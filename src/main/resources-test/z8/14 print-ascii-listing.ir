@printString:
 Local variables
	arg 0: str (u8*/8)
	var 1: chr (u8/1)
	var 2: t.2 (bool/1)
	var 3: t.3 (u8/1)
	; 23 pc
	; 2:2 while true
@while_1:
	load chr, [str]
	; 4:3 if chr == 0
	const t.3, 0
	equals t.2, chr, t.3
	branch t.2, false, @if_2_end
	jump @while_1_break
@if_2_end:
	call _, printChar [chr]
	jump @while_1
@while_1_break:
@printString_ret:

@printNibble:
 Local variables
	arg 0: x (u8/1)
	var 1: t.1 (u8/1)
	var 2: t.2 (bool/1)
	var 3: t.3 (u8/1)
	var 4: t.4 (u8/1)
	var 5: t.5 (u8/1)
	; 42 pc
	const t.1, 15
	and x, x, t.1
	; 5:2 if x > 9
	const t.3, 9
	gt t.2, x, t.3
	branch t.2, false, @if_3_end
	const t.4, 7
	add x, x, t.4
@if_3_end:
	const t.5, 48
	add x, x, t.5
	call _, printChar [x]
@printNibble_ret:

@printHex2:
 Local variables
	arg 0: x (u8/1)
	var 1: t.1 (u8/1)
	var 2: t.2 (u8/1)
	; 20 pc
	const t.2, 4
	move t.1, x
	shiftright t.1, t.1, t.2
	call _, printNibble [t.1]
	call _, printNibble [x]
@printHex2_ret:

@main:
 Local variables
	var 0: i (u8/1)
	var 1: i (u8/1)
	var 2: t.2 (u8*/8)
	var 3: t.3 (bool/1)
	var 4: t.4 (u8/1)
	var 5: t.5 (bool/1)
	var 6: t.6 (u8/1)
	var 7: t.7 (u8/1)
	var 8: t.8 (u8/1)
	var 9: t.9 (u8/1)
	var 10: t.10 (u8/1)
	var 11: t.11 (u8/1)
	var 12: t.12 (bool/1)
	var 13: t.13 (u8/1)
	var 14: t.14 (bool/1)
	var 15: t.15 (u8/1)
	var 16: t.16 (u8/1)
	var 17: t.17 (u8/1)
	var 18: t.18 (bool/1)
	var 19: t.19 (u8/1)
	var 20: t.20 (u8/1)
	var 21: t.21 (u8/1)
	var 22: t.22 (u8/1)
	var 23: t.23 (bool/1)
	var 24: t.24 (u8/1)
	var 25: t.25 (u8/1)
	var 26: t.26 (u8/1)
	var 27: t.27 (u8/1)
	var 28: t.28 (u8/1)
	; 187 pc
	; begin initialize global variables
	; end initialize global variables
	const t.2, [string-0]
	call _, printString [t.2]
	const i, 0
	; 19:2 for i < 16
@for_4:
	const t.4, 16
	lt t.3, i, t.4
	branch t.3, false, @for_4_break
	; 20:3 if i & 7 == 0
	const t.7, 7
	move t.6, i
	and t.6, t.6, t.7
	const t.8, 0
	equals t.5, t.6, t.8
	branch t.5, false, @if_5_end
	const t.9, 32
	call _, printChar [t.9]
@if_5_end:
	call _, printNibble [i]
@for_4_continue:
	const t.10, 1
	add i, i, t.10
	jump @for_4
@for_4_break:
	const t.11, 10
	call _, printChar [t.11]
	const i, 32
	; 27:2 for i < 128
@for_6:
	const t.13, 128
	lt t.12, i, t.13
	branch t.12, false, @for_6_break
	; 28:3 if i & 15 == 0
	const t.16, 15
	move t.15, i
	and t.15, t.15, t.16
	const t.17, 0
	equals t.14, t.15, t.17
	branch t.14, false, @if_7_end
	call _, printHex2 [i]
@if_7_end:
	; 31:3 if i & 7 == 0
	const t.20, 7
	move t.19, i
	and t.19, t.19, t.20
	const t.21, 0
	equals t.18, t.19, t.21
	branch t.18, false, @if_8_end
	const t.22, 32
	call _, printChar [t.22]
@if_8_end:
	call _, printChar [i]
	; 35:3 if i & 15 == 15
	const t.25, 15
	move t.24, i
	and t.24, t.24, t.25
	const t.26, 15
	equals t.23, t.24, t.26
	branch t.23, false, @if_9_end
	const t.27, 10
	call _, printChar [t.27]
@if_9_end:
@for_6_continue:
	const t.28, 1
	add i, i, t.28
	jump @for_6
@for_6_break:
@main_ret:

@printChar:
	ld   r0, SPH
	ld   r1, SPL
	add  r1, 3
	adc  r0, 0
	ldc  r1, @rr0
	ld   %15, r1
	jp   %0818

String literals
	string lit 0 " x\0"
