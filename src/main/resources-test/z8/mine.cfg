; CFG for function printString
; block printString
	; predecessors=[]
		1: str
	; 1 pc
	jump @while_1
		1: str
	; successors=[@while_1]

; block @while_1
	; predecessors=[printString, @if_2_end]
		1: str
	; 19 pc
	load chr, [str]
		2: chr, str
	; 4:3 if chr == 0
	const t.3, 0
		3: chr, str, t.3
	equals t.2, chr, t.3
		3: chr, str, t.2
	branch t.2, false, @if_2_end
		2: chr, str
	jump @if_2_then
		2: chr, str
	; successors=[@if_2_end, @if_2_then]

; block @if_2_then
	; predecessors=[@while_1]
	; 1 pc
	jump @printString_ret
	; successors=[@printString_ret]

; block @if_2_end
	; predecessors=[@while_1]
		2: chr, str
	; 4 pc
	call _, printChar [chr]
		1: str
	jump @while_1
		1: str
	; successors=[@while_1]

; block @printString_ret
	; predecessors=[@if_2_then]
	; successors=[]


; CFG for function printStringLength
; block printStringLength
	; predecessors=[]
		2: length, str
	; 1 pc
	jump @while_3
		2: length, str
	; successors=[@while_3]

; block @while_3
	; predecessors=[printStringLength, @while_3_body]
		2: length, str
	; 13 pc
	const t.4, 0
		3: length, str, t.4
	gt t.3, length, t.4
		3: length, str, t.3
	branch t.3, false, @while_3_break
		2: length, str
	jump @while_3_body
		2: length, str
	; successors=[@while_3_break, @while_3_body]

; block @while_3_body
	; predecessors=[@while_3]
		2: length, str
	; 19 pc
	load chr, [str]
		3: chr, length, str
	call _, printChar [chr]
		2: length, str
	const t.5, 1
		3: length, str, t.5
	sub length, length, t.5
		2: length, str
	jump @while_3
		2: length, str
	; successors=[@while_3]

; block @while_3_break
	; predecessors=[@while_3]
	; 1 pc
	jump @printStringLength_ret
	; successors=[@printStringLength_ret]

; block @printStringLength_ret
	; predecessors=[@while_3_break]
	; successors=[]


; CFG for function printUint
; block printUint
	; predecessors=[]
		1: number
	; 3 pc
	const pos, 20
		2: number, pos
	; 24:2 while true
	jump @while_4
		2: number, pos
	; successors=[@while_4]

; block @while_4
	; predecessors=[printUint, @if_5_end]
		2: number, pos
	; 95 pc
	const t.5, 1
		3: number, pos, t.5
	sub pos, pos, t.5
		2: number, pos
	const t.7, 10
		3: number, pos, t.7
	move t.6, number
		4: number, pos, t.6, t.7
	mod t.6, t.6, t.7
		3: number, pos, t.6
	cast remainder(i64), t.6(i16)
		3: number, pos, remainder
	const t.8, 10
		4: number, pos, remainder, t.8
	div number, number, t.8
		3: number, pos, remainder
	cast t.9(u8), remainder(i64)
		3: number, pos, t.9
	const t.10, 48
		4: number, pos, t.10, t.9
	move digit, t.9
		4: digit, number, pos, t.10
	add digit, digit, t.10
		3: digit, number, pos
	cast t.12(i16), pos(u8)
		4: digit, number, pos, t.12
	cast t.13(u8*), t.12(i16)
		4: digit, number, pos, t.13
	addrof t.11, [buffer]
		5: digit, number, pos, t.11, t.13
	add t.11, t.11, t.13
		4: digit, number, pos, t.11
	store [t.11], digit
		2: number, pos
	; 30:3 if number == 0
	const t.15, 0
		3: number, pos, t.15
	equals t.14, number, t.15
		3: number, pos, t.14
	branch t.14, false, @if_5_end
		2: number, pos
	jump @if_5_then
		2: number, pos
	; successors=[@if_5_end, @if_5_then]

; block @if_5_then
	; predecessors=[@while_4]
		1: pos
	; 40 pc
	cast t.17(i16), pos(u8)
		2: pos, t.17
	cast t.18(u8*), t.17(i16)
		2: pos, t.18
	addrof t.16, [buffer]
		3: pos, t.16, t.18
	add t.16, t.16, t.18
		2: pos, t.16
	const t.20, 20
		3: pos, t.16, t.20
	move t.19, t.20
		3: pos, t.16, t.19
	sub t.19, t.19, pos
		2: t.16, t.19
	call _, printStringLength [t.16, t.19]
	jump @printUint_ret
	; successors=[@printUint_ret]

; block @if_5_end
	; predecessors=[@while_4]
		2: number, pos
	; 1 pc
	jump @while_4
		2: number, pos
	; successors=[@while_4]

; block @printUint_ret
	; predecessors=[@if_5_then]
	; successors=[]


; CFG for function getChar
; block getChar
	; predecessors=[]
	; 6 pc
	; 57:9 return 0
	const t.0, 0
		1: t.0
	ret t.0
	jump @getChar_ret
	; successors=[@getChar_ret]

; block @getChar_ret
	; predecessors=[getChar]
	; successors=[]


; CFG for function setCursor
; block setCursor
	; predecessors=[]
	; 1 pc
	jump @setCursor_ret
	; successors=[@setCursor_ret]

; block @setCursor_ret
	; predecessors=[setCursor]
	; successors=[]


; CFG for function initRandom
; block initRandom
	; predecessors=[]
	; 1 pc
	jump @initRandom_ret
	; successors=[@initRandom_ret]

; block @initRandom_ret
	; predecessors=[initRandom]
	; successors=[]


; CFG for function random
; block random
	; predecessors=[]
	; 6 pc
	; 70:9 return 0
	const t.0, 0
		1: t.0
	ret t.0
	jump @random_ret
	; successors=[@random_ret]

; block @random_ret
	; predecessors=[random]
	; successors=[]


; CFG for function rowColumnToCell
; block rowColumnToCell
	; predecessors=[]
		2: column, row
	; 30 pc
	; 15:21 return row * 40 + column
	const t.4, 40
		3: column, row, t.4
	move t.3, row
		3: column, t.3, t.4
	mul t.3, t.3, t.4
		2: column, t.3
	move t.2, t.3
		2: column, t.2
	add t.2, t.2, column
		1: t.2
	ret t.2
	jump @rowColumnToCell_ret
	; successors=[@rowColumnToCell_ret]

; block @rowColumnToCell_ret
	; predecessors=[rowColumnToCell]
	; successors=[]


; CFG for function getCell
; block getCell
	; predecessors=[]
		2: column, row
	; 32 pc
	; 19:15 return [...]
	call t.4, rowColumnToCell, [row, column]
		1: t.4
	cast t.5(u8*), t.4(i16)
		1: t.5
	addrof t.3, [field]
		2: t.3, t.5
	add t.3, t.3, t.5
		1: t.3
	load t.2, [t.3]
		1: t.2
	ret t.2
	jump @getCell_ret
	; successors=[@getCell_ret]

; block @getCell_ret
	; predecessors=[getCell]
	; successors=[]


; CFG for function isBomb
; block isBomb
	; predecessors=[]
		1: cell
	; 27 pc
	; 23:27 return cell & 1 != 0
	const t.3, 1
		2: cell, t.3
	move t.2, cell
		2: t.2, t.3
	and t.2, t.2, t.3
		1: t.2
	const t.4, 0
		2: t.2, t.4
	notequals t.1, t.2, t.4
		1: t.1
	ret t.1
	jump @isBomb_ret
	; successors=[@isBomb_ret]

; block @isBomb_ret
	; predecessors=[isBomb]
	; successors=[]


; CFG for function isOpen
; block isOpen
	; predecessors=[]
		1: cell
	; 27 pc
	; 27:27 return cell & 2 != 0
	const t.3, 2
		2: cell, t.3
	move t.2, cell
		2: t.2, t.3
	and t.2, t.2, t.3
		1: t.2
	const t.4, 0
		2: t.2, t.4
	notequals t.1, t.2, t.4
		1: t.1
	ret t.1
	jump @isOpen_ret
	; successors=[@isOpen_ret]

; block @isOpen_ret
	; predecessors=[isOpen]
	; successors=[]


; CFG for function isFlag
; block isFlag
	; predecessors=[]
		1: cell
	; 27 pc
	; 31:27 return cell & 4 != 0
	const t.3, 4
		2: cell, t.3
	move t.2, cell
		2: t.2, t.3
	and t.2, t.2, t.3
		1: t.2
	const t.4, 0
		2: t.2, t.4
	notequals t.1, t.2, t.4
		1: t.1
	ret t.1
	jump @isFlag_ret
	; successors=[@isFlag_ret]

; block @isFlag_ret
	; predecessors=[isFlag]
	; successors=[]


; CFG for function checkCellBounds
; block checkCellBounds
	; predecessors=[]
		2: column, row
	; 13 pc
	; 36:21 return row >= 0 && row < 20 && column >= 0 && column < 40
	; 36:21 logic and
	; 36:6 logic and
	; 35:21 logic and
	const t.3, 0
		3: column, row, t.3
	gteq t.2, row, t.3
		3: column, row, t.2
	branch t.2, false, @no_critical_edge_8
		3: column, row, t.2
	jump @and_2nd_8
		3: column, row, t.2
	; successors=[@no_critical_edge_8, @and_2nd_8]

; block @and_2nd_8
	; predecessors=[checkCellBounds]
		2: column, row
	; 10 pc
	const t.4, 20
		3: column, row, t.4
	lt t.2, row, t.4
		2: column, t.2
	jump @and_next_8
		2: column, t.2
	; successors=[@and_next_8]

; block @no_critical_edge_8
	; predecessors=[checkCellBounds]
		2: column, t.2
	; 1 pc
	jump @and_next_8
		2: column, t.2
	; successors=[@and_next_8]

; block @and_next_8
	; predecessors=[@no_critical_edge_8, @and_2nd_8]
		2: column, t.2
	; 4 pc
	branch t.2, false, @no_critical_edge_9
		2: column, t.2
	jump @and_2nd_7
		2: column, t.2
	; successors=[@no_critical_edge_9, @and_2nd_7]

; block @and_2nd_7
	; predecessors=[@and_next_8]
		1: column
	; 10 pc
	const t.5, 0
		2: column, t.5
	gteq t.2, column, t.5
		2: column, t.2
	jump @and_next_7
		2: column, t.2
	; successors=[@and_next_7]

; block @no_critical_edge_9
	; predecessors=[@and_next_8]
		2: column, t.2
	; 1 pc
	jump @and_next_7
		2: column, t.2
	; successors=[@and_next_7]

; block @and_next_7
	; predecessors=[@no_critical_edge_9, @and_2nd_7]
		2: column, t.2
	; 4 pc
	branch t.2, false, @no_critical_edge_10
		2: column, t.2
	jump @and_2nd_6
		2: column, t.2
	; successors=[@no_critical_edge_10, @and_2nd_6]

; block @and_2nd_6
	; predecessors=[@and_next_7]
		1: column
	; 10 pc
	const t.6, 40
		2: column, t.6
	lt t.2, column, t.6
		1: t.2
	jump @and_next_6
		1: t.2
	; successors=[@and_next_6]

; block @no_critical_edge_10
	; predecessors=[@and_next_7]
		1: t.2
	; 1 pc
	jump @and_next_6
		1: t.2
	; successors=[@and_next_6]

; block @and_next_6
	; predecessors=[@no_critical_edge_10, @and_2nd_6]
		1: t.2
	; 4 pc
	ret t.2
	jump @checkCellBounds_ret
	; successors=[@checkCellBounds_ret]

; block @checkCellBounds_ret
	; predecessors=[@and_next_6]
	; successors=[]


; CFG for function setCell
; block setCell
	; predecessors=[]
		3: cell, column, row
	; 29 pc
	call t.4, rowColumnToCell, [row, column]
		2: cell, t.4
	cast t.5(u8*), t.4(i16)
		2: cell, t.5
	addrof t.3, [field]
		3: cell, t.3, t.5
	add t.3, t.3, t.5
		2: cell, t.3
	store [t.3], cell
	jump @setCell_ret
	; successors=[@setCell_ret]

; block @setCell_ret
	; predecessors=[setCell]
	; successors=[]


; CFG for function getBombCountAround
; block getBombCountAround
	; predecessors=[]
		2: column, row
	; 5 pc
	const count, 0
		3: column, count, row
	const dr, -1
		4: column, count, dr, row
	; 45:2 for dr <= 1
	jump @for_9
		4: column, count, dr, row
	; successors=[@for_9]

; block @for_9
	; predecessors=[getBombCountAround, @for_10_break]
		4: column, count, dr, row
	; 13 pc
	const t.9, 1
		5: column, count, dr, row, t.9
	lteq t.8, dr, t.9
		5: column, count, dr, row, t.8
	branch t.8, false, @for_9_break
		4: column, count, dr, row
	jump @for_9_body
		4: column, count, dr, row
	; successors=[@for_9_break, @for_9_body]

; block @for_9_body
	; predecessors=[@for_9]
		4: column, count, dr, row
	; 15 pc
	move r, row
		5: column, count, dr, r, row
	add r, r, dr
		5: column, count, dr, r, row
	const dc, -1
		6: column, count, dc, dr, r, row
	; 47:3 for dc <= 1
	jump @for_10
		6: column, count, dc, dr, r, row
	; successors=[@for_10]

; block @for_10
	; predecessors=[@for_9_body, @for_10_continue]
		6: column, count, dc, dr, r, row
	; 13 pc
	const t.11, 1
		7: column, count, dc, dr, r, row, t.11
	lteq t.10, dc, t.11
		7: column, count, dc, dr, r, row, t.10
	branch t.10, false, @for_10_break
		6: column, count, dc, dr, r, row
	jump @for_10_body
		6: column, count, dc, dr, r, row
	; successors=[@for_10_break, @for_10_body]

; block @for_10_body
	; predecessors=[@for_10]
		6: column, count, dc, dr, r, row
	; 23 pc
	move c, column
		7: c, column, count, dc, dr, r, row
	add c, c, dc
		7: c, column, count, dc, dr, r, row
	; 49:4 if checkCellBounds([ExprVarAccess[varName=r, index=4, scope=function, type=i16, varIsArray=false, location=49:24], ExprVarAccess[varName=c, index=6, scope=function, type=i16, varIsArray=false, location=49:27]])
	call t.12, checkCellBounds, [r, c]
		8: c, column, count, dc, dr, r, row, t.12
	branch t.12, false, @no_critical_edge_14
		7: c, column, count, dc, dr, r, row
	jump @if_11_then
		7: c, column, count, dc, dr, r, row
	; successors=[@no_critical_edge_14, @if_11_then]

; block @if_11_then
	; predecessors=[@for_10_body]
		7: c, column, count, dc, dr, r, row
	; 16 pc
	call cell, getCell, [r, c]
		7: cell, column, count, dc, dr, r, row
	; 51:5 if isBomb([ExprVarAccess[varName=cell, index=7, scope=function, type=u8, varIsArray=false, location=51:16]])
	call t.13, isBomb, [cell]
		7: column, count, dc, dr, r, row, t.13
	branch t.13, false, @no_critical_edge_15
		6: column, count, dc, dr, r, row
	jump @if_12_then
		6: column, count, dc, dr, r, row
	; successors=[@no_critical_edge_15, @if_12_then]

; block @if_12_then
	; predecessors=[@if_11_then]
		6: column, count, dc, dr, r, row
	; 10 pc
	const t.14, 1
		7: column, count, dc, dr, r, row, t.14
	add count, count, t.14
		6: column, count, dc, dr, r, row
	jump @if_12_end
		6: column, count, dc, dr, r, row
	; successors=[@if_12_end]

; block @no_critical_edge_15
	; predecessors=[@if_11_then]
		6: column, count, dc, dr, r, row
	; 1 pc
	jump @if_12_end
		6: column, count, dc, dr, r, row
	; successors=[@if_12_end]

; block @if_12_end
	; predecessors=[@no_critical_edge_15, @if_12_then]
		6: column, count, dc, dr, r, row
	; 1 pc
	jump @if_11_end
		6: column, count, dc, dr, r, row
	; successors=[@if_11_end]

; block @no_critical_edge_14
	; predecessors=[@for_10_body]
		6: column, count, dc, dr, r, row
	; 1 pc
	jump @if_11_end
		6: column, count, dc, dr, r, row
	; successors=[@if_11_end]

; block @if_11_end
	; predecessors=[@no_critical_edge_14, @if_12_end]
		6: column, count, dc, dr, r, row
	; 1 pc
	jump @for_10_continue
		6: column, count, dc, dr, r, row
	; successors=[@for_10_continue]

; block @for_10_continue
	; predecessors=[@if_11_end]
		6: column, count, dc, dr, r, row
	; 10 pc
	const t.15, 1
		7: column, count, dc, dr, r, row, t.15
	add dc, dc, t.15
		6: column, count, dc, dr, r, row
	jump @for_10
		6: column, count, dc, dr, r, row
	; successors=[@for_10]

; block @for_10_break
	; predecessors=[@for_10]
		4: column, count, dr, row
	; 10 pc
	const t.16, 1
		5: column, count, dr, row, t.16
	add dr, dr, t.16
		4: column, count, dr, row
	jump @for_9
		4: column, count, dr, row
	; successors=[@for_9]

; block @for_9_break
	; predecessors=[@for_9]
		1: count
	; 4 pc
	; 57:9 return count
	ret count
	jump @getBombCountAround_ret
	; successors=[@getBombCountAround_ret]

; block @getBombCountAround_ret
	; predecessors=[@for_9_break]
	; successors=[]


; CFG for function getSpacer
; block getSpacer
	; predecessors=[]
		4: column, columnCursor, row, rowCursor
	; 11 pc
	; 61:2 if rowCursor == row
	equals t.4, rowCursor, row
		3: column, columnCursor, t.4
	branch t.4, false, @no_critical_edge_8
		2: column, columnCursor
	jump @if_13_then
		2: column, columnCursor
	; successors=[@no_critical_edge_8, @if_13_then]

; block @if_13_then
	; predecessors=[getSpacer]
		2: column, columnCursor
	; 11 pc
	; 62:3 if columnCursor == column
	equals t.5, columnCursor, column
		3: column, columnCursor, t.5
	branch t.5, false, @if_14_end
		2: column, columnCursor
	jump @if_14_then
		2: column, columnCursor
	; successors=[@if_14_end, @if_14_then]

; block @if_14_then
	; predecessors=[@if_13_then]
	; 6 pc
	; 63:11 return 91
	const t.6, 91
		1: t.6
	ret t.6
	jump @getSpacer_ret
	; successors=[@getSpacer_ret]

; block @if_14_end
	; predecessors=[@if_13_then]
		2: column, columnCursor
	; 25 pc
	; 65:3 if columnCursor == column - 1
	const t.9, 1
		3: column, columnCursor, t.9
	move t.8, column
		3: columnCursor, t.8, t.9
	sub t.8, t.8, t.9
		2: columnCursor, t.8
	equals t.7, columnCursor, t.8
		1: t.7
	branch t.7, false, @if_15_end
	jump @if_15_then
	; successors=[@if_15_end, @if_15_then]

; block @if_15_then
	; predecessors=[@if_14_end]
	; 6 pc
	; 66:11 return 93
	const t.10, 93
		1: t.10
	ret t.10
	jump @getSpacer_ret
	; successors=[@getSpacer_ret]

; block @if_15_end
	; predecessors=[@if_14_end]
	; 1 pc
	jump @if_13_end
	; successors=[@if_13_end]

; block @no_critical_edge_8
	; predecessors=[getSpacer]
	; 1 pc
	jump @if_13_end
	; successors=[@if_13_end]

; block @if_13_end
	; predecessors=[@no_critical_edge_8, @if_15_end]
	; 6 pc
	; 69:9 return 32
	const t.11, 32
		1: t.11
	ret t.11
	jump @getSpacer_ret
	; successors=[@getSpacer_ret]

; block @getSpacer_ret
	; predecessors=[@if_13_end, @if_15_then, @if_14_then]
	; successors=[]


; CFG for function printCell
; block printCell
	; predecessors=[]
		3: cell, column, row
	; 11 pc
	const chr, 46
		4: cell, chr, column, row
	; 74:2 if isOpen([ExprVarAccess[varName=cell, index=0, scope=argument, type=u8, varIsArray=false, location=74:13]])
	call t.5, isOpen, [cell]
		5: cell, chr, column, row, t.5
	branch t.5, false, @if_16_else
		4: cell, chr, column, row
	jump @if_16_then
		4: cell, chr, column, row
	; successors=[@if_16_else, @if_16_then]

; block @if_16_then
	; predecessors=[printCell]
		3: cell, column, row
	; 9 pc
	; 75:3 if isBomb([ExprVarAccess[varName=cell, index=0, scope=argument, type=u8, varIsArray=false, location=75:14]])
	call t.6, isBomb, [cell]
		3: column, row, t.6
	branch t.6, false, @if_17_else
		2: column, row
	jump @if_17_then
		2: column, row
	; successors=[@if_17_else, @if_17_then]

; block @if_17_then
	; predecessors=[@if_16_then]
	; 3 pc
	const chr, 42
		1: chr
	jump @if_17_end
		1: chr
	; successors=[@if_17_end]

; block @if_17_else
	; predecessors=[@if_16_then]
		2: column, row
	; 20 pc
	call count, getBombCountAround, [row, column]
		1: count
	; 80:4 if count > 0
	const t.8, 0
		2: count, t.8
	gt t.7, count, t.8
		2: count, t.7
	branch t.7, false, @if_18_else
		1: count
	jump @if_18_then
		1: count
	; successors=[@if_18_else, @if_18_then]

; block @if_18_then
	; predecessors=[@if_17_else]
		1: count
	; 15 pc
	const t.9, 48
		2: count, t.9
	move chr, count
		2: chr, t.9
	add chr, chr, t.9
		1: chr
	jump @if_18_end
		1: chr
	; successors=[@if_18_end]

; block @if_18_else
	; predecessors=[@if_17_else]
	; 3 pc
	const chr, 32
		1: chr
	jump @if_18_end
		1: chr
	; successors=[@if_18_end]

; block @if_18_end
	; predecessors=[@if_18_else, @if_18_then]
		1: chr
	; 1 pc
	jump @if_17_end
		1: chr
	; successors=[@if_17_end]

; block @if_17_end
	; predecessors=[@if_18_end, @if_17_then]
		1: chr
	; 1 pc
	jump @if_16_end
		1: chr
	; successors=[@if_16_end]

; block @if_16_else
	; predecessors=[printCell]
		2: cell, chr
	; 9 pc
	; 88:7 if isFlag([ExprVarAccess[varName=cell, index=0, scope=argument, type=u8, varIsArray=false, location=88:18]])
	call t.10, isFlag, [cell]
		2: chr, t.10
	branch t.10, false, @no_critical_edge_13
		1: chr
	jump @if_19_then
		1: chr
	; successors=[@no_critical_edge_13, @if_19_then]

; block @if_19_then
	; predecessors=[@if_16_else]
	; 3 pc
	const chr, 35
		1: chr
	jump @if_19_end
		1: chr
	; successors=[@if_19_end]

; block @no_critical_edge_13
	; predecessors=[@if_16_else]
		1: chr
	; 1 pc
	jump @if_19_end
		1: chr
	; successors=[@if_19_end]

; block @if_19_end
	; predecessors=[@no_critical_edge_13, @if_19_then]
		1: chr
	; 1 pc
	jump @if_16_end
		1: chr
	; successors=[@if_16_end]

; block @if_16_end
	; predecessors=[@if_19_end, @if_17_end]
		1: chr
	; 4 pc
	call _, printChar [chr]
	jump @printCell_ret
	; successors=[@printCell_ret]

; block @printCell_ret
	; predecessors=[@if_16_end]
	; successors=[]


; CFG for function printField
; block printField
	; predecessors=[]
		2: columnCursor, rowCursor
	; 12 pc
	const t.7, 0
		3: columnCursor, rowCursor, t.7
	const t.8, 0
		4: columnCursor, rowCursor, t.7, t.8
	call _, setCursor [t.7, t.8]
		2: columnCursor, rowCursor
	const row, 0
		3: columnCursor, row, rowCursor
	; 96:2 for row < 20
	jump @for_20
		3: columnCursor, row, rowCursor
	; successors=[@for_20]

; block @for_20
	; predecessors=[printField, @for_21_break]
		3: columnCursor, row, rowCursor
	; 13 pc
	const t.10, 20
		4: columnCursor, row, rowCursor, t.10
	lt t.9, row, t.10
		4: columnCursor, row, rowCursor, t.9
	branch t.9, false, @for_20_break
		3: columnCursor, row, rowCursor
	jump @for_20_body
		3: columnCursor, row, rowCursor
	; successors=[@for_20_break, @for_20_body]

; block @for_20_body
	; predecessors=[@for_20]
		3: columnCursor, row, rowCursor
	; 8 pc
	const t.11, 124
		4: columnCursor, row, rowCursor, t.11
	call _, printChar [t.11]
		3: columnCursor, row, rowCursor
	const column, 0
		4: column, columnCursor, row, rowCursor
	; 98:3 for column < 40
	jump @for_21
		4: column, columnCursor, row, rowCursor
	; successors=[@for_21]

; block @for_21
	; predecessors=[@for_20_body, @for_21_body]
		4: column, columnCursor, row, rowCursor
	; 13 pc
	const t.13, 40
		5: column, columnCursor, row, rowCursor, t.13
	lt t.12, column, t.13
		5: column, columnCursor, row, rowCursor, t.12
	branch t.12, false, @for_21_break
		4: column, columnCursor, row, rowCursor
	jump @for_21_body
		4: column, columnCursor, row, rowCursor
	; successors=[@for_21_break, @for_21_body]

; block @for_21_body
	; predecessors=[@for_21]
		4: column, columnCursor, row, rowCursor
	; 38 pc
	call spacer, getSpacer, [row, column, rowCursor, columnCursor]
		5: column, columnCursor, row, rowCursor, spacer
	call _, printChar [spacer]
		4: column, columnCursor, row, rowCursor
	call cell, getCell, [row, column]
		5: cell, column, columnCursor, row, rowCursor
	call _, printCell [cell, row, column]
		4: column, columnCursor, row, rowCursor
	const t.14, 1
		5: column, columnCursor, row, rowCursor, t.14
	add column, column, t.14
		4: column, columnCursor, row, rowCursor
	jump @for_21
		4: column, columnCursor, row, rowCursor
	; successors=[@for_21]

; block @for_21_break
	; predecessors=[@for_21]
		3: columnCursor, row, rowCursor
	; 32 pc
	const t.15, 40
		4: columnCursor, row, rowCursor, t.15
	call spacer, getSpacer, [row, t.15, rowCursor, columnCursor]
		4: columnCursor, row, rowCursor, spacer
	call _, printChar [spacer]
		3: columnCursor, row, rowCursor
	const t.16, [string-0]
		4: columnCursor, row, rowCursor, t.16
	call _, printString [t.16]
		3: columnCursor, row, rowCursor
	const t.17, 1
		4: columnCursor, row, rowCursor, t.17
	add row, row, t.17
		3: columnCursor, row, rowCursor
	jump @for_20
		3: columnCursor, row, rowCursor
	; successors=[@for_20]

; block @for_20_break
	; predecessors=[@for_20]
	; 1 pc
	jump @printField_ret
	; successors=[@printField_ret]

; block @printField_ret
	; predecessors=[@for_20_break]
	; successors=[]


; CFG for function printSpaces
; block printSpaces
	; predecessors=[]
		1: i
	; 1 pc
	jump @for_22
		1: i
	; successors=[@for_22]

; block @for_22
	; predecessors=[printSpaces, @for_22_body]
		1: i
	; 13 pc
	const t.2, 0
		2: i, t.2
	gt t.1, i, t.2
		2: i, t.1
	branch t.1, false, @for_22_break
		1: i
	jump @for_22_body
		1: i
	; successors=[@for_22_break, @for_22_body]

; block @for_22_body
	; predecessors=[@for_22]
		1: i
	; 15 pc
	const t.3, 48
		2: i, t.3
	call _, printChar [t.3]
		1: i
	const t.4, 1
		2: i, t.4
	sub i, i, t.4
		1: i
	jump @for_22
		1: i
	; successors=[@for_22]

; block @for_22_break
	; predecessors=[@for_22]
	; 1 pc
	jump @printSpaces_ret
	; successors=[@printSpaces_ret]

; block @printSpaces_ret
	; predecessors=[@for_22_break]
	; successors=[]


; CFG for function getDigitCount
; block getDigitCount
	; predecessors=[]
		1: value
	; 15 pc
	const count, 0
		2: count, value
	; 118:2 if value < 0
	const t.3, 0
		3: count, t.3, value
	lt t.2, value, t.3
		3: count, t.2, value
	branch t.2, false, @no_critical_edge_8
		2: count, value
	jump @if_23_then
		2: count, value
	; successors=[@no_critical_edge_8, @if_23_then]

; block @if_23_then
	; predecessors=[getDigitCount]
		1: value
	; 8 pc
	const count, 1
		2: count, value
	neg value, value
		2: count, value
	jump @if_23_end
		2: count, value
	; successors=[@if_23_end]

; block @no_critical_edge_8
	; predecessors=[getDigitCount]
		2: count, value
	; 1 pc
	jump @if_23_end
		2: count, value
	; successors=[@if_23_end]

; block @if_23_end
	; predecessors=[@no_critical_edge_8, @if_23_then]
		2: count, value
	; 1 pc
	jump @while_24
		2: count, value
	; successors=[@while_24]

; block @while_24
	; predecessors=[@if_23_end, @if_25_end]
		2: count, value
	; 31 pc
	const t.4, 1
		3: count, t.4, value
	add count, count, t.4
		2: count, value
	const t.5, 10
		3: count, t.5, value
	div value, value, t.5
		2: count, value
	; 126:3 if value == 0
	const t.7, 0
		3: count, t.7, value
	equals t.6, value, t.7
		3: count, t.6, value
	branch t.6, false, @if_25_end
		2: count, value
	jump @if_25_then
		2: count, value
	; successors=[@if_25_end, @if_25_then]

; block @if_25_then
	; predecessors=[@while_24]
		1: count
	; 4 pc
	; 131:9 return count
	ret count
	jump @getDigitCount_ret
	; successors=[@getDigitCount_ret]

; block @if_25_end
	; predecessors=[@while_24]
		2: count, value
	; 1 pc
	jump @while_24
		2: count, value
	; successors=[@while_24]

; block @getDigitCount_ret
	; predecessors=[@if_25_then]
	; successors=[]


; CFG for function getHiddenCount
; block getHiddenCount
	; predecessors=[]
	; 5 pc
	const count, 0
		1: count
	const r, 0
		2: count, r
	; 136:2 for r < 20
	jump @for_26
		2: count, r
	; successors=[@for_26]

; block @for_26
	; predecessors=[getHiddenCount, @for_27_break]
		2: count, r
	; 13 pc
	const t.5, 20
		3: count, r, t.5
	lt t.4, r, t.5
		3: count, r, t.4
	branch t.4, false, @for_26_break
		2: count, r
	jump @for_26_body
		2: count, r
	; successors=[@for_26_break, @for_26_body]

; block @for_26_body
	; predecessors=[@for_26]
		2: count, r
	; 3 pc
	const c, 0
		3: c, count, r
	; 137:3 for c < 40
	jump @for_27
		3: c, count, r
	; successors=[@for_27]

; block @for_27
	; predecessors=[@for_26_body, @for_27_continue]
		3: c, count, r
	; 13 pc
	const t.7, 40
		4: c, count, r, t.7
	lt t.6, c, t.7
		4: c, count, r, t.6
	branch t.6, false, @for_27_break
		3: c, count, r
	jump @for_27_body
		3: c, count, r
	; successors=[@for_27_break, @for_27_body]

; block @for_27_body
	; predecessors=[@for_27]
		3: c, count, r
	; 34 pc
	call cell, getCell, [r, c]
		4: c, cell, count, r
	; 139:4 if cell & 6 == 0
	const t.10, 6
		5: c, cell, count, r, t.10
	move t.9, cell
		5: c, count, r, t.10, t.9
	and t.9, t.9, t.10
		4: c, count, r, t.9
	const t.11, 0
		5: c, count, r, t.11, t.9
	equals t.8, t.9, t.11
		4: c, count, r, t.8
	branch t.8, false, @no_critical_edge_12
		3: c, count, r
	jump @if_28_then
		3: c, count, r
	; successors=[@no_critical_edge_12, @if_28_then]

; block @if_28_then
	; predecessors=[@for_27_body]
		3: c, count, r
	; 10 pc
	const t.12, 1
		4: c, count, r, t.12
	add count, count, t.12
		3: c, count, r
	jump @if_28_end
		3: c, count, r
	; successors=[@if_28_end]

; block @no_critical_edge_12
	; predecessors=[@for_27_body]
		3: c, count, r
	; 1 pc
	jump @if_28_end
		3: c, count, r
	; successors=[@if_28_end]

; block @if_28_end
	; predecessors=[@no_critical_edge_12, @if_28_then]
		3: c, count, r
	; 1 pc
	jump @for_27_continue
		3: c, count, r
	; successors=[@for_27_continue]

; block @for_27_continue
	; predecessors=[@if_28_end]
		3: c, count, r
	; 10 pc
	const t.13, 1
		4: c, count, r, t.13
	add c, c, t.13
		3: c, count, r
	jump @for_27
		3: c, count, r
	; successors=[@for_27]

; block @for_27_break
	; predecessors=[@for_27]
		2: count, r
	; 10 pc
	const t.14, 1
		3: count, r, t.14
	add r, r, t.14
		2: count, r
	jump @for_26
		2: count, r
	; successors=[@for_26]

; block @for_26_break
	; predecessors=[@for_26]
		1: count
	; 4 pc
	; 144:9 return count
	ret count
	jump @getHiddenCount_ret
	; successors=[@getHiddenCount_ret]

; block @getHiddenCount_ret
	; predecessors=[@for_26_break]
	; successors=[]


; CFG for function printLeft
; block printLeft
	; predecessors=[]
	; 62 pc
	call count, getHiddenCount, []
		1: count
	call t.3, getDigitCount, [count]
		2: count, t.3
	cast leftDigits(i16), t.3(u8)
		2: count, leftDigits
	const t.5, 40
		3: count, leftDigits, t.5
	call t.4, getDigitCount, [t.5]
		3: count, leftDigits, t.4
	cast bombDigits(i16), t.4(u8)
		3: bombDigits, count, leftDigits
	const t.6, [string-1]
		4: bombDigits, count, leftDigits, t.6
	call _, printString [t.6]
		3: bombDigits, count, leftDigits
	move t.7, bombDigits
		3: count, leftDigits, t.7
	sub t.7, t.7, leftDigits
		2: count, t.7
	call _, printSpaces [t.7]
		1: count
	call _, printUint [count]
		1: count
	; 155:15 return count == 0
	const t.9, 0
		2: count, t.9
	equals t.8, count, t.9
		1: t.8
	ret t.8
	jump @printLeft_ret
	; successors=[@printLeft_ret]

; block @printLeft_ret
	; predecessors=[printLeft]
	; successors=[]


; CFG for function abs
; block abs
	; predecessors=[]
		1: a
	; 13 pc
	; 159:2 if a < 0
	const t.2, 0
		2: a, t.2
	lt t.1, a, t.2
		2: a, t.1
	branch t.1, false, @if_29_end
		1: a
	jump @if_29_then
		1: a
	; successors=[@if_29_end, @if_29_then]

; block @if_29_then
	; predecessors=[abs]
		1: a
	; 9 pc
	; 160:10 return -a
	neg t.3, a
		1: t.3
	ret t.3
	jump @abs_ret
	; successors=[@abs_ret]

; block @if_29_end
	; predecessors=[abs]
		1: a
	; 4 pc
	; 162:9 return a
	ret a
	jump @abs_ret
	; successors=[@abs_ret]

; block @abs_ret
	; predecessors=[@if_29_end, @if_29_then]
	; successors=[]


; CFG for function clearField
; block clearField
	; predecessors=[]
	; 3 pc
	const r, 0
		1: r
	; 166:2 for r < 20
	jump @for_30
		1: r
	; successors=[@for_30]

; block @for_30
	; predecessors=[clearField, @for_31_break]
		1: r
	; 13 pc
	const t.3, 20
		2: r, t.3
	lt t.2, r, t.3
		2: r, t.2
	branch t.2, false, @for_30_break
		1: r
	jump @for_30_body
		1: r
	; successors=[@for_30_break, @for_30_body]

; block @for_30_body
	; predecessors=[@for_30]
		1: r
	; 3 pc
	const c, 0
		2: c, r
	; 167:3 for c < 40
	jump @for_31
		2: c, r
	; successors=[@for_31]

; block @for_31
	; predecessors=[@for_30_body, @for_31_body]
		2: c, r
	; 13 pc
	const t.5, 40
		3: c, r, t.5
	lt t.4, c, t.5
		3: c, r, t.4
	branch t.4, false, @for_31_break
		2: c, r
	jump @for_31_body
		2: c, r
	; successors=[@for_31_break, @for_31_body]

; block @for_31_body
	; predecessors=[@for_31]
		2: c, r
	; 19 pc
	const t.6, 0
		3: c, r, t.6
	call _, setCell [r, c, t.6]
		2: c, r
	const t.7, 1
		3: c, r, t.7
	add c, c, t.7
		2: c, r
	jump @for_31
		2: c, r
	; successors=[@for_31]

; block @for_31_break
	; predecessors=[@for_31]
		1: r
	; 10 pc
	const t.8, 1
		2: r, t.8
	add r, r, t.8
		1: r
	jump @for_30
		1: r
	; successors=[@for_30]

; block @for_30_break
	; predecessors=[@for_30]
	; 1 pc
	jump @clearField_ret
	; successors=[@clearField_ret]

; block @clearField_ret
	; predecessors=[@for_30_break]
	; successors=[]


; CFG for function initField
; block initField
	; predecessors=[]
		2: curr_c, curr_r
	; 3 pc
	const bombs, 40
		3: bombs, curr_c, curr_r
	; 174:2 for bombs > 0
	jump @for_32
		3: bombs, curr_c, curr_r
	; successors=[@for_32]

; block @for_32
	; predecessors=[initField, @for_32_continue]
		3: bombs, curr_c, curr_r
	; 13 pc
	const t.6, 0
		4: bombs, curr_c, curr_r, t.6
	gt t.5, bombs, t.6
		4: bombs, curr_c, curr_r, t.5
	branch t.5, false, @for_32_break
		3: bombs, curr_c, curr_r
	jump @for_32_body
		3: bombs, curr_c, curr_r
	; successors=[@for_32_break, @for_32_body]

; block @for_32_body
	; predecessors=[@for_32]
		3: bombs, curr_c, curr_r
	; 74 pc
	call t.8, random, []
		4: bombs, curr_c, curr_r, t.8
	const t.9, 20
		5: bombs, curr_c, curr_r, t.8, t.9
	move t.7, t.8
		5: bombs, curr_c, curr_r, t.7, t.9
	mod t.7, t.7, t.9
		4: bombs, curr_c, curr_r, t.7
	cast row(i16), t.7(i32)
		4: bombs, curr_c, curr_r, row
	call t.11, random, []
		5: bombs, curr_c, curr_r, row, t.11
	const t.12, 40
		6: bombs, curr_c, curr_r, row, t.11, t.12
	move t.10, t.11
		6: bombs, curr_c, curr_r, row, t.10, t.12
	mod t.10, t.10, t.12
		5: bombs, curr_c, curr_r, row, t.10
	cast column(i16), t.10(i32)
		5: bombs, column, curr_c, curr_r, row
	; 177:3 if abs([ExprBinary[op=-, type=i16, left=ExprVarAccess[varName=row, index=3, scope=function, type=i16, varIsArray=false, location=177:11], right=ExprVarAccess[varName=curr_r, index=0, scope=argument, type=i16, varIsArray=false, location=177:20], location=177:18]]) > 1 || abs([ExprBinary[op=-, type=i16, left=ExprVarAccess[varName=column, index=4, scope=function, type=i16, varIsArray=false, location=178:11], right=ExprVarAccess[varName=curr_c, index=1, scope=argument, type=i16, varIsArray=false, location=178:20], location=178:18]]) > 1
	; 178:4 logic or
	move t.15, row
		6: bombs, column, curr_c, curr_r, row, t.15
	sub t.15, t.15, curr_r
		6: bombs, column, curr_c, curr_r, row, t.15
	call t.14, abs, [t.15]
		6: bombs, column, curr_c, curr_r, row, t.14
	const t.16, 1
		7: bombs, column, curr_c, curr_r, row, t.14, t.16
	gt t.13, t.14, t.16
		6: bombs, column, curr_c, curr_r, row, t.13
	branch t.13, true, @no_critical_edge_10
		6: bombs, column, curr_c, curr_r, row, t.13
	jump @or_2nd_34
		6: bombs, column, curr_c, curr_r, row, t.13
	; successors=[@no_critical_edge_10, @or_2nd_34]

; block @or_2nd_34
	; predecessors=[@for_32_body]
		5: bombs, column, curr_c, curr_r, row
	; 27 pc
	move t.18, column
		6: bombs, column, curr_c, curr_r, row, t.18
	sub t.18, t.18, curr_c
		6: bombs, column, curr_c, curr_r, row, t.18
	call t.17, abs, [t.18]
		6: bombs, column, curr_c, curr_r, row, t.17
	const t.19, 1
		7: bombs, column, curr_c, curr_r, row, t.17, t.19
	gt t.13, t.17, t.19
		6: bombs, column, curr_c, curr_r, row, t.13
	jump @or_next_34
		6: bombs, column, curr_c, curr_r, row, t.13
	; successors=[@or_next_34]

; block @no_critical_edge_10
	; predecessors=[@for_32_body]
		6: bombs, column, curr_c, curr_r, row, t.13
	; 1 pc
	jump @or_next_34
		6: bombs, column, curr_c, curr_r, row, t.13
	; successors=[@or_next_34]

; block @or_next_34
	; predecessors=[@no_critical_edge_10, @or_2nd_34]
		6: bombs, column, curr_c, curr_r, row, t.13
	; 4 pc
	branch t.13, false, @no_critical_edge_11
		5: bombs, column, curr_c, curr_r, row
	jump @if_33_then
		5: bombs, column, curr_c, curr_r, row
	; successors=[@no_critical_edge_11, @if_33_then]

; block @if_33_then
	; predecessors=[@or_next_34]
		5: bombs, column, curr_c, curr_r, row
	; 10 pc
	const t.20, 1
		6: bombs, column, curr_c, curr_r, row, t.20
	call _, setCell [row, column, t.20]
		3: bombs, curr_c, curr_r
	jump @if_33_end
		3: bombs, curr_c, curr_r
	; successors=[@if_33_end]

; block @no_critical_edge_11
	; predecessors=[@or_next_34]
		3: bombs, curr_c, curr_r
	; 1 pc
	jump @if_33_end
		3: bombs, curr_c, curr_r
	; successors=[@if_33_end]

; block @if_33_end
	; predecessors=[@no_critical_edge_11, @if_33_then]
		3: bombs, curr_c, curr_r
	; 1 pc
	jump @for_32_continue
		3: bombs, curr_c, curr_r
	; successors=[@for_32_continue]

; block @for_32_continue
	; predecessors=[@if_33_end]
		3: bombs, curr_c, curr_r
	; 10 pc
	const t.21, 1
		4: bombs, curr_c, curr_r, t.21
	sub bombs, bombs, t.21
		3: bombs, curr_c, curr_r
	jump @for_32
		3: bombs, curr_c, curr_r
	; successors=[@for_32]

; block @for_32_break
	; predecessors=[@for_32]
	; 1 pc
	jump @initField_ret
	; successors=[@initField_ret]

; block @initField_ret
	; predecessors=[@for_32_break]
	; successors=[]


; CFG for function maybeRevealAround
; block maybeRevealAround
	; predecessors=[]
		2: column, row
	; 20 pc
	; 185:2 if getBombCountAround([ExprVarAccess[varName=row, index=0, scope=argument, type=i16, varIsArray=false, location=185:25], ExprVarAccess[varName=column, index=1, scope=argument, type=i16, varIsArray=false, location=185:30]]) != 0
	call t.8, getBombCountAround, [row, column]
		3: column, row, t.8
	const t.9, 0
		4: column, row, t.8, t.9
	notequals t.7, t.8, t.9
		3: column, row, t.7
	branch t.7, false, @if_35_end
		2: column, row
	jump @if_35_then
		2: column, row
	; successors=[@if_35_end, @if_35_then]

; block @if_35_then
	; predecessors=[maybeRevealAround]
	; 1 pc
	jump @maybeRevealAround_ret
	; successors=[@maybeRevealAround_ret]

; block @if_35_end
	; predecessors=[maybeRevealAround]
		2: column, row
	; 3 pc
	const dr, -1
		3: column, dr, row
	; 189:2 for dr <= 1
	jump @for_36
		3: column, dr, row
	; successors=[@for_36]

; block @for_36
	; predecessors=[@if_35_end, @for_37_break]
		3: column, dr, row
	; 13 pc
	const t.11, 1
		4: column, dr, row, t.11
	lteq t.10, dr, t.11
		4: column, dr, row, t.10
	branch t.10, false, @for_36_break
		3: column, dr, row
	jump @for_36_body
		3: column, dr, row
	; successors=[@for_36_break, @for_36_body]

; block @for_36_body
	; predecessors=[@for_36]
		3: column, dr, row
	; 15 pc
	move r, row
		4: column, dr, r, row
	add r, r, dr
		4: column, dr, r, row
	const dc, -1
		5: column, dc, dr, r, row
	; 191:3 for dc <= 1
	jump @for_37
		5: column, dc, dr, r, row
	; successors=[@for_37]

; block @for_37
	; predecessors=[@for_36_body, @for_37_continue]
		5: column, dc, dr, r, row
	; 13 pc
	const t.13, 1
		6: column, dc, dr, r, row, t.13
	lteq t.12, dc, t.13
		6: column, dc, dr, r, row, t.12
	branch t.12, false, @for_37_break
		5: column, dc, dr, r, row
	jump @for_37_body
		5: column, dc, dr, r, row
	; successors=[@for_37_break, @for_37_body]

; block @for_37_body
	; predecessors=[@for_37]
		5: column, dc, dr, r, row
	; 13 pc
	; 192:4 if dr == 0 && dc == 0
	; 192:16 logic and
	const t.15, 0
		6: column, dc, dr, r, row, t.15
	equals t.14, dr, t.15
		6: column, dc, dr, r, row, t.14
	branch t.14, false, @no_critical_edge_20
		6: column, dc, dr, r, row, t.14
	jump @and_2nd_39
		6: column, dc, dr, r, row, t.14
	; successors=[@no_critical_edge_20, @and_2nd_39]

; block @and_2nd_39
	; predecessors=[@for_37_body]
		5: column, dc, dr, r, row
	; 10 pc
	const t.16, 0
		6: column, dc, dr, r, row, t.16
	equals t.14, dc, t.16
		6: column, dc, dr, r, row, t.14
	jump @and_next_39
		6: column, dc, dr, r, row, t.14
	; successors=[@and_next_39]

; block @no_critical_edge_20
	; predecessors=[@for_37_body]
		6: column, dc, dr, r, row, t.14
	; 1 pc
	jump @and_next_39
		6: column, dc, dr, r, row, t.14
	; successors=[@and_next_39]

; block @and_next_39
	; predecessors=[@no_critical_edge_20, @and_2nd_39]
		6: column, dc, dr, r, row, t.14
	; 4 pc
	branch t.14, false, @if_38_end
		5: column, dc, dr, r, row
	jump @if_38_then
		5: column, dc, dr, r, row
	; successors=[@if_38_end, @if_38_then]

; block @if_38_then
	; predecessors=[@and_next_39]
		5: column, dc, dr, r, row
	; 1 pc
	jump @for_37_continue
		5: column, dc, dr, r, row
	; successors=[@for_37_continue]

; block @if_38_end
	; predecessors=[@and_next_39]
		5: column, dc, dr, r, row
	; 28 pc
	move c, column
		6: c, column, dc, dr, r, row
	add c, c, dc
		6: c, column, dc, dr, r, row
	; 197:4 if !checkCellBounds([ExprVarAccess[varName=r, index=3, scope=function, type=i16, varIsArray=false, location=197:25], ExprVarAccess[varName=c, index=5, scope=function, type=i16, varIsArray=false, location=197:28]])
	call t.18, checkCellBounds, [r, c]
		7: c, column, dc, dr, r, row, t.18
	notlog t.17, t.18
		7: c, column, dc, dr, r, row, t.17
	branch t.17, false, @if_40_end
		6: c, column, dc, dr, r, row
	jump @if_40_then
		6: c, column, dc, dr, r, row
	; successors=[@if_40_end, @if_40_then]

; block @if_40_then
	; predecessors=[@if_38_end]
		5: column, dc, dr, r, row
	; 1 pc
	jump @for_37_continue
		5: column, dc, dr, r, row
	; successors=[@for_37_continue]

; block @if_40_end
	; predecessors=[@if_38_end]
		6: c, column, dc, dr, r, row
	; 16 pc
	call cell, getCell, [r, c]
		7: c, cell, column, dc, dr, r, row
	; 202:4 if isOpen([ExprVarAccess[varName=cell, index=6, scope=function, type=u8, varIsArray=false, location=202:15]])
	call t.19, isOpen, [cell]
		8: c, cell, column, dc, dr, r, row, t.19
	branch t.19, false, @if_41_end
		7: c, cell, column, dc, dr, r, row
	jump @if_41_then
		7: c, cell, column, dc, dr, r, row
	; successors=[@if_41_end, @if_41_then]

; block @if_41_then
	; predecessors=[@if_40_end]
		5: column, dc, dr, r, row
	; 1 pc
	jump @for_37_continue
		5: column, dc, dr, r, row
	; successors=[@for_37_continue]

; block @if_41_end
	; predecessors=[@if_40_end]
		7: c, cell, column, dc, dr, r, row
	; 27 pc
	const t.21, 2
		8: c, cell, column, dc, dr, r, row, t.21
	move t.20, cell
		8: c, column, dc, dr, r, row, t.20, t.21
	or t.20, t.20, t.21
		7: c, column, dc, dr, r, row, t.20
	call _, setCell [r, c, t.20]
		6: c, column, dc, dr, r, row
	call _, maybeRevealAround [r, c]
		5: column, dc, dr, r, row
	jump @for_37_continue
		5: column, dc, dr, r, row
	; successors=[@for_37_continue]

; block @for_37_continue
	; predecessors=[@if_41_end, @if_41_then, @if_40_then, @if_38_then]
		5: column, dc, dr, r, row
	; 10 pc
	const t.22, 1
		6: column, dc, dr, r, row, t.22
	add dc, dc, t.22
		5: column, dc, dr, r, row
	jump @for_37
		5: column, dc, dr, r, row
	; successors=[@for_37]

; block @for_37_break
	; predecessors=[@for_37]
		3: column, dr, row
	; 10 pc
	const t.23, 1
		4: column, dr, row, t.23
	add dr, dr, t.23
		3: column, dr, row
	jump @for_36
		3: column, dr, row
	; successors=[@for_36]

; block @for_36_break
	; predecessors=[@for_36]
	; 1 pc
	jump @maybeRevealAround_ret
	; successors=[@maybeRevealAround_ret]

; block @maybeRevealAround_ret
	; predecessors=[@for_36_break, @if_35_then]
	; successors=[]


; CFG for function main
; block main
	; predecessors=[]
	; 23 pc
	; begin initialize global variables
	; end initialize global variables
	const t.6, 7439742
		1: t.6
	call _, initRandom [t.6]
	const needsInitialize, 1
		1: needsInitialize
	call _, clearField []
		1: needsInitialize
	const t.7, 20
		2: needsInitialize, t.7
	cast curr_c(i16), t.7(u8)
		2: curr_c, needsInitialize
	const t.8, 10
		3: curr_c, needsInitialize, t.8
	cast curr_r(i16), t.8(u8)
		3: curr_c, curr_r, needsInitialize
	; 218:2 while true
	jump @while_42
		3: curr_c, curr_r, needsInitialize
	; successors=[@while_42]

; block @while_42
	; predecessors=[main, @if_46_end]
		3: curr_c, curr_r, needsInitialize
	; 14 pc
	call _, printField [curr_r, curr_c]
		3: curr_c, curr_r, needsInitialize
	; 220:3 if !needsInitialize
	notlog t.9, needsInitialize
		4: curr_c, curr_r, needsInitialize, t.9
	branch t.9, false, @no_critical_edge_40
		3: curr_c, curr_r, needsInitialize
	jump @if_43_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_40, @if_43_then]

; block @if_43_then
	; predecessors=[@while_42]
		3: curr_c, curr_r, needsInitialize
	; 7 pc
	; 221:4 if printLeft([])
	call t.10, printLeft, []
		4: curr_c, curr_r, needsInitialize, t.10
	branch t.10, false, @if_44_end
		3: curr_c, curr_r, needsInitialize
	jump @if_44_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_44_end, @if_44_then]

; block @if_44_then
	; predecessors=[@if_43_then]
	; 7 pc
	const t.11, [string-2]
		1: t.11
	call _, printString [t.11]
	jump @while_42_break
	; successors=[@while_42_break]

; block @if_44_end
	; predecessors=[@if_43_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_43_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_43_end]

; block @no_critical_edge_40
	; predecessors=[@while_42]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_43_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_43_end]

; block @if_43_end
	; predecessors=[@no_critical_edge_40, @if_44_end]
		3: curr_c, curr_r, needsInitialize
	; 21 pc
	call t.12, getChar, []
		4: curr_c, curr_r, needsInitialize, t.12
	cast chr(i16), t.12(u8)
		4: chr, curr_c, curr_r, needsInitialize
	; 228:3 if chr == 27
	const t.14, 27
		5: chr, curr_c, curr_r, needsInitialize, t.14
	equals t.13, chr, t.14
		5: chr, curr_c, curr_r, needsInitialize, t.13
	branch t.13, false, @if_45_end
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_45_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_45_end, @if_45_then]

; block @if_45_then
	; predecessors=[@if_43_end]
	; 1 pc
	jump @while_42_break
	; successors=[@while_42_break]

; block @if_45_end
	; predecessors=[@if_43_end]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 233:3 if chr == 57416
	const t.16, 57416
		5: chr, curr_c, curr_r, needsInitialize, t.16
	equals t.15, chr, t.16
		5: chr, curr_c, curr_r, needsInitialize, t.15
	branch t.15, false, @if_46_else
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_46_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_46_else, @if_46_then]

; block @if_46_then
	; predecessors=[@if_45_end]
		3: curr_c, curr_r, needsInitialize
	; 43 pc
	const t.19, 20
		4: curr_c, curr_r, needsInitialize, t.19
	move t.18, curr_r
		4: curr_c, needsInitialize, t.18, t.19
	add t.18, t.18, t.19
		3: curr_c, needsInitialize, t.18
	const t.20, 1
		4: curr_c, needsInitialize, t.18, t.20
	move t.17, t.18
		4: curr_c, needsInitialize, t.17, t.20
	sub t.17, t.17, t.20
		3: curr_c, needsInitialize, t.17
	const t.21, 20
		4: curr_c, needsInitialize, t.17, t.21
	move curr_r, t.17
		4: curr_c, curr_r, needsInitialize, t.21
	mod curr_r, curr_r, t.21
		3: curr_c, curr_r, needsInitialize
	jump @if_46_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_46_end]

; block @if_46_else
	; predecessors=[@if_45_end]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 237:8 if chr == 57424
	const t.23, 57424
		5: chr, curr_c, curr_r, needsInitialize, t.23
	equals t.22, chr, t.23
		5: chr, curr_c, curr_r, needsInitialize, t.22
	branch t.22, false, @if_47_else
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_47_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_47_else, @if_47_then]

; block @if_47_then
	; predecessors=[@if_46_else]
		3: curr_c, curr_r, needsInitialize
	; 29 pc
	const t.25, 1
		4: curr_c, curr_r, needsInitialize, t.25
	move t.24, curr_r
		4: curr_c, needsInitialize, t.24, t.25
	add t.24, t.24, t.25
		3: curr_c, needsInitialize, t.24
	const t.26, 20
		4: curr_c, needsInitialize, t.24, t.26
	move curr_r, t.24
		4: curr_c, curr_r, needsInitialize, t.26
	mod curr_r, curr_r, t.26
		3: curr_c, curr_r, needsInitialize
	jump @if_47_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_47_end]

; block @if_47_else
	; predecessors=[@if_46_else]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 241:8 if chr == 57419
	const t.28, 57419
		5: chr, curr_c, curr_r, needsInitialize, t.28
	equals t.27, chr, t.28
		5: chr, curr_c, curr_r, needsInitialize, t.27
	branch t.27, false, @if_48_else
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_48_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_48_else, @if_48_then]

; block @if_48_then
	; predecessors=[@if_47_else]
		3: curr_c, curr_r, needsInitialize
	; 43 pc
	const t.31, 40
		4: curr_c, curr_r, needsInitialize, t.31
	move t.30, curr_c
		4: curr_r, needsInitialize, t.30, t.31
	add t.30, t.30, t.31
		3: curr_r, needsInitialize, t.30
	const t.32, 1
		4: curr_r, needsInitialize, t.30, t.32
	move t.29, t.30
		4: curr_r, needsInitialize, t.29, t.32
	sub t.29, t.29, t.32
		3: curr_r, needsInitialize, t.29
	const t.33, 40
		4: curr_r, needsInitialize, t.29, t.33
	move curr_c, t.29
		4: curr_c, curr_r, needsInitialize, t.33
	mod curr_c, curr_c, t.33
		3: curr_c, curr_r, needsInitialize
	jump @if_48_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_48_end]

; block @if_48_else
	; predecessors=[@if_47_else]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 245:8 if chr == 57419
	const t.35, 57419
		5: chr, curr_c, curr_r, needsInitialize, t.35
	equals t.34, chr, t.35
		5: chr, curr_c, curr_r, needsInitialize, t.34
	branch t.34, false, @if_49_else
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_49_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_49_else, @if_49_then]

; block @if_49_then
	; predecessors=[@if_48_else]
		3: curr_c, curr_r, needsInitialize
	; 43 pc
	const t.38, 40
		4: curr_c, curr_r, needsInitialize, t.38
	move t.37, curr_c
		4: curr_r, needsInitialize, t.37, t.38
	add t.37, t.37, t.38
		3: curr_r, needsInitialize, t.37
	const t.39, 1
		4: curr_r, needsInitialize, t.37, t.39
	move t.36, t.37
		4: curr_r, needsInitialize, t.36, t.39
	sub t.36, t.36, t.39
		3: curr_r, needsInitialize, t.36
	const t.40, 40
		4: curr_r, needsInitialize, t.36, t.40
	move curr_c, t.36
		4: curr_c, curr_r, needsInitialize, t.40
	mod curr_c, curr_c, t.40
		3: curr_c, curr_r, needsInitialize
	jump @if_49_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_49_end]

; block @if_49_else
	; predecessors=[@if_48_else]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 249:8 if chr == 57421
	const t.42, 57421
		5: chr, curr_c, curr_r, needsInitialize, t.42
	equals t.41, chr, t.42
		5: chr, curr_c, curr_r, needsInitialize, t.41
	branch t.41, false, @if_50_else
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_50_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_50_else, @if_50_then]

; block @if_50_then
	; predecessors=[@if_49_else]
		3: curr_c, curr_r, needsInitialize
	; 29 pc
	const t.44, 1
		4: curr_c, curr_r, needsInitialize, t.44
	move t.43, curr_c
		4: curr_r, needsInitialize, t.43, t.44
	add t.43, t.43, t.44
		3: curr_r, needsInitialize, t.43
	const t.45, 40
		4: curr_r, needsInitialize, t.43, t.45
	move curr_c, t.43
		4: curr_c, curr_r, needsInitialize, t.45
	mod curr_c, curr_c, t.45
		3: curr_c, curr_r, needsInitialize
	jump @if_50_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_50_end]

; block @if_50_else
	; predecessors=[@if_49_else]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 253:8 if chr == 32
	const t.47, 32
		5: chr, curr_c, curr_r, needsInitialize, t.47
	equals t.46, chr, t.47
		5: chr, curr_c, curr_r, needsInitialize, t.46
	branch t.46, false, @if_51_else
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_51_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_51_else, @if_51_then]

; block @if_51_then
	; predecessors=[@if_50_else]
		3: curr_c, curr_r, needsInitialize
	; 9 pc
	; 254:4 if !needsInitialize
	notlog t.48, needsInitialize
		4: curr_c, curr_r, needsInitialize, t.48
	branch t.48, false, @no_critical_edge_44
		3: curr_c, curr_r, needsInitialize
	jump @if_52_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_44, @if_52_then]

; block @if_52_then
	; predecessors=[@if_51_then]
		3: curr_c, curr_r, needsInitialize
	; 21 pc
	call cell, getCell, [curr_r, curr_c]
		4: cell, curr_c, curr_r, needsInitialize
	; 256:5 if !isOpen([ExprVarAccess[varName=cell, index=4, scope=function, type=u8, varIsArray=false, location=256:17]])
	call t.50, isOpen, [cell]
		5: cell, curr_c, curr_r, needsInitialize, t.50
	notlog t.49, t.50
		5: cell, curr_c, curr_r, needsInitialize, t.49
	branch t.49, false, @no_critical_edge_45
		4: cell, curr_c, curr_r, needsInitialize
	jump @if_53_then
		4: cell, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_45, @if_53_then]

; block @if_53_then
	; predecessors=[@if_52_then]
		4: cell, curr_c, curr_r, needsInitialize
	; 17 pc
	const t.51, 4
		5: cell, curr_c, curr_r, needsInitialize, t.51
	xor cell, cell, t.51
		4: cell, curr_c, curr_r, needsInitialize
	call _, setCell [curr_r, curr_c, cell]
		3: curr_c, curr_r, needsInitialize
	jump @if_53_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_53_end]

; block @no_critical_edge_45
	; predecessors=[@if_52_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_53_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_53_end]

; block @if_53_end
	; predecessors=[@no_critical_edge_45, @if_53_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_52_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_52_end]

; block @no_critical_edge_44
	; predecessors=[@if_51_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_52_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_52_end]

; block @if_52_end
	; predecessors=[@no_critical_edge_44, @if_53_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_51_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_51_end]

; block @if_51_else
	; predecessors=[@if_50_else]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 262:8 if chr == 13
	const t.53, 13
		5: chr, curr_c, curr_r, needsInitialize, t.53
	equals t.52, chr, t.53
		4: curr_c, curr_r, needsInitialize, t.52
	branch t.52, false, @no_critical_edge_41
		3: curr_c, curr_r, needsInitialize
	jump @if_54_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_41, @if_54_then]

; block @if_54_then
	; predecessors=[@if_51_else]
		3: curr_c, curr_r, needsInitialize
	; 4 pc
	branch needsInitialize, false, @no_critical_edge_42
		3: curr_c, curr_r, needsInitialize
	jump @if_55_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_42, @if_55_then]

; block @if_55_then
	; predecessors=[@if_54_then]
		2: curr_c, curr_r
	; 8 pc
	const needsInitialize, 0
		3: curr_c, curr_r, needsInitialize
	call _, initField [curr_r, curr_c]
		3: curr_c, curr_r, needsInitialize
	jump @if_55_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_55_end]

; block @no_critical_edge_42
	; predecessors=[@if_54_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_55_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_55_end]

; block @if_55_end
	; predecessors=[@no_critical_edge_42, @if_55_then]
		3: curr_c, curr_r, needsInitialize
	; 21 pc
	call cell, getCell, [curr_r, curr_c]
		4: cell, curr_c, curr_r, needsInitialize
	; 268:4 if !isOpen([ExprVarAccess[varName=cell, index=5, scope=function, type=u8, varIsArray=false, location=268:16]])
	call t.55, isOpen, [cell]
		5: cell, curr_c, curr_r, needsInitialize, t.55
	notlog t.54, t.55
		5: cell, curr_c, curr_r, needsInitialize, t.54
	branch t.54, false, @no_critical_edge_43
		4: cell, curr_c, curr_r, needsInitialize
	jump @if_56_then
		4: cell, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_43, @if_56_then]

; block @if_56_then
	; predecessors=[@if_55_end]
		4: cell, curr_c, curr_r, needsInitialize
	; 22 pc
	const t.57, 2
		5: cell, curr_c, curr_r, needsInitialize, t.57
	move t.56, cell
		6: cell, curr_c, curr_r, needsInitialize, t.56, t.57
	or t.56, t.56, t.57
		5: cell, curr_c, curr_r, needsInitialize, t.56
	call _, setCell [curr_r, curr_c, t.56]
		4: cell, curr_c, curr_r, needsInitialize
	jump @if_56_end
		4: cell, curr_c, curr_r, needsInitialize
	; successors=[@if_56_end]

; block @no_critical_edge_43
	; predecessors=[@if_55_end]
		4: cell, curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_56_end
		4: cell, curr_c, curr_r, needsInitialize
	; successors=[@if_56_end]

; block @if_56_end
	; predecessors=[@no_critical_edge_43, @if_56_then]
		4: cell, curr_c, curr_r, needsInitialize
	; 9 pc
	; 271:4 if isBomb([ExprVarAccess[varName=cell, index=5, scope=function, type=u8, varIsArray=false, location=271:15]])
	call t.58, isBomb, [cell]
		4: curr_c, curr_r, needsInitialize, t.58
	branch t.58, false, @if_57_end
		3: curr_c, curr_r, needsInitialize
	jump @if_57_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_57_end, @if_57_then]

; block @if_57_then
	; predecessors=[@if_56_end]
		2: curr_c, curr_r
	; 12 pc
	call _, printField [curr_r, curr_c]
	const t.59, [string-3]
		1: t.59
	call _, printString [t.59]
	jump @while_42_break
	; successors=[@while_42_break]

; block @while_42_break
	; predecessors=[@if_57_then, @if_45_then, @if_44_then]
	; 1 pc
	jump @main_ret
	; successors=[@main_ret]

; block @if_57_end
	; predecessors=[@if_56_end]
		3: curr_c, curr_r, needsInitialize
	; 6 pc
	call _, maybeRevealAround [curr_r, curr_c]
		3: curr_c, curr_r, needsInitialize
	jump @if_54_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_54_end]

; block @no_critical_edge_41
	; predecessors=[@if_51_else]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_54_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_54_end]

; block @if_54_end
	; predecessors=[@no_critical_edge_41, @if_57_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_51_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_51_end]

; block @if_51_end
	; predecessors=[@if_54_end, @if_52_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_50_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_50_end]

; block @if_50_end
	; predecessors=[@if_51_end, @if_50_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_49_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_49_end]

; block @if_49_end
	; predecessors=[@if_50_end, @if_49_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_48_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_48_end]

; block @if_48_end
	; predecessors=[@if_49_end, @if_48_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_47_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_47_end]

; block @if_47_end
	; predecessors=[@if_48_end, @if_47_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_46_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_46_end]

; block @if_46_end
	; predecessors=[@if_47_end, @if_46_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @while_42
		3: curr_c, curr_r, needsInitialize
	; successors=[@while_42]

; block @main_ret
	; predecessors=[@while_42_break]
	; successors=[]


