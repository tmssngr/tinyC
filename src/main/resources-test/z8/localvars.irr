@printStringLength:
 Local variables
	arg 0: str (u8*/8)
	arg 1: length (u8/1)
	; 19 pc
@while_1:
	const r0, 0
	move r1, length
	gt r0, r1, r0
	branch r0, false, @printStringLength_ret
	move r0, str
	load r1, [r0]
	call _, printChar [r1]
	const r0, 1
	move r1, length
	sub r0, r1, r0
	move length, r0
	jump @while_1
@printStringLength_ret:

@printUint:
 Local variables
	arg 0: number (i16/2)
	var 1: buffer[] (u8*/20)
	var 2: pos (u8/1)
	; 39 pc
	const r0, 20
	; 24:2 while true
	move pos, r0
@while_2:
	const r0, 1
	move r1, pos
	sub r0, r1, r0
	const r1, 10
	move r2, number
	move r3, r2
	mod r1, r3, r1
	cast r1(i64), r1(i16)
	const r3, 10
	div r2, r2, r3
	cast r1(u8), r1(i64)
	const r3, 48
	add r1, r1, r3
	cast r3(i16), r0(u8)
	cast r3(u8*), r3(i16)
	; Spill pos
	move pos, r0
	addrof r0, [buffer]
	add r0, r0, r3
	store [r0], r1
	; 30:3 if number == 0
	const r0, 0
	equals r0, r2, r0
	move number, r2
	branch r0, false, @while_2
	move r0, pos
	cast r1(i16), r0(u8)
	cast r1(u8*), r1(i16)
	addrof r2, [buffer]
	add r1, r2, r1
	const r2, 20
	sub r0, r2, r0
	call _, printStringLength [r1, r0]

@printIntLf:
 Local variables
	arg 0: number (i16/2)
	; 17 pc
	; 38:2 if number < 0
	const r0, 0
	move r1, number
	lt r0, r1, r0
	branch r0, false, @if_4_end
	const r0, 45
	call _, printChar [r0]
	move r0, number
	neg r0, r0
	move number, r0
@if_4_end:
	call _, printUint [number]
	const r0, 10
	call _, printChar [r0]

@main:
	; 2 pc
	; begin initialize global variables
	; end initialize global variables
	const r0, 10
	cast r0(i16), r0(u8)
	call _, printIntLf [r0]

@printChar:
	ld   r0, SPH
	ld   r1, SPL
	add  r1, 3
	adc  r0, 0
	ldc  r1, @rr0
	ld   %15, r1
	jp   %0818

