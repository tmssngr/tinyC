; CFG for function printString
; block printString
	; predecessors=[]
		1: str
	; 1 pc
	jump @while_1
		1: str
	; successors=[@while_1]

; block @while_1
	; predecessors=[printString, @if_2_end]
		1: str
	; 19 pc
	load chr, [str]
		2: chr, str
	; 4:3 if chr == 0
	const t.3, 0
		3: chr, str, t.3
	equals t.2, chr, t.3
		3: chr, str, t.2
	branch t.2, false, @if_2_end
		2: chr, str
	jump @if_2_then
		2: chr, str
	; successors=[@if_2_end, @if_2_then]

; block @if_2_then
	; predecessors=[@while_1]
	; 1 pc
	jump @printString_ret
	; successors=[@printString_ret]

; block @if_2_end
	; predecessors=[@while_1]
		2: chr, str
	; 4 pc
	call _, printChar [chr]
		1: str
	jump @while_1
		1: str
	; successors=[@while_1]

; block @printString_ret
	; predecessors=[@if_2_then]
	; successors=[]


; CFG for function printStringLength
; block printStringLength
	; predecessors=[]
		2: length, str
	; 1 pc
	jump @while_3
		2: length, str
	; successors=[@while_3]

; block @while_3
	; predecessors=[printStringLength, @while_3_body]
		2: length, str
	; 13 pc
	const t.4, 0
		3: length, str, t.4
	gt t.3, length, t.4
		3: length, str, t.3
	branch t.3, false, @while_3_break
		2: length, str
	jump @while_3_body
		2: length, str
	; successors=[@while_3_break, @while_3_body]

; block @while_3_body
	; predecessors=[@while_3]
		2: length, str
	; 19 pc
	load chr, [str]
		3: chr, length, str
	call _, printChar [chr]
		2: length, str
	const t.5, 1
		3: length, str, t.5
	sub length, length, t.5
		2: length, str
	jump @while_3
		2: length, str
	; successors=[@while_3]

; block @while_3_break
	; predecessors=[@while_3]
	; 1 pc
	jump @printStringLength_ret
	; successors=[@printStringLength_ret]

; block @printStringLength_ret
	; predecessors=[@while_3_break]
	; successors=[]


; CFG for function printUint
; block printUint
	; predecessors=[]
		1: number
	; 3 pc
	const pos, 20
		2: number, pos
	; 24:2 while true
	jump @while_4
		2: number, pos
	; successors=[@while_4]

; block @while_4
	; predecessors=[printUint, @if_5_end]
		2: number, pos
	; 95 pc
	const t.5, 1
		3: number, pos, t.5
	sub pos, pos, t.5
		2: number, pos
	const t.7, 10
		3: number, pos, t.7
	move t.6, number
		4: number, pos, t.6, t.7
	mod t.6, t.6, t.7
		3: number, pos, t.6
	cast remainder(i64), t.6(i16)
		3: number, pos, remainder
	const t.8, 10
		4: number, pos, remainder, t.8
	div number, number, t.8
		3: number, pos, remainder
	cast t.9(u8), remainder(i64)
		3: number, pos, t.9
	const t.10, 48
		4: number, pos, t.10, t.9
	move digit, t.9
		4: digit, number, pos, t.10
	add digit, digit, t.10
		3: digit, number, pos
	cast t.12(i16), pos(u8)
		4: digit, number, pos, t.12
	cast t.13(u8*), t.12(i16)
		4: digit, number, pos, t.13
	addrof t.11, [buffer]
		5: digit, number, pos, t.11, t.13
	add t.11, t.11, t.13
		4: digit, number, pos, t.11
	store [t.11], digit
		2: number, pos
	; 30:3 if number == 0
	const t.15, 0
		3: number, pos, t.15
	equals t.14, number, t.15
		3: number, pos, t.14
	branch t.14, false, @if_5_end
		2: number, pos
	jump @if_5_then
		2: number, pos
	; successors=[@if_5_end, @if_5_then]

; block @if_5_then
	; predecessors=[@while_4]
		1: pos
	; 40 pc
	cast t.17(i16), pos(u8)
		2: pos, t.17
	cast t.18(u8*), t.17(i16)
		2: pos, t.18
	addrof t.16, [buffer]
		3: pos, t.16, t.18
	add t.16, t.16, t.18
		2: pos, t.16
	const t.20, 20
		3: pos, t.16, t.20
	move t.19, t.20
		3: pos, t.16, t.19
	sub t.19, t.19, pos
		2: t.16, t.19
	call _, printStringLength [t.16, t.19]
	jump @printUint_ret
	; successors=[@printUint_ret]

; block @if_5_end
	; predecessors=[@while_4]
		2: number, pos
	; 1 pc
	jump @while_4
		2: number, pos
	; successors=[@while_4]

; block @printUint_ret
	; predecessors=[@if_5_then]
	; successors=[]


; CFG for function printIntLf
; block printIntLf
	; predecessors=[]
		1: number
	; 13 pc
	; 38:2 if number < 0
	const t.2, 0
		2: number, t.2
	lt t.1, number, t.2
		2: number, t.1
	branch t.1, false, @no_critical_edge_4
		1: number
	jump @if_6_then
		1: number
	; successors=[@no_critical_edge_4, @if_6_then]

; block @if_6_then
	; predecessors=[printIntLf]
		1: number
	; 11 pc
	const t.3, 45
		2: number, t.3
	call _, printChar [t.3]
		1: number
	neg number, number
		1: number
	jump @if_6_end
		1: number
	; successors=[@if_6_end]

; block @no_critical_edge_4
	; predecessors=[printIntLf]
		1: number
	; 1 pc
	jump @if_6_end
		1: number
	; successors=[@if_6_end]

; block @if_6_end
	; predecessors=[@no_critical_edge_4, @if_6_then]
		1: number
	; 9 pc
	call _, printUint [number]
	const t.4, 10
		1: t.4
	call _, printChar [t.4]
	jump @printIntLf_ret
	; successors=[@printIntLf_ret]

; block @printIntLf_ret
	; predecessors=[@if_6_end]
	; successors=[]


; CFG for function main
; block main
	; predecessors=[]
	; 225 pc
	; begin initialize global variables
	; end initialize global variables
	const t.9, [string-0]
		1: t.9
	call _, printString [t.9]
	const a, 0
		1: a
	const b, 1
		2: a, b
	const c, 2
		3: a, b, c
	const d, 3
		4: a, b, c, d
	const t, 1
		5: a, b, c, d, t
	const f, 0
		6: a, b, c, d, f, t
	move t.10, a
		7: a, b, c, d, f, t, t.10
	and t.10, t.10, a
		7: a, b, c, d, f, t, t.10
	call _, printIntLf [t.10]
		6: a, b, c, d, f, t
	move t.11, a
		7: a, b, c, d, f, t, t.11
	and t.11, t.11, b
		7: a, b, c, d, f, t, t.11
	call _, printIntLf [t.11]
		6: a, b, c, d, f, t
	move t.12, b
		7: a, b, c, d, f, t, t.12
	and t.12, t.12, a
		7: a, b, c, d, f, t, t.12
	call _, printIntLf [t.12]
		6: a, b, c, d, f, t
	move t.13, b
		7: a, b, c, d, f, t, t.13
	and t.13, t.13, b
		7: a, b, c, d, f, t, t.13
	call _, printIntLf [t.13]
		6: a, b, c, d, f, t
	const t.14, [string-1]
		7: a, b, c, d, f, t, t.14
	call _, printString [t.14]
		6: a, b, c, d, f, t
	move t.15, a
		7: a, b, c, d, f, t, t.15
	or t.15, t.15, a
		7: a, b, c, d, f, t, t.15
	call _, printIntLf [t.15]
		6: a, b, c, d, f, t
	move t.16, a
		7: a, b, c, d, f, t, t.16
	or t.16, t.16, b
		7: a, b, c, d, f, t, t.16
	call _, printIntLf [t.16]
		6: a, b, c, d, f, t
	move t.17, b
		7: a, b, c, d, f, t, t.17
	or t.17, t.17, a
		7: a, b, c, d, f, t, t.17
	call _, printIntLf [t.17]
		6: a, b, c, d, f, t
	move t.18, b
		7: a, b, c, d, f, t, t.18
	or t.18, t.18, b
		7: a, b, c, d, f, t, t.18
	call _, printIntLf [t.18]
		6: a, b, c, d, f, t
	const t.19, [string-2]
		7: a, b, c, d, f, t, t.19
	call _, printString [t.19]
		6: a, b, c, d, f, t
	move t.20, a
		7: a, b, c, d, f, t, t.20
	xor t.20, t.20, a
		7: a, b, c, d, f, t, t.20
	call _, printIntLf [t.20]
		6: a, b, c, d, f, t
	move t.21, a
		7: a, b, c, d, f, t, t.21
	xor t.21, t.21, c
		7: a, b, c, d, f, t, t.21
	call _, printIntLf [t.21]
		6: a, b, c, d, f, t
	move t.22, b
		7: a, b, c, d, f, t, t.22
	xor t.22, t.22, a
		6: b, c, d, f, t, t.22
	call _, printIntLf [t.22]
		5: b, c, d, f, t
	move t.23, b
		6: b, c, d, f, t, t.23
	xor t.23, t.23, c
		6: b, c, d, f, t, t.23
	call _, printIntLf [t.23]
		5: b, c, d, f, t
	const t.24, [string-3]
		6: b, c, d, f, t, t.24
	call _, printString [t.24]
		5: b, c, d, f, t
	; 26:15 logic and
	move t.26, f
		6: b, c, d, f, t, t.26
	branch t.26, false, @no_critical_edge_22
		6: b, c, d, f, t, t.26
	jump @and_2nd_7
		6: b, c, d, f, t, t.26
	; successors=[@no_critical_edge_22, @and_2nd_7]

; block @and_2nd_7
	; predecessors=[main]
		5: b, c, d, f, t
	; 6 pc
	move t.26, f
		6: b, c, d, f, t, t.26
	jump @and_next_7
		6: b, c, d, f, t, t.26
	; successors=[@and_next_7]

; block @no_critical_edge_22
	; predecessors=[main]
		6: b, c, d, f, t, t.26
	; 1 pc
	jump @and_next_7
		6: b, c, d, f, t, t.26
	; successors=[@and_next_7]

; block @and_next_7
	; predecessors=[@no_critical_edge_22, @and_2nd_7]
		6: b, c, d, f, t, t.26
	; 17 pc
	cast t.25(i16), t.26(bool)
		6: b, c, d, f, t, t.25
	call _, printIntLf [t.25]
		5: b, c, d, f, t
	; 27:15 logic and
	move t.28, f
		6: b, c, d, f, t, t.28
	branch t.28, false, @no_critical_edge_23
		6: b, c, d, f, t, t.28
	jump @and_2nd_8
		6: b, c, d, f, t, t.28
	; successors=[@no_critical_edge_23, @and_2nd_8]

; block @and_2nd_8
	; predecessors=[@and_next_7]
		5: b, c, d, f, t
	; 6 pc
	move t.28, t
		6: b, c, d, f, t, t.28
	jump @and_next_8
		6: b, c, d, f, t, t.28
	; successors=[@and_next_8]

; block @no_critical_edge_23
	; predecessors=[@and_next_7]
		6: b, c, d, f, t, t.28
	; 1 pc
	jump @and_next_8
		6: b, c, d, f, t, t.28
	; successors=[@and_next_8]

; block @and_next_8
	; predecessors=[@no_critical_edge_23, @and_2nd_8]
		6: b, c, d, f, t, t.28
	; 17 pc
	cast t.27(i16), t.28(bool)
		6: b, c, d, f, t, t.27
	call _, printIntLf [t.27]
		5: b, c, d, f, t
	; 28:15 logic and
	move t.30, t
		6: b, c, d, f, t, t.30
	branch t.30, false, @no_critical_edge_24
		6: b, c, d, f, t, t.30
	jump @and_2nd_9
		6: b, c, d, f, t, t.30
	; successors=[@no_critical_edge_24, @and_2nd_9]

; block @and_2nd_9
	; predecessors=[@and_next_8]
		5: b, c, d, f, t
	; 6 pc
	move t.30, f
		6: b, c, d, f, t, t.30
	jump @and_next_9
		6: b, c, d, f, t, t.30
	; successors=[@and_next_9]

; block @no_critical_edge_24
	; predecessors=[@and_next_8]
		6: b, c, d, f, t, t.30
	; 1 pc
	jump @and_next_9
		6: b, c, d, f, t, t.30
	; successors=[@and_next_9]

; block @and_next_9
	; predecessors=[@no_critical_edge_24, @and_2nd_9]
		6: b, c, d, f, t, t.30
	; 17 pc
	cast t.29(i16), t.30(bool)
		6: b, c, d, f, t, t.29
	call _, printIntLf [t.29]
		5: b, c, d, f, t
	; 29:15 logic and
	move t.32, t
		6: b, c, d, f, t, t.32
	branch t.32, false, @no_critical_edge_25
		6: b, c, d, f, t, t.32
	jump @and_2nd_10
		6: b, c, d, f, t, t.32
	; successors=[@no_critical_edge_25, @and_2nd_10]

; block @and_2nd_10
	; predecessors=[@and_next_9]
		5: b, c, d, f, t
	; 6 pc
	move t.32, t
		6: b, c, d, f, t, t.32
	jump @and_next_10
		6: b, c, d, f, t, t.32
	; successors=[@and_next_10]

; block @no_critical_edge_25
	; predecessors=[@and_next_9]
		6: b, c, d, f, t, t.32
	; 1 pc
	jump @and_next_10
		6: b, c, d, f, t, t.32
	; successors=[@and_next_10]

; block @and_next_10
	; predecessors=[@no_critical_edge_25, @and_2nd_10]
		6: b, c, d, f, t, t.32
	; 23 pc
	cast t.31(i16), t.32(bool)
		6: b, c, d, f, t, t.31
	call _, printIntLf [t.31]
		5: b, c, d, f, t
	const t.33, [string-4]
		6: b, c, d, f, t, t.33
	call _, printString [t.33]
		5: b, c, d, f, t
	; 31:15 logic or
	move t.35, f
		6: b, c, d, f, t, t.35
	branch t.35, true, @no_critical_edge_26
		6: b, c, d, f, t, t.35
	jump @or_2nd_11
		6: b, c, d, f, t, t.35
	; successors=[@no_critical_edge_26, @or_2nd_11]

; block @or_2nd_11
	; predecessors=[@and_next_10]
		5: b, c, d, f, t
	; 6 pc
	move t.35, f
		6: b, c, d, f, t, t.35
	jump @or_next_11
		6: b, c, d, f, t, t.35
	; successors=[@or_next_11]

; block @no_critical_edge_26
	; predecessors=[@and_next_10]
		6: b, c, d, f, t, t.35
	; 1 pc
	jump @or_next_11
		6: b, c, d, f, t, t.35
	; successors=[@or_next_11]

; block @or_next_11
	; predecessors=[@no_critical_edge_26, @or_2nd_11]
		6: b, c, d, f, t, t.35
	; 17 pc
	cast t.34(i16), t.35(bool)
		6: b, c, d, f, t, t.34
	call _, printIntLf [t.34]
		5: b, c, d, f, t
	; 32:15 logic or
	move t.37, f
		6: b, c, d, f, t, t.37
	branch t.37, true, @no_critical_edge_27
		6: b, c, d, f, t, t.37
	jump @or_2nd_12
		6: b, c, d, f, t, t.37
	; successors=[@no_critical_edge_27, @or_2nd_12]

; block @or_2nd_12
	; predecessors=[@or_next_11]
		5: b, c, d, f, t
	; 6 pc
	move t.37, t
		6: b, c, d, f, t, t.37
	jump @or_next_12
		6: b, c, d, f, t, t.37
	; successors=[@or_next_12]

; block @no_critical_edge_27
	; predecessors=[@or_next_11]
		6: b, c, d, f, t, t.37
	; 1 pc
	jump @or_next_12
		6: b, c, d, f, t, t.37
	; successors=[@or_next_12]

; block @or_next_12
	; predecessors=[@no_critical_edge_27, @or_2nd_12]
		6: b, c, d, f, t, t.37
	; 17 pc
	cast t.36(i16), t.37(bool)
		6: b, c, d, f, t, t.36
	call _, printIntLf [t.36]
		5: b, c, d, f, t
	; 33:15 logic or
	move t.39, t
		6: b, c, d, f, t, t.39
	branch t.39, true, @no_critical_edge_28
		6: b, c, d, f, t, t.39
	jump @or_2nd_13
		6: b, c, d, f, t, t.39
	; successors=[@no_critical_edge_28, @or_2nd_13]

; block @or_2nd_13
	; predecessors=[@or_next_12]
		5: b, c, d, f, t
	; 6 pc
	move t.39, f
		6: b, c, d, f, t, t.39
	jump @or_next_13
		6: b, c, d, f, t, t.39
	; successors=[@or_next_13]

; block @no_critical_edge_28
	; predecessors=[@or_next_12]
		6: b, c, d, f, t, t.39
	; 1 pc
	jump @or_next_13
		6: b, c, d, f, t, t.39
	; successors=[@or_next_13]

; block @or_next_13
	; predecessors=[@no_critical_edge_28, @or_2nd_13]
		6: b, c, d, f, t, t.39
	; 17 pc
	cast t.38(i16), t.39(bool)
		6: b, c, d, f, t, t.38
	call _, printIntLf [t.38]
		5: b, c, d, f, t
	; 34:15 logic or
	move t.41, t
		6: b, c, d, f, t, t.41
	branch t.41, true, @no_critical_edge_29
		6: b, c, d, f, t, t.41
	jump @or_2nd_14
		6: b, c, d, f, t, t.41
	; successors=[@no_critical_edge_29, @or_2nd_14]

; block @or_2nd_14
	; predecessors=[@or_next_13]
		5: b, c, d, f, t
	; 6 pc
	move t.41, t
		6: b, c, d, f, t, t.41
	jump @or_next_14
		6: b, c, d, f, t, t.41
	; successors=[@or_next_14]

; block @no_critical_edge_29
	; predecessors=[@or_next_13]
		6: b, c, d, f, t, t.41
	; 1 pc
	jump @or_next_14
		6: b, c, d, f, t, t.41
	; successors=[@or_next_14]

; block @or_next_14
	; predecessors=[@no_critical_edge_29, @or_2nd_14]
		6: b, c, d, f, t, t.41
	; 95 pc
	cast t.40(i16), t.41(bool)
		6: b, c, d, f, t, t.40
	call _, printIntLf [t.40]
		5: b, c, d, f, t
	const t.42, [string-5]
		6: b, c, d, f, t, t.42
	call _, printString [t.42]
		5: b, c, d, f, t
	notlog t.44, f
		5: b, c, d, t, t.44
	cast t.43(i16), t.44(bool)
		5: b, c, d, t, t.43
	call _, printIntLf [t.43]
		4: b, c, d, t
	notlog t.46, t
		4: b, c, d, t.46
	cast t.45(i16), t.46(bool)
		4: b, c, d, t.45
	call _, printIntLf [t.45]
		3: b, c, d
	const t.47, [string-6]
		4: b, c, d, t.47
	call _, printString [t.47]
		3: b, c, d
	const b10, 10
		4: b, b10, c, d
	const b6, 6
		5: b, b10, b6, c, d
	const b1, 1
		6: b, b1, b10, b6, c, d
	move t.50, b10
		6: b, b1, b6, c, d, t.50
	and t.50, t.50, b6
		5: b, b1, c, d, t.50
	move t.49, t.50
		5: b, b1, c, d, t.49
	or t.49, t.49, b1
		5: b, b1, c, d, t.49
	cast t.48(i16), t.49(u8)
		5: b, b1, c, d, t.48
	call _, printIntLf [t.48]
		4: b, b1, c, d
	; 43:20 logic or
	equals t.52, b, c
		5: b, b1, c, d, t.52
	branch t.52, true, @no_critical_edge_30
		5: b, b1, c, d, t.52
	jump @or_2nd_15
		5: b, b1, c, d, t.52
	; successors=[@no_critical_edge_30, @or_2nd_15]

; block @or_2nd_15
	; predecessors=[@or_next_14]
		4: b, b1, c, d
	; 8 pc
	lt t.52, c, d
		5: b, b1, c, d, t.52
	jump @or_next_15
		5: b, b1, c, d, t.52
	; successors=[@or_next_15]

; block @no_critical_edge_30
	; predecessors=[@or_next_14]
		5: b, b1, c, d, t.52
	; 1 pc
	jump @or_next_15
		5: b, b1, c, d, t.52
	; successors=[@or_next_15]

; block @or_next_15
	; predecessors=[@no_critical_edge_30, @or_2nd_15]
		5: b, b1, c, d, t.52
	; 19 pc
	cast t.51(i16), t.52(bool)
		5: b, b1, c, d, t.51
	call _, printIntLf [t.51]
		4: b, b1, c, d
	; 44:20 logic and
	equals t.54, b, c
		5: b, b1, c, d, t.54
	branch t.54, false, @no_critical_edge_31
		5: b, b1, c, d, t.54
	jump @and_2nd_16
		5: b, b1, c, d, t.54
	; successors=[@no_critical_edge_31, @and_2nd_16]

; block @and_2nd_16
	; predecessors=[@or_next_15]
		4: b, b1, c, d
	; 8 pc
	lt t.54, c, d
		3: b, b1, t.54
	jump @and_next_16
		3: b, b1, t.54
	; successors=[@and_next_16]

; block @no_critical_edge_31
	; predecessors=[@or_next_15]
		3: b, b1, t.54
	; 1 pc
	jump @and_next_16
		3: b, b1, t.54
	; successors=[@and_next_16]

; block @and_next_16
	; predecessors=[@no_critical_edge_31, @and_2nd_16]
		3: b, b1, t.54
	; 35 pc
	cast t.53(i16), t.54(bool)
		3: b, b1, t.53
	call _, printIntLf [t.53]
		2: b, b1
	const t.55, -1
		3: b, b1, t.55
	call _, printIntLf [t.55]
		2: b, b1
	neg t.56, b
		2: b1, t.56
	call _, printIntLf [t.56]
		1: b1
	not t.58, b1
		1: t.58
	cast t.57(i16), t.58(u8)
		1: t.57
	call _, printIntLf [t.57]
	jump @main_ret
	; successors=[@main_ret]

; block @main_ret
	; predecessors=[@and_next_16]
	; successors=[]


