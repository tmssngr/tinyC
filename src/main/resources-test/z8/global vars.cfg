; CFG for function printStringLength
; block printStringLength
	; predecessors=[]
		2: length, str
	; 1 pc
	jump @while_1
		2: length, str
	; successors=[@while_1]

; block @while_1
	; predecessors=[printStringLength, @while_1_body]
		2: length, str
	; 13 pc
	const t.4, 0
		3: length, str, t.4
	gt t.3, length, t.4
		3: length, str, t.3
	branch t.3, false, @while_1_break
		2: length, str
	jump @while_1_body
		2: length, str
	; successors=[@while_1_break, @while_1_body]

; block @while_1_body
	; predecessors=[@while_1]
		2: length, str
	; 19 pc
	load chr, [str]
		3: chr, length, str
	call _, printChar [chr]
		2: length, str
	const t.5, 1
		3: length, str, t.5
	sub length, length, t.5
		2: length, str
	jump @while_1
		2: length, str
	; successors=[@while_1]

; block @while_1_break
	; predecessors=[@while_1]
	; 1 pc
	jump @printStringLength_ret
	; successors=[@printStringLength_ret]

; block @printStringLength_ret
	; predecessors=[@while_1_break]
	; successors=[]


; CFG for function printUint
; block printUint
	; predecessors=[]
		1: number
	; 3 pc
	const pos, 20
		2: number, pos
	; 24:2 while true
	jump @while_2
		2: number, pos
	; successors=[@while_2]

; block @while_2
	; predecessors=[printUint, @if_3_end]
		2: number, pos
	; 95 pc
	const t.5, 1
		3: number, pos, t.5
	sub pos, pos, t.5
		2: number, pos
	const t.7, 10
		3: number, pos, t.7
	move t.6, number
		4: number, pos, t.6, t.7
	mod t.6, t.6, t.7
		3: number, pos, t.6
	cast remainder(i64), t.6(i16)
		3: number, pos, remainder
	const t.8, 10
		4: number, pos, remainder, t.8
	div number, number, t.8
		3: number, pos, remainder
	cast t.9(u8), remainder(i64)
		3: number, pos, t.9
	const t.10, 48
		4: number, pos, t.10, t.9
	move digit, t.9
		4: digit, number, pos, t.10
	add digit, digit, t.10
		3: digit, number, pos
	cast t.12(i16), pos(u8)
		4: digit, number, pos, t.12
	cast t.13(u8*), t.12(i16)
		4: digit, number, pos, t.13
	addrof t.11, [buffer]
		5: digit, number, pos, t.11, t.13
	add t.11, t.11, t.13
		4: digit, number, pos, t.11
	store [t.11], digit
		2: number, pos
	; 30:3 if number == 0
	const t.15, 0
		3: number, pos, t.15
	equals t.14, number, t.15
		3: number, pos, t.14
	branch t.14, false, @if_3_end
		2: number, pos
	jump @if_3_then
		2: number, pos
	; successors=[@if_3_end, @if_3_then]

; block @if_3_then
	; predecessors=[@while_2]
		1: pos
	; 40 pc
	cast t.17(i16), pos(u8)
		2: pos, t.17
	cast t.18(u8*), t.17(i16)
		2: pos, t.18
	addrof t.16, [buffer]
		3: pos, t.16, t.18
	add t.16, t.16, t.18
		2: pos, t.16
	const t.20, 20
		3: pos, t.16, t.20
	move t.19, t.20
		3: pos, t.16, t.19
	sub t.19, t.19, pos
		2: t.16, t.19
	call _, printStringLength [t.16, t.19]
	jump @printUint_ret
	; successors=[@printUint_ret]

; block @if_3_end
	; predecessors=[@while_2]
		2: number, pos
	; 1 pc
	jump @while_2
		2: number, pos
	; successors=[@while_2]

; block @printUint_ret
	; predecessors=[@if_3_then]
	; successors=[]


; CFG for function printIntLf
; block printIntLf
	; predecessors=[]
		1: number
	; 13 pc
	; 38:2 if number < 0
	const t.2, 0
		2: number, t.2
	lt t.1, number, t.2
		2: number, t.1
	branch t.1, false, @no_critical_edge_4
		1: number
	jump @if_4_then
		1: number
	; successors=[@no_critical_edge_4, @if_4_then]

; block @if_4_then
	; predecessors=[printIntLf]
		1: number
	; 11 pc
	const t.3, 45
		2: number, t.3
	call _, printChar [t.3]
		1: number
	neg number, number
		1: number
	jump @if_4_end
		1: number
	; successors=[@if_4_end]

; block @no_critical_edge_4
	; predecessors=[printIntLf]
		1: number
	; 1 pc
	jump @if_4_end
		1: number
	; successors=[@if_4_end]

; block @if_4_end
	; predecessors=[@no_critical_edge_4, @if_4_then]
		1: number
	; 9 pc
	call _, printUint [number]
	const t.4, 10
		1: t.4
	call _, printChar [t.4]
	jump @printIntLf_ret
	; successors=[@printIntLf_ret]

; block @printIntLf_ret
	; predecessors=[@if_4_end]
	; successors=[]


; CFG for function main
; block main
	; predecessors=[]
	; 46 pc
	; begin initialize global variables
	const space, 32
		1: space
	const next, 63
		2: next, space
	addrof ptrToSpace, space
		2: next, ptrToSpace
	; end initialize global variables
	call _, printIntLf [next]
		1: ptrToSpace
	cast t.1(i16), ptrToSpace(i16*)
		1: t.1
	const t.2, 2
		2: t.1, t.2
	move t.0, t.1
		2: t.0, t.2
	add t.0, t.0, t.2
		1: t.0
	cast ptrToSpace(i16*), t.0(i16)
		1: ptrToSpace
	load t.3, [ptrToSpace]
		1: t.3
	call _, printIntLf [t.3]
	jump @main_ret
	; successors=[@main_ret]

; block @main_ret
	; predecessors=[main]
	; successors=[]


