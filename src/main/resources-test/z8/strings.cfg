; CFG for function printString
; block printString
	; predecessors=[]
		1: str
	; 1 pc
	jump @while_1
		1: str
	; successors=[@while_1]

; block @if_2_end
	; predecessors=[@while_1]
		2: chr, str
	; 4 pc
	call _, printChar [chr]
		1: str
	jump @while_1
		1: str
	; successors=[@while_1]

; block @while_1
	; predecessors=[printString, @if_2_end]
		1: str
	; 19 pc
	load chr, [str]
		2: chr, str
	; 4:3 if chr == 0
	const t.3, 0
		3: chr, str, t.3
	equals t.2, chr, t.3
		3: chr, str, t.2
	branch t.2, false, @if_2_end
		2: chr, str
	jump @if_2_then
		2: chr, str
	; successors=[@if_2_end, @if_2_then]

; block @if_2_then
	; predecessors=[@while_1]
	; 1 pc
	jump @printString_ret
	; successors=[@printString_ret]

; block @printString_ret
	; predecessors=[@if_2_then]
	; successors=[]


; CFG for function printStringLength
; block printStringLength
	; predecessors=[]
		2: length, str
	; 1 pc
	jump @while_3
		2: length, str
	; successors=[@while_3]

; block @while_3_body
	; predecessors=[@while_3]
		2: length, str
	; 19 pc
	load chr, [str]
		3: chr, length, str
	call _, printChar [chr]
		2: length, str
	const t.5, 1
		3: length, str, t.5
	sub length, length, t.5
		2: length, str
	jump @while_3
		2: length, str
	; successors=[@while_3]

; block @while_3
	; predecessors=[printStringLength, @while_3_body]
		2: length, str
	; 13 pc
	const t.4, 0
		3: length, str, t.4
	gt t.3, length, t.4
		3: length, str, t.3
	branch t.3, false, @while_3_break
		2: length, str
	jump @while_3_body
		2: length, str
	; successors=[@while_3_break, @while_3_body]

; block @while_3_break
	; predecessors=[@while_3]
	; 1 pc
	jump @printStringLength_ret
	; successors=[@printStringLength_ret]

; block @printStringLength_ret
	; predecessors=[@while_3_break]
	; successors=[]


; CFG for function printUint
; block printUint
	; predecessors=[]
		1: number
	; 3 pc
	const pos, 20
		2: number, pos
	; 24:2 while true
	jump @while_4
		2: number, pos
	; successors=[@while_4]

; block @if_5_end
	; predecessors=[@while_4]
		2: number, pos
	; 1 pc
	jump @while_4
		2: number, pos
	; successors=[@while_4]

; block @while_4
	; predecessors=[printUint, @if_5_end]
		2: number, pos
	; 95 pc
	const t.5, 1
		3: number, pos, t.5
	sub pos, pos, t.5
		2: number, pos
	const t.7, 10
		3: number, pos, t.7
	move t.6, number
		4: number, pos, t.6, t.7
	mod t.6, t.6, t.7
		3: number, pos, t.6
	cast remainder(i64), t.6(i16)
		3: number, pos, remainder
	const t.8, 10
		4: number, pos, remainder, t.8
	div number, number, t.8
		3: number, pos, remainder
	cast t.9(u8), remainder(i64)
		3: number, pos, t.9
	const t.10, 48
		4: number, pos, t.10, t.9
	move digit, t.9
		4: digit, number, pos, t.10
	add digit, digit, t.10
		3: digit, number, pos
	cast t.12(i16), pos(u8)
		4: digit, number, pos, t.12
	cast t.13(u8*), t.12(i16)
		4: digit, number, pos, t.13
	addrof t.11, [buffer]
		5: digit, number, pos, t.11, t.13
	add t.11, t.11, t.13
		4: digit, number, pos, t.11
	store [t.11], digit
		2: number, pos
	; 30:3 if number == 0
	const t.15, 0
		3: number, pos, t.15
	equals t.14, number, t.15
		3: number, pos, t.14
	branch t.14, false, @if_5_end
		2: number, pos
	jump @if_5_then
		2: number, pos
	; successors=[@if_5_end, @if_5_then]

; block @if_5_then
	; predecessors=[@while_4]
		1: pos
	; 40 pc
	cast t.17(i16), pos(u8)
		2: pos, t.17
	cast t.18(u8*), t.17(i16)
		2: pos, t.18
	addrof t.16, [buffer]
		3: pos, t.16, t.18
	add t.16, t.16, t.18
		2: pos, t.16
	const t.20, 20
		3: pos, t.16, t.20
	move t.19, t.20
		3: pos, t.16, t.19
	sub t.19, t.19, pos
		2: t.16, t.19
	call _, printStringLength [t.16, t.19]
	jump @printUint_ret
	; successors=[@printUint_ret]

; block @printUint_ret
	; predecessors=[@if_5_then]
	; successors=[]


; CFG for function printIntLf
; block printIntLf
	; predecessors=[]
		1: number
	; 13 pc
	; 38:2 if number < 0
	const t.2, 0
		2: number, t.2
	lt t.1, number, t.2
		2: number, t.1
	branch t.1, false, @no_critical_edge_4
		1: number
	jump @if_6_then
		1: number
	; successors=[@no_critical_edge_4, @if_6_then]

; block @no_critical_edge_4
	; predecessors=[printIntLf]
		1: number
	; 1 pc
	jump @if_6_end
		1: number
	; successors=[@if_6_end]

; block @if_6_then
	; predecessors=[printIntLf]
		1: number
	; 11 pc
	const t.3, 45
		2: number, t.3
	call _, printChar [t.3]
		1: number
	neg number, number
		1: number
	jump @if_6_end
		1: number
	; successors=[@if_6_end]

; block @if_6_end
	; predecessors=[@no_critical_edge_4, @if_6_then]
		1: number
	; 9 pc
	call _, printUint [number]
	const t.4, 10
		1: t.4
	call _, printChar [t.4]
	jump @printIntLf_ret
	; successors=[@printIntLf_ret]

; block @printIntLf_ret
	; predecessors=[@if_6_end]
	; successors=[]


; CFG for function main
; block main
	; predecessors=[]
	; 44 pc
	; begin initialize global variables
	const text, [string-0]
		1: text
	; end initialize global variables
	call _, printString [text]
		1: text
	call _, printLength []
		1: text
	const t.2, 1
		2: t.2, text
	cast t.3(u8*), t.2(i16)
		2: t.3, text
	move second, text
		3: second, t.3, text
	add second, second, t.3
		2: second, text
	call _, printString [second]
		1: text
	load chr, [text]
		1: chr
	cast t.4(i16), chr(u8)
		1: t.4
	call _, printIntLf [t.4]
	jump @main_ret
	; successors=[@main_ret]

; block @main_ret
	; predecessors=[main]
	; successors=[]


; CFG for function printLength
; block printLength
	; predecessors=[]
		1: text
	; 8 pc
	const length, 0
		2: length, text
	move ptr, text
		2: length, ptr
	; 16:2 for *ptr != 0
	jump @for_7
		2: length, ptr
	; successors=[@for_7]

; block @for_7_body
	; predecessors=[@for_7]
		2: length, ptr
	; 34 pc
	const t.5, 1
		3: length, ptr, t.5
	add length, length, t.5
		2: length, ptr
	cast t.7(i16), ptr(u8*)
		2: length, t.7
	const t.8, 1
		3: length, t.7, t.8
	move t.6, t.7
		3: length, t.6, t.8
	add t.6, t.6, t.8
		2: length, t.6
	cast ptr(u8*), t.6(i16)
		2: length, ptr
	jump @for_7
		2: length, ptr
	; successors=[@for_7]

; block @for_7
	; predecessors=[printLength, @for_7_body]
		2: length, ptr
	; 19 pc
	load t.3, [ptr]
		3: length, ptr, t.3
	const t.4, 0
		4: length, ptr, t.3, t.4
	notequals t.2, t.3, t.4
		3: length, ptr, t.2
	branch t.2, false, @for_7_break
		2: length, ptr
	jump @for_7_body
		2: length, ptr
	; successors=[@for_7_break, @for_7_body]

; block @for_7_break
	; predecessors=[@for_7]
		1: length
	; 4 pc
	call _, printIntLf [length]
	jump @printLength_ret
	; successors=[@printLength_ret]

; block @printLength_ret
	; predecessors=[@for_7_break]
	; successors=[]


