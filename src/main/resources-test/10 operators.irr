@printString:
 Local variables
	arg 0: str (u8*/8)
	var 1: length (i64/8)
	; 6 pc
	call r0, strlen, [str]
	call _, printStringLength [str, r0]

@printChar:
 Local variables
	arg 0: chr (u8/1)
	var 1: t.1 (u8*/8)
	var 2: t.2 (i64/8)
	; 4 pc
	addrof r0, chr
	const r1, 1
	call _, printStringLength [r0, r1]

@printUint:
 Local variables
	arg 0: number (i64/8)
	var 1: buffer[] (u8*/20)
	var 2: pos (u8/1)
	var 3: remainder (i64/8)
	var 4: digit (u8/1)
	var 5: t.5 (u8/1)
	var 6: t.6 (i64/8)
	var 7: t.7 (i64/8)
	var 8: t.8 (u8/1)
	var 9: t.9 (u8/1)
	var 10: t.10 (u8*/8)
	var 11: t.11 (i64/8)
	var 12: t.12 (u8*/8)
	var 13: t.13 (bool/1)
	var 14: t.14 (i64/8)
	var 15: t.15 (u8*/8)
	var 16: t.16 (i64/8)
	var 17: t.17 (u8*/8)
	var 18: t.18 (i64/8)
	var 19: t.19 (u8/1)
	var 20: t.20 (u8/1)
	; 39 pc
	const r0, 20
	; 13:2 while true
	move pos, r0
@while_1:
	const r0, 1
	move r1, pos
	sub r0, r1, r0
	const r1, 10
	move r2, number
	move r3, r2
	mod r1, r3, r1
	const r3, 10
	div r2, r2, r3
	cast r1(u8), r1(i64)
	const r3, 48
	add r1, r1, r3
	cast r3(i64), r0(u8)
	cast r3(u8*), r3(i64)
	; Spill pos
	move pos, r0
	addrof r0, [buffer]
	add r0, r0, r3
	store [r0], r1
	; 19:3 if number == 0
	const r0, 0
	equals r0, r2, r0
	move number, r2
	branch r0, false, @while_1
	move r0, pos
	cast r1(i64), r0(u8)
	cast r1(u8*), r1(i64)
	addrof r2, [buffer]
	add r1, r2, r1
	const r2, 20
	sub r0, r2, r0
	cast r0(i64), r0(u8)
	call _, printStringLength [r1, r0]

@printIntLf:
 Local variables
	arg 0: number (i64/8)
	var 1: t.1 (bool/1)
	var 2: t.2 (i64/8)
	var 3: t.3 (u8/1)
	var 4: t.4 (u8/1)
	; 17 pc
	; 27:2 if number < 0
	const r0, 0
	move r1, number
	lt r0, r1, r0
	branch r0, false, @if_3_end
	const r0, 45
	call _, printChar [r0]
	move r0, number
	neg r0, r0
	move number, r0
@if_3_end:
	call _, printUint [number]
	const r0, 10
	call _, printChar [r0]

@strlen:
 Local variables
	arg 0: str (u8*/8)
	var 1: length (i64/8)
	var 2: t.2 (bool/1)
	var 3: t.3 (u8/1)
	var 4: t.4 (u8/1)
	var 5: t.5 (i64/8)
	var 6: t.6 (i64/8)
	var 7: t.7 (i64/8)
	var 8: t.8 (i64/8)
	; 31 pc
	const r0, 0
	; 37:2 for *str != 0
	move length, r0
@for_4:
	move r0, str
	load r1, [r0]
	const r2, 0
	notequals r1, r1, r2
	branch r1, false, @for_4_break
	const r0, 1
	move r1, length
	add r0, r1, r0
	move r1, str
	cast r1(i64), r1(u8*)
	const r2, 1
	add r1, r1, r2
	cast r1(u8*), r1(i64)
	move length, r0
	move str, r1
	jump @for_4
@for_4_break:
	; 40:9 return length
	move r0, length
	ret r0

@main:
 Local variables
	var 0: a (i16/2)
	var 1: b (i16/2)
	var 2: c (i16/2)
	var 3: d (i16/2)
	var 4: t (bool/1)
	var 5: f (bool/1)
	var 6: b10 (u8/1)
	var 7: b6 (u8/1)
	var 8: b1 (u8/1)
	var 9: t.9 (u8*/8)
	var 10: t.10 (i64/8)
	var 11: t.11 (i16/2)
	var 12: t.12 (i64/8)
	var 13: t.13 (i16/2)
	var 14: t.14 (i64/8)
	var 15: t.15 (i16/2)
	var 16: t.16 (i64/8)
	var 17: t.17 (i16/2)
	var 18: t.18 (u8*/8)
	var 19: t.19 (i64/8)
	var 20: t.20 (i16/2)
	var 21: t.21 (i64/8)
	var 22: t.22 (i16/2)
	var 23: t.23 (i64/8)
	var 24: t.24 (i16/2)
	var 25: t.25 (i64/8)
	var 26: t.26 (i16/2)
	var 27: t.27 (u8*/8)
	var 28: t.28 (i64/8)
	var 29: t.29 (i16/2)
	var 30: t.30 (i64/8)
	var 31: t.31 (i16/2)
	var 32: t.32 (i64/8)
	var 33: t.33 (i16/2)
	var 34: t.34 (i64/8)
	var 35: t.35 (i16/2)
	var 36: t.36 (u8*/8)
	var 37: t.37 (i64/8)
	var 38: t.38 (bool/1)
	var 39: t.39 (i64/8)
	var 40: t.40 (bool/1)
	var 41: t.41 (i64/8)
	var 42: t.42 (bool/1)
	var 43: t.43 (i64/8)
	var 44: t.44 (bool/1)
	var 45: t.45 (u8*/8)
	var 46: t.46 (i64/8)
	var 47: t.47 (bool/1)
	var 48: t.48 (i64/8)
	var 49: t.49 (bool/1)
	var 50: t.50 (i64/8)
	var 51: t.51 (bool/1)
	var 52: t.52 (i64/8)
	var 53: t.53 (bool/1)
	var 54: t.54 (u8*/8)
	var 55: t.55 (i64/8)
	var 56: t.56 (bool/1)
	var 57: t.57 (i64/8)
	var 58: t.58 (bool/1)
	var 59: t.59 (u8*/8)
	var 60: t.60 (i64/8)
	var 61: t.61 (u8/1)
	var 62: t.62 (u8/1)
	var 63: t.63 (i64/8)
	var 64: t.64 (bool/1)
	var 65: t.65 (i64/8)
	var 66: t.66 (bool/1)
	var 67: t.67 (i64/8)
	var 68: t.68 (i16/2)
	var 69: t.69 (i64/8)
	var 70: t.70 (i16/2)
	var 71: t.71 (i64/8)
	var 72: t.72 (u8/1)
	; 382 pc
	const r0, [string-0]
	call _, printString [r0]
	const r0, 0
	const r1, 1
	const r2, 2
	const r3, 3
	; Spill a
	move a, r0
	const r0, 1
	; Spill t
	move t, r0
	const r0, 0
	; Spill f
	move f, r0
	; Spill b
	move b, r1
	move r0, a
	move r1, r0
	and r1, r1, r0
	cast r1(i64), r1(i16)
	move c, r2
	move d, r3
	call _, printIntLf [r1]
	move r0, a
	move r1, r0
	move r2, b
	and r1, r1, r2
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	move r0, b
	move r1, r0
	move r2, a
	and r1, r1, r2
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	move r0, b
	move r1, r0
	and r1, r1, r0
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	const r0, [string-1]
	call _, printString [r0]
	move r0, a
	move r1, r0
	or r1, r1, r0
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	move r0, a
	move r1, r0
	move r2, b
	or r1, r1, r2
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	move r0, b
	move r1, r0
	move r2, a
	or r1, r1, r2
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	move r0, b
	move r1, r0
	or r1, r1, r0
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	const r0, [string-2]
	call _, printString [r0]
	move r0, a
	move r1, r0
	xor r1, r1, r0
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	move r0, a
	move r1, r0
	move r2, c
	xor r1, r1, r2
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	move r0, b
	move r1, r0
	move r2, a
	xor r1, r1, r2
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	move r0, b
	move r1, r0
	move r2, c
	xor r1, r1, r2
	cast r1(i64), r1(i16)
	call _, printIntLf [r1]
	const r0, [string-3]
	call _, printString [r0]
	; 26:15 logic and
	move r0, f
	move r1, r0
	move t.38, r1
	branch r1, false, @and_next_5
	move r0, f
	move r1, r0
	move t.38, r1
@and_next_5:
	move r0, t.38
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	; 27:15 logic and
	move r0, f
	move r1, r0
	move t.40, r1
	branch r1, false, @and_next_6
	move r0, t
	move r1, r0
	move t.40, r1
@and_next_6:
	move r0, t.40
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	; 28:15 logic and
	move r0, t
	move r1, r0
	move t.42, r1
	branch r1, false, @and_next_7
	move r0, f
	move r1, r0
	move t.42, r1
@and_next_7:
	move r0, t.42
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	; 29:15 logic and
	move r0, t
	move r1, r0
	move t.44, r1
	branch r1, false, @and_next_8
	move r0, t
	move r1, r0
	move t.44, r1
@and_next_8:
	move r0, t.44
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	const r0, [string-4]
	call _, printString [r0]
	; 31:15 logic or
	move r0, f
	move r1, r0
	move t.47, r1
	branch r1, true, @or_next_9
	move r0, f
	move r1, r0
	move t.47, r1
@or_next_9:
	move r0, t.47
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	; 32:15 logic or
	move r0, f
	move r1, r0
	move t.49, r1
	branch r1, true, @or_next_10
	move r0, t
	move r1, r0
	move t.49, r1
@or_next_10:
	move r0, t.49
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	; 33:15 logic or
	move r0, t
	move r1, r0
	move t.51, r1
	branch r1, true, @or_next_11
	move r0, f
	move r1, r0
	move t.51, r1
@or_next_11:
	move r0, t.51
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	; 34:15 logic or
	move r0, t
	move r1, r0
	move t.53, r1
	branch r1, true, @or_next_12
	move r0, t
	move r1, r0
	move t.53, r1
@or_next_12:
	move r0, t.53
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	const r0, [string-5]
	call _, printString [r0]
	move r0, f
	notlog r0, r0
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	move r0, t
	notlog r0, r0
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	const r0, [string-6]
	call _, printString [r0]
	const r0, 10
	const r1, 6
	const r2, 1
	and r0, r0, r1
	or r0, r0, r2
	cast r0(i64), r0(u8)
	move b1, r2
	call _, printIntLf [r0]
	; 43:20 logic or
	move r0, b
	move r1, c
	equals r2, r0, r1
	move t.64, r2
	branch r2, true, @or_next_13
	move r0, c
	move r1, d
	lt r2, r0, r1
	move t.64, r2
@or_next_13:
	move r0, t.64
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	; 44:20 logic and
	move r0, b
	move r1, c
	equals r2, r0, r1
	move t.66, r2
	branch r2, false, @and_next_14
	move r0, c
	move r1, d
	lt r0, r0, r1
	move t.66, r0
@and_next_14:
	move r0, t.66
	cast r0(i64), r0(bool)
	call _, printIntLf [r0]
	const r0, -1
	cast r0(i64), r0(i16)
	call _, printIntLf [r0]
	move r0, b
	neg r0, r0
	cast r0(i64), r0(i16)
	call _, printIntLf [r0]
	move r0, b1
	not r0, r0
	cast r0(i64), r0(u8)
	call _, printIntLf [r0]

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

String literals
	string lit 0 "Bit-&:\n\0"
	string lit 1 "\nBit-|:\n\0"
	string lit 2 "\nBit-^:\n\0"
	string lit 3 "\nLogic-&&:\n\0"
	string lit 4 "\nLogic-||:\n\0"
	string lit 5 "\nLogic-!:\n\0"
	string lit 6 "\nmisc:\n\0"
