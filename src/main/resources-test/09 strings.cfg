; CFG for function printString
; block printString
	; predecessors=[]
		1: str
	; 11 pc
	call length(1@function,i64), strlen, [str(0@argument,u8*)]
		2: length, str
	call _, printStringLength [str(0@argument,u8*), length(1@function,i64)]
	jump @printString_ret
	; successors=[@printString_ret]

; block @printString_ret
	; predecessors=[printString]
	; successors=[]


; CFG for function printChar
; block printChar
	; predecessors=[]
		1: chr
	; 13 pc
	addrof t.1(1@function,u8*), chr(0@argument,u8)
		1: t.1
	const t.2(2@function,i64), 1
		2: t.1, t.2
	call _, printStringLength [t.1(1@function,u8*), t.2(2@function,i64)]
	jump @printChar_ret
	; successors=[@printChar_ret]

; block @printChar_ret
	; predecessors=[printChar]
	; successors=[]


; CFG for function printUint
; block printUint
	; predecessors=[]
		1: number
	; 3 pc
	const pos(2@function,u8), 20
		2: number, pos
	; 13:2 while true
	jump @while_1
		2: number, pos
	; successors=[@while_1]

; block @while_1
	; predecessors=[printUint, @if_2_end]
		2: number, pos
	; 80 pc
	const t.5(5@function,u8), 1
		3: number, pos, t.5
	sub pos(2@function,u8), pos(2@function,u8), t.5(5@function,u8)
		2: number, pos
	const t.6(6@function,i64), 10
		3: number, pos, t.6
	mod remainder(3@function,i64), number(0@argument,i64), t.6(6@function,i64)
		3: number, pos, remainder
	const t.7(7@function,i64), 10
		4: number, pos, remainder, t.7
	div number(0@argument,i64), number(0@argument,i64), t.7(7@function,i64)
		3: number, pos, remainder
	cast t.8(8@function,u8), remainder(3@function,i64)
		3: number, pos, t.8
	const t.9(9@function,u8), 48
		4: number, pos, t.8, t.9
	add digit(4@function,u8), t.8(8@function,u8), t.9(9@function,u8)
		3: digit, number, pos
	cast t.11(11@function,i64), pos(2@function,u8)
		4: digit, number, pos, t.11
	cast t.12(12@function,u8*), t.11(11@function,i64)
		4: digit, number, pos, t.12
	addrof t.10(10@function,u8*), [buffer(1@function,u8*)]
		5: digit, number, pos, t.10, t.12
	add t.10(10@function,u8*), t.10(10@function,u8*), t.12(12@function,u8*)
		4: digit, number, pos, t.10
	store [t.10(10@function,u8*)], digit(4@function,u8)
		2: number, pos
	; 19:3 if number == 0
	const t.14(14@function,i64), 0
		3: number, pos, t.14
	equals t.13(13@function,bool), number(0@argument,i64), t.14(14@function,i64)
		3: number, pos, t.13
	branch t.13(13@function,bool), false, @if_2_end
		2: number, pos
	jump @if_2_then
		2: number, pos
	; successors=[@if_2_end, @if_2_then]

; block @if_2_then
	; predecessors=[@while_1]
		1: pos
	; 1 pc
	jump @while_1_break
		1: pos
	; successors=[@while_1_break]

; block @while_1_break
	; predecessors=[@if_2_then]
		1: pos
	; 40 pc
	cast t.16(16@function,i64), pos(2@function,u8)
		2: pos, t.16
	cast t.17(17@function,u8*), t.16(16@function,i64)
		2: pos, t.17
	addrof t.15(15@function,u8*), [buffer(1@function,u8*)]
		3: pos, t.15, t.17
	add t.15(15@function,u8*), t.15(15@function,u8*), t.17(17@function,u8*)
		2: pos, t.15
	const t.20(20@function,u8), 20
		3: pos, t.15, t.20
	sub t.19(19@function,u8), t.20(20@function,u8), pos(2@function,u8)
		2: t.15, t.19
	cast t.18(18@function,i64), t.19(19@function,u8)
		2: t.15, t.18
	call _, printStringLength [t.15(15@function,u8*), t.18(18@function,i64)]
	jump @printUint_ret
	; successors=[@printUint_ret]

; block @if_2_end
	; predecessors=[@while_1]
		2: number, pos
	; 1 pc
	jump @while_1
		2: number, pos
	; successors=[@while_1]

; block @printUint_ret
	; predecessors=[@while_1_break]
	; successors=[]


; CFG for function printIntLf
; block printIntLf
	; predecessors=[]
		1: number
	; 13 pc
	; 27:2 if number < 0
	const t.2(2@function,i64), 0
		2: number, t.2
	lt t.1(1@function,bool), number(0@argument,i64), t.2(2@function,i64)
		2: number, t.1
	branch t.1(1@function,bool), false, @no_critical_edge_4
		1: number
	jump @if_3_then
		1: number
	; successors=[@no_critical_edge_4, @if_3_then]

; block @if_3_then
	; predecessors=[printIntLf]
		1: number
	; 11 pc
	const t.3(3@function,u8), 45
		2: number, t.3
	call _, printChar [t.3(3@function,u8)]
		1: number
	neg number(0@argument,i64), number(0@argument,i64)
		1: number
	jump @if_3_end
		1: number
	; successors=[@if_3_end]

; block @no_critical_edge_4
	; predecessors=[printIntLf]
		1: number
	; 1 pc
	jump @if_3_end
		1: number
	; successors=[@if_3_end]

; block @if_3_end
	; predecessors=[@no_critical_edge_4, @if_3_then]
		1: number
	; 9 pc
	call _, printUint [number(0@argument,i64)]
	const t.4(4@function,u8), 10
		1: t.4
	call _, printChar [t.4(4@function,u8)]
	jump @printIntLf_ret
	; successors=[@printIntLf_ret]

; block @printIntLf_ret
	; predecessors=[@if_3_end]
	; successors=[]


; CFG for function strlen
; block strlen
	; predecessors=[]
		1: str
	; 3 pc
	const length(1@function,i64), 0
		2: length, str
	; 37:2 for *str != 0
	jump @for_4
		2: length, str
	; successors=[@for_4]

; block @for_4
	; predecessors=[strlen, @for_4_continue]
		2: length, str
	; 19 pc
	load t.3(3@function,u8), [str(0@argument,u8*)]
		3: length, str, t.3
	const t.4(4@function,u8), 0
		4: length, str, t.3, t.4
	notequals t.2(2@function,bool), t.3(3@function,u8), t.4(4@function,u8)
		3: length, str, t.2
	branch t.2(2@function,bool), false, @for_4_break
		2: length, str
	jump @for_4_body
		2: length, str
	; successors=[@for_4_break, @for_4_body]

; block @for_4_body
	; predecessors=[@for_4]
		2: length, str
	; 10 pc
	const t.5(5@function,i64), 1
		3: length, str, t.5
	add length(1@function,i64), length(1@function,i64), t.5(5@function,i64)
		2: length, str
	jump @for_4_continue
		2: length, str
	; successors=[@for_4_continue]

; block @for_4_continue
	; predecessors=[@for_4_body]
		2: length, str
	; 20 pc
	cast t.7(7@function,i64), str(0@argument,u8*)
		2: length, t.7
	const t.8(8@function,i64), 1
		3: length, t.7, t.8
	add t.6(6@function,i64), t.7(7@function,i64), t.8(8@function,i64)
		2: length, t.6
	cast str(0@argument,u8*), t.6(6@function,i64)
		2: length, str
	jump @for_4
		2: length, str
	; successors=[@for_4]

; block @for_4_break
	; predecessors=[@for_4]
		1: length
	; 4 pc
	; 40:9 return length
	ret length(1@function,i64)
	jump @strlen_ret
	; successors=[@strlen_ret]

; block @strlen_ret
	; predecessors=[@for_4_break]
	; successors=[]


; CFG for function main
; block main
	; predecessors=[]
	; 44 pc
	; begin initialize global variables
	const text(0@global,u8*), [string-0]
		1: text
	; end initialize global variables
	call _, printString [text(0@global,u8*)]
		1: text
	call _, printLength []
		1: text
	const t.2(2@function,i64), 1
		2: t.2, text
	cast t.3(3@function,u8*), t.2(2@function,i64)
		2: t.3, text
	copy second(0@function,u8*), text(0@global,u8*)
		3: second, t.3, text
	add second(0@function,u8*), second(0@function,u8*), t.3(3@function,u8*)
		2: second, text
	call _, printString [second(0@function,u8*)]
		1: text
	load chr(1@function,u8), [text(0@global,u8*)]
		1: chr
	cast t.4(4@function,i64), chr(1@function,u8)
		1: t.4
	call _, printIntLf [t.4(4@function,i64)]
	jump @main_ret
	; successors=[@main_ret]

; block @main_ret
	; predecessors=[main]
	; successors=[]


; CFG for function printLength
; block printLength
	; predecessors=[]
		1: text
	; 8 pc
	const length(0@function,i16), 0
		2: length, text
	copy ptr(1@function,u8*), text(0@global,u8*)
		2: length, ptr
	; 16:2 for *ptr != 0
	jump @for_5
		2: length, ptr
	; successors=[@for_5]

; block @for_5
	; predecessors=[printLength, @for_5_continue]
		2: length, ptr
	; 19 pc
	load t.3(3@function,u8), [ptr(1@function,u8*)]
		3: length, ptr, t.3
	const t.4(4@function,u8), 0
		4: length, ptr, t.3, t.4
	notequals t.2(2@function,bool), t.3(3@function,u8), t.4(4@function,u8)
		3: length, ptr, t.2
	branch t.2(2@function,bool), false, @for_5_break
		2: length, ptr
	jump @for_5_body
		2: length, ptr
	; successors=[@for_5_break, @for_5_body]

; block @for_5_body
	; predecessors=[@for_5]
		2: length, ptr
	; 10 pc
	const t.5(5@function,i16), 1
		3: length, ptr, t.5
	add length(0@function,i16), length(0@function,i16), t.5(5@function,i16)
		2: length, ptr
	jump @for_5_continue
		2: length, ptr
	; successors=[@for_5_continue]

; block @for_5_continue
	; predecessors=[@for_5_body]
		2: length, ptr
	; 20 pc
	cast t.7(7@function,i64), ptr(1@function,u8*)
		2: length, t.7
	const t.8(8@function,i64), 1
		3: length, t.7, t.8
	add t.6(6@function,i64), t.7(7@function,i64), t.8(8@function,i64)
		2: length, t.6
	cast ptr(1@function,u8*), t.6(6@function,i64)
		2: length, ptr
	jump @for_5
		2: length, ptr
	; successors=[@for_5]

; block @for_5_break
	; predecessors=[@for_5]
		1: length
	; 9 pc
	cast t.9(9@function,i64), length(0@function,i16)
		1: t.9
	call _, printIntLf [t.9(9@function,i64)]
	jump @printLength_ret
	; successors=[@printLength_ret]

; block @printLength_ret
	; predecessors=[@for_5_break]
	; successors=[]


