@printString:
 Local variables
	arg 0: str (u8*/8)
	; 6 pc
	call r0, strlen, [str]
	call _, printStringLength [str, r0]

@printChar:
 Local variables
	arg 0: chr (u8/1)
	; 4 pc
	addrof r0, chr
	const r1, 1
	call _, printStringLength [r0, r1]

@printUint:
 Local variables
	arg 0: number (i64/8)
	var 1: buffer[] (u8*/20)
	var 2: pos (u8/1)
	; 39 pc
	const r0, 20
	; 13:2 while true
	move pos, r0
@while_1:
	const r0, 1
	move r1, pos
	sub r0, r1, r0
	const r1, 10
	move r2, number
	move r3, r2
	mod r1, r3, r1
	const r3, 10
	div r2, r2, r3
	cast r1(u8), r1(i64)
	const r3, 48
	add r1, r1, r3
	cast r3(i64), r0(u8)
	cast r3(u8*), r3(i64)
	; Spill pos
	move pos, r0
	addrof r0, [buffer]
	add r0, r0, r3
	store [r0], r1
	; 19:3 if number == 0
	const r0, 0
	equals r0, r2, r0
	move number, r2
	branch r0, false, @while_1
	move r0, pos
	cast r1(i64), r0(u8)
	cast r1(u8*), r1(i64)
	addrof r2, [buffer]
	add r1, r2, r1
	const r2, 20
	sub r0, r2, r0
	cast r0(i64), r0(u8)
	call _, printStringLength [r1, r0]

@printIntLf:
 Local variables
	arg 0: number (i64/8)
	; 17 pc
	; 27:2 if number < 0
	const r0, 0
	move r1, number
	lt r0, r1, r0
	branch r0, false, @if_3_end
	const r0, 45
	call _, printChar [r0]
	move r0, number
	neg r0, r0
	move number, r0
@if_3_end:
	call _, printUint [number]
	const r0, 10
	call _, printChar [r0]

@strlen:
 Local variables
	arg 0: str (u8*/8)
	var 1: length (i64/8)
	; 31 pc
	const r0, 0
	; 37:2 for *str != 0
	move length, r0
@for_4:
	move r0, str
	load r1, [r0]
	const r2, 0
	notequals r1, r1, r2
	branch r1, false, @for_4_break
	const r0, 1
	move r1, length
	add r0, r1, r0
	move r1, str
	cast r1(i64), r1(u8*)
	const r2, 1
	add r1, r1, r2
	cast r1(u8*), r1(i64)
	move length, r0
	move str, r1
	jump @for_4
@for_4_break:
	; 40:9 return length
	move r0, length
	ret r0

@main:
	; 20 pc
	; begin initialize global variables
	const r0, [string-0]
	; end initialize global variables
	move text, r0
	call _, printString [r0]
	call _, printLength []
	const r0, 1
	cast r0(u8*), r0(i64)
	move r1, text
	move r2, r1
	add r0, r2, r0
	call _, printString [r0]
	move r0, text
	load r0, [r0]
	cast r0(i64), r0(u8)
	call _, printIntLf [r0]

@printLength:
 Local variables
	var 0: length (i16/2)
	var 1: ptr (u8*/8)
	; 38 pc
	const r0, 0
	move r1, text
	; 16:2 for *ptr != 0
	move length, r0
	move ptr, r1
@for_5:
	move r0, ptr
	load r1, [r0]
	const r2, 0
	notequals r1, r1, r2
	branch r1, false, @for_5_break
	const r0, 1
	move r1, length
	add r0, r1, r0
	move r1, ptr
	cast r1(i64), r1(u8*)
	const r2, 1
	add r1, r1, r2
	cast r1(u8*), r1(i64)
	move length, r0
	move ptr, r1
	jump @for_5
@for_5_break:
	move r0, length
	cast r0(i64), r0(i16)
	call _, printIntLf [r0]

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

Global variables
	0: text (u8*/8)

String literals
	string lit 0 "hello world\n\0"
