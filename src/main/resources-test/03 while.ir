@printString:
 Local variables
   arg 0: str
   var 1: length
   var 2: $.2
   var 3: $.3
        ; 2:22 read var str(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 2:22 var $.2(%2)
        addrOf r0, [2@function]
        ; 2:22 assign
        store [r0], r1 (8)
        ; 2:15 call strlen
        call r0, @strlen (2)
        ; 2:2 var length(%1)
        addrOf r1, [1@function]
        ; 2:2 assign
        store [r1], r0 (8)
        ; 3:20 read var str(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 3:20 var $.3(%3)
        addrOf r0, [3@function]
        ; 3:20 assign
        store [r0], r1 (8)
        ; 3:2 call printStringLength
        call @printStringLength (3, 1)
@printString_ret:

@printChar:
 Local variables
   arg 0: chr
   var 1: $.1
   var 2: $.2
        ; 7:21 var chr(%0)
        addrOf r0, [0@argument]
        ; 7:20 var $.1(%1)
        addrOf r1, [1@function]
        ; 7:20 assign
        store [r1], r0 (8)
        ; 7:26 int lit 1
        ld r0, 1 (8)
        ; 7:26 var $.2(%2)
        addrOf r1, [2@function]
        ; 7:26 assign
        store [r1], r0 (8)
        ; 7:2 call printStringLength
        call @printStringLength (1, 2)
@printChar_ret:

@printUint:
 Local variables
   arg 0: number
   var 1: buffer
   var 2: pos
   var 3: remainder
   var 4: digit
   var 5: $.5
   var 6: $.6
        ; 12:11 int lit 20
        ld r0, 20 (1)
        ; 12:2 var pos(%2)
        addrOf r1, [2@function]
        ; 12:2 assign
        store [r1], r0 (1)
        ; 13:2 while true
@while_1:
        ; 13:9 bool lit true
        ld r0, 1 (1)
        branch-false r0, @while_1_break
        ; while body
        ; 14:9 read var pos(%2)
        addrOf r0, [2@function]
        load r1, [r0] (1)
        ; 14:15 int lit 1
        ld r0, 1 (1)
        ; 14:13 sub
        sub r1, r0 (1)
        ; 14:3 var pos(%2)
        addrOf r0, [2@function]
        ; 14:7 assign
        store [r0], r1 (1)
        ; 15:19 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 15:28 int lit 10
        ld r0, 10 (8)
        ; 15:26 mod
        mod r1, r0 (8)
        ; 15:3 var remainder(%3)
        addrOf r0, [3@function]
        ; 15:3 assign
        store [r0], r1 (8)
        ; 16:12 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 16:21 int lit 10
        ld r0, 10 (8)
        ; 16:19 divide
        div r1, r0 (8)
        ; 16:3 var number(%0)
        addrOf r0, [0@argument]
        ; 16:10 assign
        store [r0], r1 (8)
        ; 17:18 read var remainder(%3)
        addrOf r0, [3@function]
        load r1, [r0] (8)
        ; 17:30 int lit 48
        ld r0, 48 (1)
        ; 17:28 add
        add r1, r0 (1)
        ; 17:3 var digit(%4)
        addrOf r0, [4@function]
        ; 17:3 assign
        store [r0], r1 (1)
        ; 18:17 read var digit(%4)
        addrOf r0, [4@function]
        load r1, [r0] (1)
        ; 18:10 array buffer(%1)
        ; 18:10 read var pos(%2)
        addrOf r0, [2@function]
        load r2, [r0] (1)
        cast r0 (i64), r2 (u8)
        mul r0, 1
        addrOf r2, [1@function]
        add r2, r0 (0)
        ; 18:15 assign
        store [r2], r1 (1)
        ; 19:3 if number == 0
        ; 19:7 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 19:17 int lit 0
        ld r0, 0 (8)
        ; 19:14 ==
        cmp r2, (r1 == r0) (i64)
        branch-false r2, @else_2
        ; then
        jmp @while_1_break
        jmp @endif_2
        ; else
@else_2:
@endif_2:
        jmp @while_1
@while_1_break:
        ; 23:28 array buffer(%1)
        ; 23:28 read var pos(%2)
        addrOf r0, [2@function]
        load r1, [r0] (1)
        cast r0 (i64), r1 (u8)
        mul r0, 1
        addrOf r1, [1@function]
        add r1, r0 (0)
        ; 23:20 var $.5(%5)
        addrOf r0, [5@function]
        ; 23:20 assign
        store [r0], r1 (8)
        ; 23:34 int lit 20
        ld r0, 20 (1)
        ; 23:39 read var pos(%2)
        addrOf r1, [2@function]
        load r2, [r1] (1)
        ; 23:37 sub
        sub r0, r2 (1)
        cast r1 (i64), r0 (u8)
        ; 23:37 var $.6(%6)
        addrOf r0, [6@function]
        ; 23:37 assign
        store [r0], r1 (8)
        ; 23:2 call printStringLength
        call @printStringLength (5, 6)
@printUint_ret:

@printIntLf:
 Local variables
   arg 0: number
   var 1: $.1
   var 2: $.2
   var 3: $.3
        ; 27:2 if number < 0
        ; 27:6 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 27:15 int lit 0
        ld r0, 0 (8)
        ; 27:13 <
        cmp r2, (r1 < r0) (i64)
        branch-false r2, @else_3
        ; then
        ; 28:13 int lit 45
        ld r0, 45 (1)
        ; 28:13 var $.1(%1)
        addrOf r1, [1@function]
        ; 28:13 assign
        store [r1], r0 (1)
        ; 28:3 call printChar
        call @printChar (1)
        ; 29:13 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 29:12 neg
        neg r1 (8)
        ; 29:3 var number(%0)
        addrOf r0, [0@argument]
        ; 29:10 assign
        store [r0], r1 (8)
        jmp @endif_3
        ; else
@else_3:
@endif_3:
        ; 31:12 read var number(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 31:12 var $.2(%2)
        addrOf r0, [2@function]
        ; 31:12 assign
        store [r0], r1 (8)
        ; 31:2 call printUint
        call @printUint (2)
        ; 32:12 int lit 10
        ld r0, 10 (1)
        ; 32:12 var $.3(%3)
        addrOf r1, [3@function]
        ; 32:12 assign
        store [r1], r0 (1)
        ; 32:2 call printChar
        call @printChar (3)
@printIntLf_ret:

@strlen:
 Local variables
   arg 0: str
   var 1: length
        ; 36:15 int lit 0
        ld r0, 0 (8)
        ; 36:2 var length(%1)
        addrOf r1, [1@function]
        ; 36:2 assign
        store [r1], r0 (8)
        ; 37:2 for *str != 0
@for_4:
        ; 37:10 read var str(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 37:9 deref
        load r0, [r1] (1)
        ; 37:17 int lit 0
        ld r1, 0 (1)
        ; 37:14 !=
        cmp r2, (r0 != r1) (u8)
        branch-false r2, @for_4_break
        ; for body
        ; 38:12 read var length(%1)
        addrOf r0, [1@function]
        load r1, [r0] (8)
        ; 38:21 int lit 1
        ld r0, 1 (8)
        ; 38:19 add
        add r1, r0 (8)
        ; 38:3 var length(%1)
        addrOf r0, [1@function]
        ; 38:10 assign
        store [r0], r1 (8)
@for_4_continue:
        ; 37:26 read var str(%0)
        addrOf r0, [0@argument]
        load r1, [r0] (8)
        ; 37:32 int lit 1
        ld r0, 1 (8)
        ; 37:30 add
        add r1, r0 (8)
        ; 37:20 var str(%0)
        addrOf r0, [0@argument]
        ; 37:24 assign
        store [r0], r1 (8)
        jmp @for_4
@for_4_break:
        ; 40:9 return length
        ; 40:9 read var length(%1)
        addrOf r0, [1@function]
        load r1, [r0] (8)
        return r1 (8)
        jmp @strlen_ret
@strlen_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	;add     rsp, 20h
	
	mov     rsp, rdi
	ret

@main:
 Local variables
   var 0: i
   var 1: $.1
   var 2: $.2
        ; 4:9 int lit 5
        ld r0, 5 (1)
        ; 4:2 var i(%0)
        addrOf r1, [0@function]
        ; 4:2 assign
        store [r1], r0 (1)
        ; 5:2 while i > 0
@while_5:
        ; 5:9 read var i(%0)
        addrOf r0, [0@function]
        load r1, [r0] (1)
        ; 5:13 int lit 0
        ld r0, 0 (1)
        ; 5:11 >
        cmp r2, (r1 > r0) (u8)
        branch-false r2, @while_5_break
        ; while body
        ; 6:14 read var i(%0)
        addrOf r0, [0@function]
        load r1, [r0] (1)
        cast r0 (i64), r1 (u8)
        ; 6:14 var $.1(%1)
        addrOf r1, [1@function]
        ; 6:14 assign
        store [r1], r0 (8)
        ; 6:3 call printIntLf
        call @printIntLf (1)
        ; 7:7 read var i(%0)
        addrOf r0, [0@function]
        load r1, [r0] (1)
        ; 7:11 int lit 1
        ld r0, 1 (1)
        ; 7:9 sub
        sub r1, r0 (1)
        ; 7:3 var i(%0)
        addrOf r0, [0@function]
        ; 7:5 assign
        store [r0], r1 (1)
        jmp @while_5
@while_5_break:
        ; 10:2 while true
@while_6:
        ; 10:9 bool lit true
        ld r0, 1 (1)
        branch-false r0, @while_6_break
        ; while body
        ; 11:14 read var i(%0)
        addrOf r0, [0@function]
        load r1, [r0] (1)
        cast r0 (i64), r1 (u8)
        ; 11:14 var $.2(%2)
        addrOf r1, [2@function]
        ; 11:14 assign
        store [r1], r0 (8)
        ; 11:3 call printIntLf
        call @printIntLf (2)
        ; 12:7 read var i(%0)
        addrOf r0, [0@function]
        load r1, [r0] (1)
        ; 12:11 int lit 1
        ld r0, 1 (1)
        ; 12:9 add
        add r1, r0 (1)
        ; 12:3 var i(%0)
        addrOf r0, [0@function]
        ; 12:5 assign
        store [r0], r1 (1)
        ; 13:3 if i < 5
        ; 13:7 read var i(%0)
        addrOf r0, [0@function]
        load r1, [r0] (1)
        ; 13:11 int lit 5
        ld r0, 5 (1)
        ; 13:9 <
        cmp r2, (r1 < r0) (u8)
        branch-false r2, @else_7
        ; then
        jmp @while_6
        jmp @endif_7
        ; else
@else_7:
@endif_7:
        jmp @while_6_break
        jmp @while_6
@while_6_break:
        ; 19:2 while true
@while_8:
        ; 19:9 bool lit true
        ld r0, 1 (1)
        branch-false r0, @while_8_break
        ; while body
        ; return
        jmp @main_ret
        jmp @while_8
@while_8_break:
@main_ret:

