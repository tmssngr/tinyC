; CFG for function printString
; block printString
	; predecessors=[]
		1: str
	; 11 pc
	call length(1@function,i64), strlen, [str(0@argument,u8*)]
		2: length, str
	call _, printStringLength [str(0@argument,u8*), length(1@function,i64)]
	jump @printString_ret
	; successors=[@printString_ret]

; block @printString_ret
	; predecessors=[printString]
	; successors=[]


; CFG for function printChar
; block printChar
	; predecessors=[]
		1: chr
	; 13 pc
	addrof t.1(1@function,u8*), chr(0@argument,u8)
		1: t.1
	const t.2(2@function,i64), 1
		2: t.1, t.2
	call _, printStringLength [t.1(1@function,u8*), t.2(2@function,i64)]
	jump @printChar_ret
	; successors=[@printChar_ret]

; block @printChar_ret
	; predecessors=[printChar]
	; successors=[]


; CFG for function printUint
; block printUint
	; predecessors=[]
		1: number
	; 3 pc
	const pos(2@function,u8), 20
		2: number, pos
	; 13:2 while true
	jump @while_1
		2: number, pos
	; successors=[@while_1]

; block @while_1
	; predecessors=[printUint, @if_2_end]
		2: number, pos
	; 80 pc
	const t.5(5@function,u8), 1
		3: number, pos, t.5
	sub pos(2@function,u8), pos(2@function,u8), t.5(5@function,u8)
		2: number, pos
	const t.6(6@function,i64), 10
		3: number, pos, t.6
	mod remainder(3@function,i64), number(0@argument,i64), t.6(6@function,i64)
		3: number, pos, remainder
	const t.7(7@function,i64), 10
		4: number, pos, remainder, t.7
	div number(0@argument,i64), number(0@argument,i64), t.7(7@function,i64)
		3: number, pos, remainder
	cast t.8(8@function,u8), remainder(3@function,i64)
		3: number, pos, t.8
	const t.9(9@function,u8), 48
		4: number, pos, t.8, t.9
	add digit(4@function,u8), t.8(8@function,u8), t.9(9@function,u8)
		3: digit, number, pos
	cast t.11(11@function,i64), pos(2@function,u8)
		4: digit, number, pos, t.11
	cast t.12(12@function,u8*), t.11(11@function,i64)
		4: digit, number, pos, t.12
	addrof t.10(10@function,u8*), [buffer(1@function,u8*)]
		5: digit, number, pos, t.10, t.12
	add t.10(10@function,u8*), t.10(10@function,u8*), t.12(12@function,u8*)
		4: digit, number, pos, t.10
	store [t.10(10@function,u8*)], digit(4@function,u8)
		2: number, pos
	; 19:3 if number == 0
	const t.14(14@function,i64), 0
		3: number, pos, t.14
	equals t.13(13@function,bool), number(0@argument,i64), t.14(14@function,i64)
		3: number, pos, t.13
	branch t.13(13@function,bool), false, @if_2_end
		2: number, pos
	jump @if_2_then
		2: number, pos
	; successors=[@if_2_end, @if_2_then]

; block @if_2_then
	; predecessors=[@while_1]
		1: pos
	; 1 pc
	jump @while_1_break
		1: pos
	; successors=[@while_1_break]

; block @while_1_break
	; predecessors=[@if_2_then]
		1: pos
	; 40 pc
	cast t.16(16@function,i64), pos(2@function,u8)
		2: pos, t.16
	cast t.17(17@function,u8*), t.16(16@function,i64)
		2: pos, t.17
	addrof t.15(15@function,u8*), [buffer(1@function,u8*)]
		3: pos, t.15, t.17
	add t.15(15@function,u8*), t.15(15@function,u8*), t.17(17@function,u8*)
		2: pos, t.15
	const t.20(20@function,u8), 20
		3: pos, t.15, t.20
	sub t.19(19@function,u8), t.20(20@function,u8), pos(2@function,u8)
		2: t.15, t.19
	cast t.18(18@function,i64), t.19(19@function,u8)
		2: t.15, t.18
	call _, printStringLength [t.15(15@function,u8*), t.18(18@function,i64)]
	jump @printUint_ret
	; successors=[@printUint_ret]

; block @if_2_end
	; predecessors=[@while_1]
		2: number, pos
	; 1 pc
	jump @while_1
		2: number, pos
	; successors=[@while_1]

; block @printUint_ret
	; predecessors=[@while_1_break]
	; successors=[]


; CFG for function strlen
; block strlen
	; predecessors=[]
		1: str
	; 3 pc
	const length(1@function,i64), 0
		2: length, str
	; 37:2 for *str != 0
	jump @for_3
		2: length, str
	; successors=[@for_3]

; block @for_3
	; predecessors=[strlen, @for_3_continue]
		2: length, str
	; 19 pc
	load t.3(3@function,u8), [str(0@argument,u8*)]
		3: length, str, t.3
	const t.4(4@function,u8), 0
		4: length, str, t.3, t.4
	notequals t.2(2@function,bool), t.3(3@function,u8), t.4(4@function,u8)
		3: length, str, t.2
	branch t.2(2@function,bool), false, @for_3_break
		2: length, str
	jump @for_3_body
		2: length, str
	; successors=[@for_3_break, @for_3_body]

; block @for_3_body
	; predecessors=[@for_3]
		2: length, str
	; 10 pc
	const t.5(5@function,i64), 1
		3: length, str, t.5
	add length(1@function,i64), length(1@function,i64), t.5(5@function,i64)
		2: length, str
	jump @for_3_continue
		2: length, str
	; successors=[@for_3_continue]

; block @for_3_continue
	; predecessors=[@for_3_body]
		2: length, str
	; 20 pc
	cast t.7(7@function,i64), str(0@argument,u8*)
		2: length, t.7
	const t.8(8@function,i64), 1
		3: length, t.7, t.8
	add t.6(6@function,i64), t.7(7@function,i64), t.8(8@function,i64)
		2: length, t.6
	cast str(0@argument,u8*), t.6(6@function,i64)
		2: length, str
	jump @for_3
		2: length, str
	; successors=[@for_3]

; block @for_3_break
	; predecessors=[@for_3]
		1: length
	; 4 pc
	; 40:9 return length
	ret length(1@function,i64)
	jump @strlen_ret
	; successors=[@strlen_ret]

; block @strlen_ret
	; predecessors=[@for_3_break]
	; successors=[]


; CFG for function initRandom
; block initRandom
	; predecessors=[]
		1: salt
	; 6 pc
	copy __random__(0@global,i32), salt(0@argument,i32)
	jump @initRandom_ret
	; successors=[@initRandom_ret]

; block @initRandom_ret
	; predecessors=[initRandom]
	; successors=[]


; CFG for function random
; block random
	; predecessors=[]
		1: __random__
	; 111 pc
	copy r(0@function,i32), __random__(0@global,i32)
		1: r
	const t.6(6@function,i32), 524287
		2: r, t.6
	and t.5(5@function,i32), r(0@function,i32), t.6(6@function,i32)
		2: r, t.5
	const t.7(7@function,i32), 48271
		3: r, t.5, t.7
	mul b(1@function,i32), t.5(5@function,i32), t.7(7@function,i32)
		2: b, r
	const t.9(9@function,i32), 15
		3: b, r, t.9
	shiftright t.8(8@function,i32), r(0@function,i32), t.9(9@function,i32)
		2: b, t.8
	const t.10(10@function,i32), 48271
		3: b, t.10, t.8
	mul c(2@function,i32), t.8(8@function,i32), t.10(10@function,i32)
		2: b, c
	const t.12(12@function,i32), 65535
		3: b, c, t.12
	and t.11(11@function,i32), c(2@function,i32), t.12(12@function,i32)
		3: b, c, t.11
	const t.13(13@function,i32), 15
		4: b, c, t.11, t.13
	shiftleft d(3@function,i32), t.11(11@function,i32), t.13(13@function,i32)
		3: b, c, d
	const t.16(16@function,i32), 16
		4: b, c, d, t.16
	shiftright t.15(15@function,i32), c(2@function,i32), t.16(16@function,i32)
		3: b, d, t.15
	add t.14(14@function,i32), t.15(15@function,i32), b(1@function,i32)
		2: d, t.14
	add e(4@function,i32), t.14(14@function,i32), d(3@function,i32)
		1: e
	const t.18(18@function,i32), 2147483647
		2: e, t.18
	and t.17(17@function,i32), e(4@function,i32), t.18(18@function,i32)
		2: e, t.17
	const t.20(20@function,i32), 31
		3: e, t.17, t.20
	shiftright t.19(19@function,i32), e(4@function,i32), t.20(20@function,i32)
		2: t.17, t.19
	add __random__(0@global,i32), t.17(17@function,i32), t.19(19@function,i32)
		1: __random__
	; 127:9 return __random__
	ret __random__(0@global,i32)
	jump @random_ret
	; successors=[@random_ret]

; block @random_ret
	; predecessors=[random]
	; successors=[]


; CFG for function rowColumnToCell
; block rowColumnToCell
	; predecessors=[]
		2: column, row
	; 20 pc
	; 15:21 return row * 40 + column
	const t.4(4@function,i16), 40
		3: column, row, t.4
	mul t.3(3@function,i16), row(0@argument,i16), t.4(4@function,i16)
		2: column, t.3
	add t.2(2@function,i16), t.3(3@function,i16), column(1@argument,i16)
		1: t.2
	ret t.2(2@function,i16)
	jump @rowColumnToCell_ret
	; successors=[@rowColumnToCell_ret]

; block @rowColumnToCell_ret
	; predecessors=[rowColumnToCell]
	; successors=[]


; CFG for function getCell
; block getCell
	; predecessors=[]
		2: column, row
	; 37 pc
	; 19:15 return [...]
	call t.5(5@function,i16), rowColumnToCell, [row(0@argument,i16), column(1@argument,i16)]
		1: t.5
	cast t.4(4@function,i64), t.5(5@function,i16)
		1: t.4
	cast t.6(6@function,u8*), t.4(4@function,i64)
		1: t.6
	addrof t.3(3@function,u8*), [field(1@global,u8*)]
		2: t.3, t.6
	add t.3(3@function,u8*), t.3(3@function,u8*), t.6(6@function,u8*)
		1: t.3
	load t.2(2@function,u8), [t.3(3@function,u8*)]
		1: t.2
	ret t.2(2@function,u8)
	jump @getCell_ret
	; successors=[@getCell_ret]

; block @getCell_ret
	; predecessors=[getCell]
	; successors=[]


; CFG for function isBomb
; block isBomb
	; predecessors=[]
		1: cell
	; 22 pc
	; 23:27 return cell & 1 != 0
	const t.3(3@function,u8), 1
		2: cell, t.3
	and t.2(2@function,u8), cell(0@argument,u8), t.3(3@function,u8)
		1: t.2
	const t.4(4@function,u8), 0
		2: t.2, t.4
	notequals t.1(1@function,bool), t.2(2@function,u8), t.4(4@function,u8)
		1: t.1
	ret t.1(1@function,bool)
	jump @isBomb_ret
	; successors=[@isBomb_ret]

; block @isBomb_ret
	; predecessors=[isBomb]
	; successors=[]


; CFG for function isOpen
; block isOpen
	; predecessors=[]
		1: cell
	; 22 pc
	; 27:27 return cell & 2 != 0
	const t.3(3@function,u8), 2
		2: cell, t.3
	and t.2(2@function,u8), cell(0@argument,u8), t.3(3@function,u8)
		1: t.2
	const t.4(4@function,u8), 0
		2: t.2, t.4
	notequals t.1(1@function,bool), t.2(2@function,u8), t.4(4@function,u8)
		1: t.1
	ret t.1(1@function,bool)
	jump @isOpen_ret
	; successors=[@isOpen_ret]

; block @isOpen_ret
	; predecessors=[isOpen]
	; successors=[]


; CFG for function isFlag
; block isFlag
	; predecessors=[]
		1: cell
	; 22 pc
	; 31:27 return cell & 4 != 0
	const t.3(3@function,u8), 4
		2: cell, t.3
	and t.2(2@function,u8), cell(0@argument,u8), t.3(3@function,u8)
		1: t.2
	const t.4(4@function,u8), 0
		2: t.2, t.4
	notequals t.1(1@function,bool), t.2(2@function,u8), t.4(4@function,u8)
		1: t.1
	ret t.1(1@function,bool)
	jump @isFlag_ret
	; successors=[@isFlag_ret]

; block @isFlag_ret
	; predecessors=[isFlag]
	; successors=[]


; CFG for function checkCellBounds
; block checkCellBounds
	; predecessors=[]
		2: column, row
	; 13 pc
	; 36:21 return row > 0 && row < 20 && column > 0 && column < 40
	; 36:21 logic and
	; 36:6 logic and
	; 35:21 logic and
	const t.3(3@function,i16), 0
		3: column, row, t.3
	gt t.2(2@function,bool), row(0@argument,i16), t.3(3@function,i16)
		3: column, row, t.2
	branch t.2(2@function,bool), false, @no_critical_edge_8
		3: column, row, t.2
	jump @and_2nd_6
		3: column, row, t.2
	; successors=[@no_critical_edge_8, @and_2nd_6]

; block @and_2nd_6
	; predecessors=[checkCellBounds]
		2: column, row
	; 10 pc
	const t.4(4@function,i16), 20
		3: column, row, t.4
	lt t.2(2@function,bool), row(0@argument,i16), t.4(4@function,i16)
		2: column, t.2
	jump @and_next_6
		2: column, t.2
	; successors=[@and_next_6]

; block @no_critical_edge_8
	; predecessors=[checkCellBounds]
		2: column, t.2
	; 1 pc
	jump @and_next_6
		2: column, t.2
	; successors=[@and_next_6]

; block @and_next_6
	; predecessors=[@no_critical_edge_8, @and_2nd_6]
		2: column, t.2
	; 4 pc
	branch t.2(2@function,bool), false, @no_critical_edge_9
		2: column, t.2
	jump @and_2nd_5
		2: column, t.2
	; successors=[@no_critical_edge_9, @and_2nd_5]

; block @and_2nd_5
	; predecessors=[@and_next_6]
		1: column
	; 10 pc
	const t.5(5@function,i16), 0
		2: column, t.5
	gt t.2(2@function,bool), column(1@argument,i16), t.5(5@function,i16)
		2: column, t.2
	jump @and_next_5
		2: column, t.2
	; successors=[@and_next_5]

; block @no_critical_edge_9
	; predecessors=[@and_next_6]
		2: column, t.2
	; 1 pc
	jump @and_next_5
		2: column, t.2
	; successors=[@and_next_5]

; block @and_next_5
	; predecessors=[@no_critical_edge_9, @and_2nd_5]
		2: column, t.2
	; 4 pc
	branch t.2(2@function,bool), false, @no_critical_edge_10
		2: column, t.2
	jump @and_2nd_4
		2: column, t.2
	; successors=[@no_critical_edge_10, @and_2nd_4]

; block @and_2nd_4
	; predecessors=[@and_next_5]
		1: column
	; 10 pc
	const t.6(6@function,i16), 40
		2: column, t.6
	lt t.2(2@function,bool), column(1@argument,i16), t.6(6@function,i16)
		1: t.2
	jump @and_next_4
		1: t.2
	; successors=[@and_next_4]

; block @no_critical_edge_10
	; predecessors=[@and_next_5]
		1: t.2
	; 1 pc
	jump @and_next_4
		1: t.2
	; successors=[@and_next_4]

; block @and_next_4
	; predecessors=[@no_critical_edge_10, @and_2nd_4]
		1: t.2
	; 4 pc
	ret t.2(2@function,bool)
	jump @checkCellBounds_ret
	; successors=[@checkCellBounds_ret]

; block @checkCellBounds_ret
	; predecessors=[@and_next_4]
	; successors=[]


; CFG for function setCell
; block setCell
	; predecessors=[]
		3: cell, column, row
	; 34 pc
	call t.5(5@function,i16), rowColumnToCell, [row(0@argument,i16), column(1@argument,i16)]
		2: cell, t.5
	cast t.4(4@function,i64), t.5(5@function,i16)
		2: cell, t.4
	cast t.6(6@function,u8*), t.4(4@function,i64)
		2: cell, t.6
	addrof t.3(3@function,u8*), [field(1@global,u8*)]
		3: cell, t.3, t.6
	add t.3(3@function,u8*), t.3(3@function,u8*), t.6(6@function,u8*)
		2: cell, t.3
	store [t.3(3@function,u8*)], cell(2@argument,u8)
	jump @setCell_ret
	; successors=[@setCell_ret]

; block @setCell_ret
	; predecessors=[setCell]
	; successors=[]


; CFG for function getBombCountAround
; block getBombCountAround
	; predecessors=[]
		2: column, row
	; 5 pc
	const count(2@function,u8), 0
		3: column, count, row
	const dr(3@function,i16), -1
		4: column, count, dr, row
	; 45:2 for dr <= 1
	jump @for_7
		4: column, count, dr, row
	; successors=[@for_7]

; block @for_7
	; predecessors=[getBombCountAround, @for_7_continue]
		4: column, count, dr, row
	; 13 pc
	const t.9(9@function,i16), 1
		5: column, count, dr, row, t.9
	lteq t.8(8@function,bool), dr(3@function,i16), t.9(9@function,i16)
		5: column, count, dr, row, t.8
	branch t.8(8@function,bool), false, @for_7_break
		4: column, count, dr, row
	jump @for_7_body
		4: column, count, dr, row
	; successors=[@for_7_break, @for_7_body]

; block @for_7_body
	; predecessors=[@for_7]
		4: column, count, dr, row
	; 10 pc
	add r(4@function,i16), row(0@argument,i16), dr(3@function,i16)
		5: column, count, dr, r, row
	const dc(5@function,i16), -1
		6: column, count, dc, dr, r, row
	; 47:3 for dc <= 1
	jump @for_8
		6: column, count, dc, dr, r, row
	; successors=[@for_8]

; block @for_8
	; predecessors=[@for_7_body, @for_8_continue]
		6: column, count, dc, dr, r, row
	; 13 pc
	const t.11(11@function,i16), 1
		7: column, count, dc, dr, r, row, t.11
	lteq t.10(10@function,bool), dc(5@function,i16), t.11(11@function,i16)
		7: column, count, dc, dr, r, row, t.10
	branch t.10(10@function,bool), false, @for_8_break
		6: column, count, dc, dr, r, row
	jump @no_critical_edge_14
		6: column, count, dc, dr, r, row
	; successors=[@for_8_break, @no_critical_edge_14]

; block @no_critical_edge_14
	; predecessors=[@for_8]
		6: column, count, dc, dr, r, row
	; 1 pc
	jump @for_8_body
		6: column, count, dc, dr, r, row
	; successors=[@for_8_body]

; block @for_8_body
	; predecessors=[@no_critical_edge_14]
		6: column, count, dc, dr, r, row
	; 18 pc
	add c(6@function,i16), column(1@argument,i16), dc(5@function,i16)
		7: c, column, count, dc, dr, r, row
	; 49:4 if checkCellBounds([ExprVarAccess[varName=r, index=4, scope=function, type=i16, varIsArray=false, location=49:24], ExprVarAccess[varName=c, index=6, scope=function, type=i16, varIsArray=false, location=49:27]])
	call t.12(12@function,bool), checkCellBounds, [r(4@function,i16), c(6@function,i16)]
		8: c, column, count, dc, dr, r, row, t.12
	branch t.12(12@function,bool), false, @no_critical_edge_15
		7: c, column, count, dc, dr, r, row
	jump @no_critical_edge_16
		7: c, column, count, dc, dr, r, row
	; successors=[@no_critical_edge_15, @no_critical_edge_16]

; block @no_critical_edge_16
	; predecessors=[@for_8_body]
		7: c, column, count, dc, dr, r, row
	; 1 pc
	jump @if_9_then
		7: c, column, count, dc, dr, r, row
	; successors=[@if_9_then]

; block @if_9_then
	; predecessors=[@no_critical_edge_16]
		7: c, column, count, dc, dr, r, row
	; 16 pc
	call cell(7@function,u8), getCell, [r(4@function,i16), c(6@function,i16)]
		7: cell, column, count, dc, dr, r, row
	; 51:5 if isBomb([ExprVarAccess[varName=cell, index=7, scope=function, type=u8, varIsArray=false, location=51:16]])
	call t.13(13@function,bool), isBomb, [cell(7@function,u8)]
		7: column, count, dc, dr, r, row, t.13
	branch t.13(13@function,bool), false, @no_critical_edge_17
		6: column, count, dc, dr, r, row
	jump @if_10_then
		6: column, count, dc, dr, r, row
	; successors=[@no_critical_edge_17, @if_10_then]

; block @if_10_then
	; predecessors=[@if_9_then]
		6: column, count, dc, dr, r, row
	; 10 pc
	const t.14(14@function,u8), 1
		7: column, count, dc, dr, r, row, t.14
	add count(2@function,u8), count(2@function,u8), t.14(14@function,u8)
		6: column, count, dc, dr, r, row
	jump @if_10_end
		6: column, count, dc, dr, r, row
	; successors=[@if_10_end]

; block @no_critical_edge_17
	; predecessors=[@if_9_then]
		6: column, count, dc, dr, r, row
	; 1 pc
	jump @if_10_end
		6: column, count, dc, dr, r, row
	; successors=[@if_10_end]

; block @if_10_end
	; predecessors=[@no_critical_edge_17, @if_10_then]
		6: column, count, dc, dr, r, row
	; 1 pc
	jump @no_critical_edge_18
		6: column, count, dc, dr, r, row
	; successors=[@no_critical_edge_18]

; block @no_critical_edge_18
	; predecessors=[@if_10_end]
		6: column, count, dc, dr, r, row
	; 1 pc
	jump @if_9_end
		6: column, count, dc, dr, r, row
	; successors=[@if_9_end]

; block @no_critical_edge_15
	; predecessors=[@for_8_body]
		6: column, count, dc, dr, r, row
	; 1 pc
	jump @if_9_end
		6: column, count, dc, dr, r, row
	; successors=[@if_9_end]

; block @if_9_end
	; predecessors=[@no_critical_edge_15, @no_critical_edge_18]
		6: column, count, dc, dr, r, row
	; 1 pc
	jump @for_8_continue
		6: column, count, dc, dr, r, row
	; successors=[@for_8_continue]

; block @for_8_continue
	; predecessors=[@if_9_end]
		6: column, count, dc, dr, r, row
	; 10 pc
	const t.15(15@function,i16), 1
		7: column, count, dc, dr, r, row, t.15
	add dc(5@function,i16), dc(5@function,i16), t.15(15@function,i16)
		6: column, count, dc, dr, r, row
	jump @for_8
		6: column, count, dc, dr, r, row
	; successors=[@for_8]

; block @for_8_break
	; predecessors=[@for_8]
		4: column, count, dr, row
	; 1 pc
	jump @for_7_continue
		4: column, count, dr, row
	; successors=[@for_7_continue]

; block @for_7_continue
	; predecessors=[@for_8_break]
		4: column, count, dr, row
	; 10 pc
	const t.16(16@function,i16), 1
		5: column, count, dr, row, t.16
	add dr(3@function,i16), dr(3@function,i16), t.16(16@function,i16)
		4: column, count, dr, row
	jump @for_7
		4: column, count, dr, row
	; successors=[@for_7]

; block @for_7_break
	; predecessors=[@for_7]
		1: count
	; 4 pc
	; 57:9 return count
	ret count(2@function,u8)
	jump @getBombCountAround_ret
	; successors=[@getBombCountAround_ret]

; block @getBombCountAround_ret
	; predecessors=[@for_7_break]
	; successors=[]


; CFG for function getSpacer
; block getSpacer
	; predecessors=[]
		4: column, columnCursor, row, rowCursor
	; 11 pc
	; 61:2 if rowCursor == row
	equals t.4(4@function,bool), rowCursor(2@argument,i16), row(0@argument,i16)
		3: column, columnCursor, t.4
	branch t.4(4@function,bool), false, @no_critical_edge_8
		2: column, columnCursor
	jump @no_critical_edge_9
		2: column, columnCursor
	; successors=[@no_critical_edge_8, @no_critical_edge_9]

; block @no_critical_edge_9
	; predecessors=[getSpacer]
		2: column, columnCursor
	; 1 pc
	jump @if_11_then
		2: column, columnCursor
	; successors=[@if_11_then]

; block @if_11_then
	; predecessors=[@no_critical_edge_9]
		2: column, columnCursor
	; 11 pc
	; 62:3 if columnCursor == column
	equals t.5(5@function,bool), columnCursor(3@argument,i16), column(1@argument,i16)
		3: column, columnCursor, t.5
	branch t.5(5@function,bool), false, @no_critical_edge_11
		2: column, columnCursor
	jump @if_12_then
		2: column, columnCursor
	; successors=[@no_critical_edge_11, @if_12_then]

; block @if_12_then
	; predecessors=[@if_11_then]
	; 6 pc
	; 63:11 return 91
	const t.6(6@function,u8), 91
		1: t.6
	ret t.6(6@function,u8)
	jump @getSpacer_ret
	; successors=[@getSpacer_ret]

; block @no_critical_edge_11
	; predecessors=[@if_11_then]
		2: column, columnCursor
	; 1 pc
	jump @if_12_end
		2: column, columnCursor
	; successors=[@if_12_end]

; block @if_12_end
	; predecessors=[@no_critical_edge_11]
		2: column, columnCursor
	; 20 pc
	; 65:3 if columnCursor == column - 1
	const t.9(9@function,i16), 1
		3: column, columnCursor, t.9
	sub t.8(8@function,i16), column(1@argument,i16), t.9(9@function,i16)
		2: columnCursor, t.8
	equals t.7(7@function,bool), columnCursor(3@argument,i16), t.8(8@function,i16)
		1: t.7
	branch t.7(7@function,bool), false, @if_13_end
	jump @if_13_then
	; successors=[@if_13_end, @if_13_then]

; block @if_13_then
	; predecessors=[@if_12_end]
	; 6 pc
	; 66:11 return 93
	const t.10(10@function,u8), 93
		1: t.10
	ret t.10(10@function,u8)
	jump @getSpacer_ret
	; successors=[@getSpacer_ret]

; block @if_13_end
	; predecessors=[@if_12_end]
	; 1 pc
	jump @if_11_end
	; successors=[@if_11_end]

; block @no_critical_edge_8
	; predecessors=[getSpacer]
	; 1 pc
	jump @if_11_end
	; successors=[@if_11_end]

; block @if_11_end
	; predecessors=[@no_critical_edge_8, @if_13_end]
	; 6 pc
	; 69:9 return 32
	const t.11(11@function,u8), 32
		1: t.11
	ret t.11(11@function,u8)
	jump @no_critical_edge_10
	; successors=[@no_critical_edge_10]

; block @no_critical_edge_10
	; predecessors=[@if_11_end]
	; 1 pc
	jump @getSpacer_ret
	; successors=[@getSpacer_ret]

; block @getSpacer_ret
	; predecessors=[@no_critical_edge_10, @if_13_then, @if_12_then]
	; successors=[]


; CFG for function printCell
; block printCell
	; predecessors=[]
		3: cell, column, row
	; 11 pc
	const chr(3@function,u8), 46
		4: cell, chr, column, row
	; 74:2 if isOpen([ExprVarAccess[varName=cell, index=0, scope=argument, type=u8, varIsArray=false, location=74:13]])
	call t.5(5@function,bool), isOpen, [cell(0@argument,u8)]
		5: cell, chr, column, row, t.5
	branch t.5(5@function,bool), false, @no_critical_edge_13
		4: cell, chr, column, row
	jump @no_critical_edge_14
		4: cell, chr, column, row
	; successors=[@no_critical_edge_13, @no_critical_edge_14]

; block @no_critical_edge_14
	; predecessors=[printCell]
		3: cell, column, row
	; 1 pc
	jump @if_14_then
		3: cell, column, row
	; successors=[@if_14_then]

; block @if_14_then
	; predecessors=[@no_critical_edge_14]
		3: cell, column, row
	; 9 pc
	; 75:3 if isBomb([ExprVarAccess[varName=cell, index=0, scope=argument, type=u8, varIsArray=false, location=75:14]])
	call t.6(6@function,bool), isBomb, [cell(0@argument,u8)]
		3: column, row, t.6
	branch t.6(6@function,bool), false, @no_critical_edge_17
		2: column, row
	jump @if_15_then
		2: column, row
	; successors=[@no_critical_edge_17, @if_15_then]

; block @if_15_then
	; predecessors=[@if_14_then]
	; 3 pc
	const chr(3@function,u8), 42
		1: chr
	jump @if_15_end
		1: chr
	; successors=[@if_15_end]

; block @no_critical_edge_17
	; predecessors=[@if_14_then]
		2: column, row
	; 1 pc
	jump @if_15_else
		2: column, row
	; successors=[@if_15_else]

; block @if_15_else
	; predecessors=[@no_critical_edge_17]
		2: column, row
	; 20 pc
	call count(4@function,u8), getBombCountAround, [row(1@argument,i16), column(2@argument,i16)]
		1: count
	; 80:4 if count > 0
	const t.8(8@function,u8), 0
		2: count, t.8
	gt t.7(7@function,bool), count(4@function,u8), t.8(8@function,u8)
		2: count, t.7
	branch t.7(7@function,bool), false, @if_16_else
		1: count
	jump @if_16_then
		1: count
	; successors=[@if_16_else, @if_16_then]

; block @if_16_then
	; predecessors=[@if_15_else]
		1: count
	; 10 pc
	const t.9(9@function,u8), 48
		2: count, t.9
	add chr(3@function,u8), count(4@function,u8), t.9(9@function,u8)
		1: chr
	jump @if_16_end
		1: chr
	; successors=[@if_16_end]

; block @if_16_else
	; predecessors=[@if_15_else]
	; 3 pc
	const chr(3@function,u8), 32
		1: chr
	jump @if_16_end
		1: chr
	; successors=[@if_16_end]

; block @if_16_end
	; predecessors=[@if_16_else, @if_16_then]
		1: chr
	; 1 pc
	jump @no_critical_edge_18
		1: chr
	; successors=[@no_critical_edge_18]

; block @no_critical_edge_18
	; predecessors=[@if_16_end]
		1: chr
	; 1 pc
	jump @if_15_end
		1: chr
	; successors=[@if_15_end]

; block @if_15_end
	; predecessors=[@no_critical_edge_18, @if_15_then]
		1: chr
	; 1 pc
	jump @no_critical_edge_19
		1: chr
	; successors=[@no_critical_edge_19]

; block @no_critical_edge_19
	; predecessors=[@if_15_end]
		1: chr
	; 1 pc
	jump @if_14_end
		1: chr
	; successors=[@if_14_end]

; block @no_critical_edge_13
	; predecessors=[printCell]
		2: cell, chr
	; 1 pc
	jump @if_14_else
		2: cell, chr
	; successors=[@if_14_else]

; block @if_14_else
	; predecessors=[@no_critical_edge_13]
		2: cell, chr
	; 9 pc
	; 88:7 if isFlag([ExprVarAccess[varName=cell, index=0, scope=argument, type=u8, varIsArray=false, location=88:18]])
	call t.10(10@function,bool), isFlag, [cell(0@argument,u8)]
		2: chr, t.10
	branch t.10(10@function,bool), false, @no_critical_edge_15
		1: chr
	jump @if_17_then
		1: chr
	; successors=[@no_critical_edge_15, @if_17_then]

; block @if_17_then
	; predecessors=[@if_14_else]
	; 3 pc
	const chr(3@function,u8), 35
		1: chr
	jump @if_17_end
		1: chr
	; successors=[@if_17_end]

; block @no_critical_edge_15
	; predecessors=[@if_14_else]
		1: chr
	; 1 pc
	jump @if_17_end
		1: chr
	; successors=[@if_17_end]

; block @if_17_end
	; predecessors=[@no_critical_edge_15, @if_17_then]
		1: chr
	; 1 pc
	jump @no_critical_edge_16
		1: chr
	; successors=[@no_critical_edge_16]

; block @no_critical_edge_16
	; predecessors=[@if_17_end]
		1: chr
	; 1 pc
	jump @if_14_end
		1: chr
	; successors=[@if_14_end]

; block @if_14_end
	; predecessors=[@no_critical_edge_16, @no_critical_edge_19]
		1: chr
	; 4 pc
	call _, printChar [chr(3@function,u8)]
	jump @printCell_ret
	; successors=[@printCell_ret]

; block @printCell_ret
	; predecessors=[@if_14_end]
	; successors=[]


; CFG for function printField
; block printField
	; predecessors=[]
		2: columnCursor, rowCursor
	; 12 pc
	const t.7(7@function,i16), 0
		3: columnCursor, rowCursor, t.7
	const t.8(8@function,i16), 0
		4: columnCursor, rowCursor, t.7, t.8
	call _, setCursor [t.7(7@function,i16), t.8(8@function,i16)]
		2: columnCursor, rowCursor
	const row(2@function,i16), 0
		3: columnCursor, row, rowCursor
	; 96:2 for row < 20
	jump @for_18
		3: columnCursor, row, rowCursor
	; successors=[@for_18]

; block @for_18
	; predecessors=[printField, @for_18_continue]
		3: columnCursor, row, rowCursor
	; 13 pc
	const t.10(10@function,i16), 20
		4: columnCursor, row, rowCursor, t.10
	lt t.9(9@function,bool), row(2@function,i16), t.10(10@function,i16)
		4: columnCursor, row, rowCursor, t.9
	branch t.9(9@function,bool), false, @for_18_break
		3: columnCursor, row, rowCursor
	jump @for_18_body
		3: columnCursor, row, rowCursor
	; successors=[@for_18_break, @for_18_body]

; block @for_18_body
	; predecessors=[@for_18]
		3: columnCursor, row, rowCursor
	; 8 pc
	const t.11(11@function,u8), 124
		4: columnCursor, row, rowCursor, t.11
	call _, printChar [t.11(11@function,u8)]
		3: columnCursor, row, rowCursor
	const column(3@function,i16), 0
		4: column, columnCursor, row, rowCursor
	; 98:3 for column < 40
	jump @for_19
		4: column, columnCursor, row, rowCursor
	; successors=[@for_19]

; block @for_19
	; predecessors=[@for_18_body, @for_19_continue]
		4: column, columnCursor, row, rowCursor
	; 13 pc
	const t.13(13@function,i16), 40
		5: column, columnCursor, row, rowCursor, t.13
	lt t.12(12@function,bool), column(3@function,i16), t.13(13@function,i16)
		5: column, columnCursor, row, rowCursor, t.12
	branch t.12(12@function,bool), false, @for_19_break
		4: column, columnCursor, row, rowCursor
	jump @for_19_body
		4: column, columnCursor, row, rowCursor
	; successors=[@for_19_break, @for_19_body]

; block @for_19_body
	; predecessors=[@for_19]
		4: column, columnCursor, row, rowCursor
	; 29 pc
	call spacer(4@function,u8), getSpacer, [row(2@function,i16), column(3@function,i16), rowCursor(0@argument,i16), columnCursor(1@argument,i16)]
		5: column, columnCursor, row, rowCursor, spacer
	call _, printChar [spacer(4@function,u8)]
		4: column, columnCursor, row, rowCursor
	call cell(5@function,u8), getCell, [row(2@function,i16), column(3@function,i16)]
		5: cell, column, columnCursor, row, rowCursor
	call _, printCell [cell(5@function,u8), row(2@function,i16), column(3@function,i16)]
		4: column, columnCursor, row, rowCursor
	jump @for_19_continue
		4: column, columnCursor, row, rowCursor
	; successors=[@for_19_continue]

; block @for_19_continue
	; predecessors=[@for_19_body]
		4: column, columnCursor, row, rowCursor
	; 10 pc
	const t.14(14@function,i16), 1
		5: column, columnCursor, row, rowCursor, t.14
	add column(3@function,i16), column(3@function,i16), t.14(14@function,i16)
		4: column, columnCursor, row, rowCursor
	jump @for_19
		4: column, columnCursor, row, rowCursor
	; successors=[@for_19]

; block @for_19_break
	; predecessors=[@for_19]
		3: columnCursor, row, rowCursor
	; 23 pc
	const t.15(15@function,i16), 40
		4: columnCursor, row, rowCursor, t.15
	call spacer(6@function,u8), getSpacer, [row(2@function,i16), t.15(15@function,i16), rowCursor(0@argument,i16), columnCursor(1@argument,i16)]
		4: columnCursor, row, rowCursor, spacer
	call _, printChar [spacer(6@function,u8)]
		3: columnCursor, row, rowCursor
	const t.16(16@function,u8*), [string-0]
		4: columnCursor, row, rowCursor, t.16
	call _, printString [t.16(16@function,u8*)]
		3: columnCursor, row, rowCursor
	jump @for_18_continue
		3: columnCursor, row, rowCursor
	; successors=[@for_18_continue]

; block @for_18_continue
	; predecessors=[@for_19_break]
		3: columnCursor, row, rowCursor
	; 10 pc
	const t.17(17@function,i16), 1
		4: columnCursor, row, rowCursor, t.17
	add row(2@function,i16), row(2@function,i16), t.17(17@function,i16)
		3: columnCursor, row, rowCursor
	jump @for_18
		3: columnCursor, row, rowCursor
	; successors=[@for_18]

; block @for_18_break
	; predecessors=[@for_18]
	; 1 pc
	jump @printField_ret
	; successors=[@printField_ret]

; block @printField_ret
	; predecessors=[@for_18_break]
	; successors=[]


; CFG for function printSpaces
; block printSpaces
	; predecessors=[]
		1: i
	; 1 pc
	jump @for_20
		1: i
	; successors=[@for_20]

; block @for_20
	; predecessors=[printSpaces, @for_20_continue]
		1: i
	; 13 pc
	const t.2(2@function,i16), 0
		2: i, t.2
	gt t.1(1@function,bool), i(0@argument,i16), t.2(2@function,i16)
		2: i, t.1
	branch t.1(1@function,bool), false, @for_20_break
		1: i
	jump @for_20_body
		1: i
	; successors=[@for_20_break, @for_20_body]

; block @for_20_body
	; predecessors=[@for_20]
		1: i
	; 6 pc
	const t.3(3@function,u8), 48
		2: i, t.3
	call _, printChar [t.3(3@function,u8)]
		1: i
	jump @for_20_continue
		1: i
	; successors=[@for_20_continue]

; block @for_20_continue
	; predecessors=[@for_20_body]
		1: i
	; 10 pc
	const t.4(4@function,i16), 1
		2: i, t.4
	sub i(0@argument,i16), i(0@argument,i16), t.4(4@function,i16)
		1: i
	jump @for_20
		1: i
	; successors=[@for_20]

; block @for_20_break
	; predecessors=[@for_20]
	; 1 pc
	jump @printSpaces_ret
	; successors=[@printSpaces_ret]

; block @printSpaces_ret
	; predecessors=[@for_20_break]
	; successors=[]


; CFG for function getDigitCount
; block getDigitCount
	; predecessors=[]
		1: value
	; 15 pc
	const count(1@function,u8), 0
		2: count, value
	; 118:2 if value < 0
	const t.3(3@function,i16), 0
		3: count, t.3, value
	lt t.2(2@function,bool), value(0@argument,i16), t.3(3@function,i16)
		3: count, t.2, value
	branch t.2(2@function,bool), false, @no_critical_edge_8
		2: count, value
	jump @if_21_then
		2: count, value
	; successors=[@no_critical_edge_8, @if_21_then]

; block @if_21_then
	; predecessors=[getDigitCount]
		1: value
	; 8 pc
	const count(1@function,u8), 1
		2: count, value
	neg value(0@argument,i16), value(0@argument,i16)
		2: count, value
	jump @if_21_end
		2: count, value
	; successors=[@if_21_end]

; block @no_critical_edge_8
	; predecessors=[getDigitCount]
		2: count, value
	; 1 pc
	jump @if_21_end
		2: count, value
	; successors=[@if_21_end]

; block @if_21_end
	; predecessors=[@no_critical_edge_8, @if_21_then]
		2: count, value
	; 1 pc
	jump @no_critical_edge_9
		2: count, value
	; successors=[@no_critical_edge_9]

; block @no_critical_edge_9
	; predecessors=[@if_21_end]
		2: count, value
	; 1 pc
	jump @while_22
		2: count, value
	; successors=[@while_22]

; block @while_22
	; predecessors=[@no_critical_edge_9, @if_23_end]
		2: count, value
	; 31 pc
	const t.4(4@function,u8), 1
		3: count, t.4, value
	add count(1@function,u8), count(1@function,u8), t.4(4@function,u8)
		2: count, value
	const t.5(5@function,i16), 10
		3: count, t.5, value
	div value(0@argument,i16), value(0@argument,i16), t.5(5@function,i16)
		2: count, value
	; 126:3 if value == 0
	const t.7(7@function,i16), 0
		3: count, t.7, value
	equals t.6(6@function,bool), value(0@argument,i16), t.7(7@function,i16)
		3: count, t.6, value
	branch t.6(6@function,bool), false, @if_23_end
		2: count, value
	jump @if_23_then
		2: count, value
	; successors=[@if_23_end, @if_23_then]

; block @if_23_then
	; predecessors=[@while_22]
		1: count
	; 1 pc
	jump @while_22_break
		1: count
	; successors=[@while_22_break]

; block @while_22_break
	; predecessors=[@if_23_then]
		1: count
	; 4 pc
	; 131:9 return count
	ret count(1@function,u8)
	jump @getDigitCount_ret
	; successors=[@getDigitCount_ret]

; block @if_23_end
	; predecessors=[@while_22]
		2: count, value
	; 1 pc
	jump @while_22
		2: count, value
	; successors=[@while_22]

; block @getDigitCount_ret
	; predecessors=[@while_22_break]
	; successors=[]


; CFG for function printLeft
; block printLeft
	; predecessors=[]
	; 5 pc
	const count(0@function,i16), 0
		1: count
	const r(1@function,i16), 0
		2: count, r
	; 136:2 for r < 20
	jump @for_24
		2: count, r
	; successors=[@for_24]

; block @for_24
	; predecessors=[printLeft, @for_24_continue]
		2: count, r
	; 13 pc
	const t.7(7@function,i16), 20
		3: count, r, t.7
	lt t.6(6@function,bool), r(1@function,i16), t.7(7@function,i16)
		3: count, r, t.6
	branch t.6(6@function,bool), false, @for_24_break
		2: count, r
	jump @for_24_body
		2: count, r
	; successors=[@for_24_break, @for_24_body]

; block @for_24_body
	; predecessors=[@for_24]
		2: count, r
	; 3 pc
	const c(2@function,i16), 0
		3: c, count, r
	; 137:3 for c < 40
	jump @for_25
		3: c, count, r
	; successors=[@for_25]

; block @for_25
	; predecessors=[@for_24_body, @for_25_continue]
		3: c, count, r
	; 13 pc
	const t.9(9@function,i16), 40
		4: c, count, r, t.9
	lt t.8(8@function,bool), c(2@function,i16), t.9(9@function,i16)
		4: c, count, r, t.8
	branch t.8(8@function,bool), false, @for_25_break
		3: c, count, r
	jump @no_critical_edge_12
		3: c, count, r
	; successors=[@for_25_break, @no_critical_edge_12]

; block @no_critical_edge_12
	; predecessors=[@for_25]
		3: c, count, r
	; 1 pc
	jump @for_25_body
		3: c, count, r
	; successors=[@for_25_body]

; block @for_25_body
	; predecessors=[@no_critical_edge_12]
		3: c, count, r
	; 29 pc
	call cell(3@function,u8), getCell, [r(1@function,i16), c(2@function,i16)]
		4: c, cell, count, r
	; 139:4 if cell & 6 == 0
	const t.12(12@function,u8), 6
		5: c, cell, count, r, t.12
	and t.11(11@function,u8), cell(3@function,u8), t.12(12@function,u8)
		4: c, count, r, t.11
	const t.13(13@function,u8), 0
		5: c, count, r, t.11, t.13
	equals t.10(10@function,bool), t.11(11@function,u8), t.13(13@function,u8)
		4: c, count, r, t.10
	branch t.10(10@function,bool), false, @no_critical_edge_13
		3: c, count, r
	jump @if_26_then
		3: c, count, r
	; successors=[@no_critical_edge_13, @if_26_then]

; block @if_26_then
	; predecessors=[@for_25_body]
		3: c, count, r
	; 10 pc
	const t.14(14@function,i16), 1
		4: c, count, r, t.14
	add count(0@function,i16), count(0@function,i16), t.14(14@function,i16)
		3: c, count, r
	jump @if_26_end
		3: c, count, r
	; successors=[@if_26_end]

; block @no_critical_edge_13
	; predecessors=[@for_25_body]
		3: c, count, r
	; 1 pc
	jump @if_26_end
		3: c, count, r
	; successors=[@if_26_end]

; block @if_26_end
	; predecessors=[@no_critical_edge_13, @if_26_then]
		3: c, count, r
	; 1 pc
	jump @for_25_continue
		3: c, count, r
	; successors=[@for_25_continue]

; block @for_25_continue
	; predecessors=[@if_26_end]
		3: c, count, r
	; 10 pc
	const t.15(15@function,i16), 1
		4: c, count, r, t.15
	add c(2@function,i16), c(2@function,i16), t.15(15@function,i16)
		3: c, count, r
	jump @for_25
		3: c, count, r
	; successors=[@for_25]

; block @for_25_break
	; predecessors=[@for_25]
		2: count, r
	; 1 pc
	jump @for_24_continue
		2: count, r
	; successors=[@for_24_continue]

; block @for_24_continue
	; predecessors=[@for_25_break]
		2: count, r
	; 10 pc
	const t.16(16@function,i16), 1
		3: count, r, t.16
	add r(1@function,i16), r(1@function,i16), t.16(16@function,i16)
		2: count, r
	jump @for_24
		2: count, r
	; successors=[@for_24]

; block @for_24_break
	; predecessors=[@for_24]
		1: count
	; 54 pc
	call leftDigits(4@function,u8), getDigitCount, [count(0@function,i16)]
		2: count, leftDigits
	const t.17(17@function,i16), 40
		3: count, leftDigits, t.17
	call bombDigits(5@function,u8), getDigitCount, [t.17(17@function,i16)]
		3: bombDigits, count, leftDigits
	const t.18(18@function,u8*), [string-1]
		4: bombDigits, count, leftDigits, t.18
	call _, printString [t.18(18@function,u8*)]
		3: bombDigits, count, leftDigits
	sub t.20(20@function,u8), bombDigits(5@function,u8), leftDigits(4@function,u8)
		2: count, t.20
	cast t.19(19@function,i16), t.20(20@function,u8)
		2: count, t.19
	call _, printSpaces [t.19(19@function,i16)]
		1: count
	cast t.21(21@function,i64), count(0@function,i16)
		2: count, t.21
	call _, printUint [t.21(21@function,i64)]
		1: count
	; 150:15 return count == 0
	const t.23(23@function,i16), 0
		2: count, t.23
	equals t.22(22@function,bool), count(0@function,i16), t.23(23@function,i16)
		1: t.22
	ret t.22(22@function,bool)
	jump @printLeft_ret
	; successors=[@printLeft_ret]

; block @printLeft_ret
	; predecessors=[@for_24_break]
	; successors=[]


; CFG for function abs
; block abs
	; predecessors=[]
		1: a
	; 13 pc
	; 154:2 if a < 0
	const t.2(2@function,i16), 0
		2: a, t.2
	lt t.1(1@function,bool), a(0@argument,i16), t.2(2@function,i16)
		2: a, t.1
	branch t.1(1@function,bool), false, @if_27_end
		1: a
	jump @if_27_then
		1: a
	; successors=[@if_27_end, @if_27_then]

; block @if_27_then
	; predecessors=[abs]
		1: a
	; 9 pc
	; 155:10 return -a
	neg t.3(3@function,i16), a(0@argument,i16)
		1: t.3
	ret t.3(3@function,i16)
	jump @abs_ret
	; successors=[@abs_ret]

; block @if_27_end
	; predecessors=[abs]
		1: a
	; 4 pc
	; 157:9 return a
	ret a(0@argument,i16)
	jump @abs_ret
	; successors=[@abs_ret]

; block @abs_ret
	; predecessors=[@if_27_end, @if_27_then]
	; successors=[]


; CFG for function clearField
; block clearField
	; predecessors=[]
	; 3 pc
	const r(0@function,i16), 0
		1: r
	; 161:2 for r < 20
	jump @for_28
		1: r
	; successors=[@for_28]

; block @for_28
	; predecessors=[clearField, @for_28_continue]
		1: r
	; 13 pc
	const t.3(3@function,i16), 20
		2: r, t.3
	lt t.2(2@function,bool), r(0@function,i16), t.3(3@function,i16)
		2: r, t.2
	branch t.2(2@function,bool), false, @for_28_break
		1: r
	jump @for_28_body
		1: r
	; successors=[@for_28_break, @for_28_body]

; block @for_28_body
	; predecessors=[@for_28]
		1: r
	; 3 pc
	const c(1@function,i16), 0
		2: c, r
	; 162:3 for c < 40
	jump @for_29
		2: c, r
	; successors=[@for_29]

; block @for_29
	; predecessors=[@for_28_body, @for_29_continue]
		2: c, r
	; 13 pc
	const t.5(5@function,i16), 40
		3: c, r, t.5
	lt t.4(4@function,bool), c(1@function,i16), t.5(5@function,i16)
		3: c, r, t.4
	branch t.4(4@function,bool), false, @for_29_break
		2: c, r
	jump @for_29_body
		2: c, r
	; successors=[@for_29_break, @for_29_body]

; block @for_29_body
	; predecessors=[@for_29]
		2: c, r
	; 10 pc
	const t.6(6@function,u8), 0
		3: c, r, t.6
	call _, setCell [r(0@function,i16), c(1@function,i16), t.6(6@function,u8)]
		2: c, r
	jump @for_29_continue
		2: c, r
	; successors=[@for_29_continue]

; block @for_29_continue
	; predecessors=[@for_29_body]
		2: c, r
	; 10 pc
	const t.7(7@function,i16), 1
		3: c, r, t.7
	add c(1@function,i16), c(1@function,i16), t.7(7@function,i16)
		2: c, r
	jump @for_29
		2: c, r
	; successors=[@for_29]

; block @for_29_break
	; predecessors=[@for_29]
		1: r
	; 1 pc
	jump @for_28_continue
		1: r
	; successors=[@for_28_continue]

; block @for_28_continue
	; predecessors=[@for_29_break]
		1: r
	; 10 pc
	const t.8(8@function,i16), 1
		2: r, t.8
	add r(0@function,i16), r(0@function,i16), t.8(8@function,i16)
		1: r
	jump @for_28
		1: r
	; successors=[@for_28]

; block @for_28_break
	; predecessors=[@for_28]
	; 1 pc
	jump @clearField_ret
	; successors=[@clearField_ret]

; block @clearField_ret
	; predecessors=[@for_28_break]
	; successors=[]


; CFG for function initField
; block initField
	; predecessors=[]
		2: curr_c, curr_r
	; 3 pc
	const bombs(2@function,i16), 40
		3: bombs, curr_c, curr_r
	; 169:2 for bombs > 0
	jump @for_30
		3: bombs, curr_c, curr_r
	; successors=[@for_30]

; block @for_30
	; predecessors=[initField, @for_30_continue]
		3: bombs, curr_c, curr_r
	; 13 pc
	const t.6(6@function,i16), 0
		4: bombs, curr_c, curr_r, t.6
	gt t.5(5@function,bool), bombs(2@function,i16), t.6(6@function,i16)
		4: bombs, curr_c, curr_r, t.5
	branch t.5(5@function,bool), false, @for_30_break
		3: bombs, curr_c, curr_r
	jump @no_critical_edge_10
		3: bombs, curr_c, curr_r
	; successors=[@for_30_break, @no_critical_edge_10]

; block @no_critical_edge_10
	; predecessors=[@for_30]
		3: bombs, curr_c, curr_r
	; 1 pc
	jump @for_30_body
		3: bombs, curr_c, curr_r
	; successors=[@for_30_body]

; block @for_30_body
	; predecessors=[@no_critical_edge_10]
		3: bombs, curr_c, curr_r
	; 59 pc
	call t.8(8@function,i32), random, []
		4: bombs, curr_c, curr_r, t.8
	const t.9(9@function,i32), 20
		5: bombs, curr_c, curr_r, t.8, t.9
	mod t.7(7@function,i32), t.8(8@function,i32), t.9(9@function,i32)
		4: bombs, curr_c, curr_r, t.7
	cast row(3@function,i16), t.7(7@function,i32)
		4: bombs, curr_c, curr_r, row
	call t.11(11@function,i32), random, []
		5: bombs, curr_c, curr_r, row, t.11
	const t.12(12@function,i32), 40
		6: bombs, curr_c, curr_r, row, t.11, t.12
	mod t.10(10@function,i32), t.11(11@function,i32), t.12(12@function,i32)
		5: bombs, curr_c, curr_r, row, t.10
	cast column(4@function,i16), t.10(10@function,i32)
		5: bombs, column, curr_c, curr_r, row
	; 172:3 if abs([ExprBinary[op=-, type=i16, left=ExprVarAccess[varName=row, index=3, scope=function, type=i16, varIsArray=false, location=172:11], right=ExprVarAccess[varName=curr_r, index=0, scope=argument, type=i16, varIsArray=false, location=172:20], location=172:18]]) > 1 || abs([ExprBinary[op=-, type=i16, left=ExprVarAccess[varName=column, index=4, scope=function, type=i16, varIsArray=false, location=173:11], right=ExprVarAccess[varName=curr_c, index=1, scope=argument, type=i16, varIsArray=false, location=173:20], location=173:18]]) > 1
	; 173:4 logic or
	sub t.15(15@function,i16), row(3@function,i16), curr_r(0@argument,i16)
		6: bombs, column, curr_c, curr_r, row, t.15
	call t.14(14@function,i16), abs, [t.15(15@function,i16)]
		6: bombs, column, curr_c, curr_r, row, t.14
	const t.16(16@function,i16), 1
		7: bombs, column, curr_c, curr_r, row, t.14, t.16
	gt t.13(13@function,bool), t.14(14@function,i16), t.16(16@function,i16)
		6: bombs, column, curr_c, curr_r, row, t.13
	branch t.13(13@function,bool), true, @no_critical_edge_11
		6: bombs, column, curr_c, curr_r, row, t.13
	jump @or_2nd_32
		6: bombs, column, curr_c, curr_r, row, t.13
	; successors=[@no_critical_edge_11, @or_2nd_32]

; block @or_2nd_32
	; predecessors=[@for_30_body]
		5: bombs, column, curr_c, curr_r, row
	; 22 pc
	sub t.18(18@function,i16), column(4@function,i16), curr_c(1@argument,i16)
		6: bombs, column, curr_c, curr_r, row, t.18
	call t.17(17@function,i16), abs, [t.18(18@function,i16)]
		6: bombs, column, curr_c, curr_r, row, t.17
	const t.19(19@function,i16), 1
		7: bombs, column, curr_c, curr_r, row, t.17, t.19
	gt t.13(13@function,bool), t.17(17@function,i16), t.19(19@function,i16)
		6: bombs, column, curr_c, curr_r, row, t.13
	jump @or_next_32
		6: bombs, column, curr_c, curr_r, row, t.13
	; successors=[@or_next_32]

; block @no_critical_edge_11
	; predecessors=[@for_30_body]
		6: bombs, column, curr_c, curr_r, row, t.13
	; 1 pc
	jump @or_next_32
		6: bombs, column, curr_c, curr_r, row, t.13
	; successors=[@or_next_32]

; block @or_next_32
	; predecessors=[@no_critical_edge_11, @or_2nd_32]
		6: bombs, column, curr_c, curr_r, row, t.13
	; 4 pc
	branch t.13(13@function,bool), false, @no_critical_edge_12
		5: bombs, column, curr_c, curr_r, row
	jump @if_31_then
		5: bombs, column, curr_c, curr_r, row
	; successors=[@no_critical_edge_12, @if_31_then]

; block @if_31_then
	; predecessors=[@or_next_32]
		5: bombs, column, curr_c, curr_r, row
	; 10 pc
	const t.20(20@function,u8), 1
		6: bombs, column, curr_c, curr_r, row, t.20
	call _, setCell [row(3@function,i16), column(4@function,i16), t.20(20@function,u8)]
		3: bombs, curr_c, curr_r
	jump @if_31_end
		3: bombs, curr_c, curr_r
	; successors=[@if_31_end]

; block @no_critical_edge_12
	; predecessors=[@or_next_32]
		3: bombs, curr_c, curr_r
	; 1 pc
	jump @if_31_end
		3: bombs, curr_c, curr_r
	; successors=[@if_31_end]

; block @if_31_end
	; predecessors=[@no_critical_edge_12, @if_31_then]
		3: bombs, curr_c, curr_r
	; 1 pc
	jump @for_30_continue
		3: bombs, curr_c, curr_r
	; successors=[@for_30_continue]

; block @for_30_continue
	; predecessors=[@if_31_end]
		3: bombs, curr_c, curr_r
	; 10 pc
	const t.21(21@function,i16), 1
		4: bombs, curr_c, curr_r, t.21
	sub bombs(2@function,i16), bombs(2@function,i16), t.21(21@function,i16)
		3: bombs, curr_c, curr_r
	jump @for_30
		3: bombs, curr_c, curr_r
	; successors=[@for_30]

; block @for_30_break
	; predecessors=[@for_30]
	; 1 pc
	jump @initField_ret
	; successors=[@initField_ret]

; block @initField_ret
	; predecessors=[@for_30_break]
	; successors=[]


; CFG for function maybeRevealAround
; block maybeRevealAround
	; predecessors=[]
		2: column, row
	; 20 pc
	; 180:2 if getBombCountAround([ExprVarAccess[varName=row, index=0, scope=argument, type=i16, varIsArray=false, location=180:25], ExprVarAccess[varName=column, index=1, scope=argument, type=i16, varIsArray=false, location=180:30]]) != 0
	call t.8(8@function,u8), getBombCountAround, [row(0@argument,i16), column(1@argument,i16)]
		3: column, row, t.8
	const t.9(9@function,u8), 0
		4: column, row, t.8, t.9
	notequals t.7(7@function,bool), t.8(8@function,u8), t.9(9@function,u8)
		3: column, row, t.7
	branch t.7(7@function,bool), false, @if_33_end
		2: column, row
	jump @if_33_then
		2: column, row
	; successors=[@if_33_end, @if_33_then]

; block @if_33_then
	; predecessors=[maybeRevealAround]
	; 1 pc
	jump @maybeRevealAround_ret
	; successors=[@maybeRevealAround_ret]

; block @if_33_end
	; predecessors=[maybeRevealAround]
		2: column, row
	; 3 pc
	const dr(2@function,i16), -1
		3: column, dr, row
	; 184:2 for dr <= 1
	jump @for_34
		3: column, dr, row
	; successors=[@for_34]

; block @for_34
	; predecessors=[@if_33_end, @for_34_continue]
		3: column, dr, row
	; 13 pc
	const t.11(11@function,i16), 1
		4: column, dr, row, t.11
	lteq t.10(10@function,bool), dr(2@function,i16), t.11(11@function,i16)
		4: column, dr, row, t.10
	branch t.10(10@function,bool), false, @for_34_break
		3: column, dr, row
	jump @for_34_body
		3: column, dr, row
	; successors=[@for_34_break, @for_34_body]

; block @for_34_body
	; predecessors=[@for_34]
		3: column, dr, row
	; 10 pc
	add r(3@function,i16), row(0@argument,i16), dr(2@function,i16)
		4: column, dr, r, row
	const dc(4@function,i16), -1
		5: column, dc, dr, r, row
	; 186:3 for dc <= 1
	jump @for_35
		5: column, dc, dr, r, row
	; successors=[@for_35]

; block @for_35
	; predecessors=[@for_34_body, @no_critical_edge_24]
		5: column, dc, dr, r, row
	; 13 pc
	const t.13(13@function,i16), 1
		6: column, dc, dr, r, row, t.13
	lteq t.12(12@function,bool), dc(4@function,i16), t.13(13@function,i16)
		6: column, dc, dr, r, row, t.12
	branch t.12(12@function,bool), false, @for_35_break
		5: column, dc, dr, r, row
	jump @no_critical_edge_20
		5: column, dc, dr, r, row
	; successors=[@for_35_break, @no_critical_edge_20]

; block @no_critical_edge_20
	; predecessors=[@for_35]
		5: column, dc, dr, r, row
	; 1 pc
	jump @for_35_body
		5: column, dc, dr, r, row
	; successors=[@for_35_body]

; block @for_35_body
	; predecessors=[@no_critical_edge_20]
		5: column, dc, dr, r, row
	; 13 pc
	; 187:4 if dr == 0 && dc == 0
	; 187:16 logic and
	const t.15(15@function,i16), 0
		6: column, dc, dr, r, row, t.15
	equals t.14(14@function,bool), dr(2@function,i16), t.15(15@function,i16)
		6: column, dc, dr, r, row, t.14
	branch t.14(14@function,bool), false, @no_critical_edge_21
		6: column, dc, dr, r, row, t.14
	jump @and_2nd_37
		6: column, dc, dr, r, row, t.14
	; successors=[@no_critical_edge_21, @and_2nd_37]

; block @and_2nd_37
	; predecessors=[@for_35_body]
		5: column, dc, dr, r, row
	; 10 pc
	const t.16(16@function,i16), 0
		6: column, dc, dr, r, row, t.16
	equals t.14(14@function,bool), dc(4@function,i16), t.16(16@function,i16)
		6: column, dc, dr, r, row, t.14
	jump @and_next_37
		6: column, dc, dr, r, row, t.14
	; successors=[@and_next_37]

; block @no_critical_edge_21
	; predecessors=[@for_35_body]
		6: column, dc, dr, r, row, t.14
	; 1 pc
	jump @and_next_37
		6: column, dc, dr, r, row, t.14
	; successors=[@and_next_37]

; block @and_next_37
	; predecessors=[@no_critical_edge_21, @and_2nd_37]
		6: column, dc, dr, r, row, t.14
	; 4 pc
	branch t.14(14@function,bool), false, @no_critical_edge_22
		5: column, dc, dr, r, row
	jump @if_36_then
		5: column, dc, dr, r, row
	; successors=[@no_critical_edge_22, @if_36_then]

; block @if_36_then
	; predecessors=[@and_next_37]
		5: column, dc, dr, r, row
	; 1 pc
	jump @for_35_continue
		5: column, dc, dr, r, row
	; successors=[@for_35_continue]

; block @no_critical_edge_22
	; predecessors=[@and_next_37]
		5: column, dc, dr, r, row
	; 1 pc
	jump @if_36_end
		5: column, dc, dr, r, row
	; successors=[@if_36_end]

; block @if_36_end
	; predecessors=[@no_critical_edge_22]
		5: column, dc, dr, r, row
	; 23 pc
	add c(5@function,i16), column(1@argument,i16), dc(4@function,i16)
		6: c, column, dc, dr, r, row
	; 192:4 if !checkCellBounds([ExprVarAccess[varName=r, index=3, scope=function, type=i16, varIsArray=false, location=192:25], ExprVarAccess[varName=c, index=5, scope=function, type=i16, varIsArray=false, location=192:28]])
	call t.18(18@function,bool), checkCellBounds, [r(3@function,i16), c(5@function,i16)]
		7: c, column, dc, dr, r, row, t.18
	notlog t.17(17@function,bool), t.18(18@function,bool)
		7: c, column, dc, dr, r, row, t.17
	branch t.17(17@function,bool), false, @no_critical_edge_23
		6: c, column, dc, dr, r, row
	jump @if_38_then
		6: c, column, dc, dr, r, row
	; successors=[@no_critical_edge_23, @if_38_then]

; block @if_38_then
	; predecessors=[@if_36_end]
		5: column, dc, dr, r, row
	; 1 pc
	jump @for_35_continue
		5: column, dc, dr, r, row
	; successors=[@for_35_continue]

; block @no_critical_edge_23
	; predecessors=[@if_36_end]
		6: c, column, dc, dr, r, row
	; 1 pc
	jump @if_38_end
		6: c, column, dc, dr, r, row
	; successors=[@if_38_end]

; block @if_38_end
	; predecessors=[@no_critical_edge_23]
		6: c, column, dc, dr, r, row
	; 16 pc
	call cell(6@function,u8), getCell, [r(3@function,i16), c(5@function,i16)]
		7: c, cell, column, dc, dr, r, row
	; 197:4 if isOpen([ExprVarAccess[varName=cell, index=6, scope=function, type=u8, varIsArray=false, location=197:15]])
	call t.19(19@function,bool), isOpen, [cell(6@function,u8)]
		8: c, cell, column, dc, dr, r, row, t.19
	branch t.19(19@function,bool), false, @if_39_end
		7: c, cell, column, dc, dr, r, row
	jump @if_39_then
		7: c, cell, column, dc, dr, r, row
	; successors=[@if_39_end, @if_39_then]

; block @if_39_then
	; predecessors=[@if_38_end]
		5: column, dc, dr, r, row
	; 1 pc
	jump @for_35_continue
		5: column, dc, dr, r, row
	; successors=[@for_35_continue]

; block @if_39_end
	; predecessors=[@if_38_end]
		7: c, cell, column, dc, dr, r, row
	; 22 pc
	const t.21(21@function,u8), 2
		8: c, cell, column, dc, dr, r, row, t.21
	or t.20(20@function,u8), cell(6@function,u8), t.21(21@function,u8)
		7: c, column, dc, dr, r, row, t.20
	call _, setCell [r(3@function,i16), c(5@function,i16), t.20(20@function,u8)]
		6: c, column, dc, dr, r, row
	call _, maybeRevealAround [r(3@function,i16), c(5@function,i16)]
		5: column, dc, dr, r, row
	jump @for_35_continue
		5: column, dc, dr, r, row
	; successors=[@for_35_continue]

; block @for_35_continue
	; predecessors=[@if_39_end, @if_39_then, @if_38_then, @if_36_then]
		5: column, dc, dr, r, row
	; 10 pc
	const t.22(22@function,i16), 1
		6: column, dc, dr, r, row, t.22
	add dc(4@function,i16), dc(4@function,i16), t.22(22@function,i16)
		5: column, dc, dr, r, row
	jump @no_critical_edge_24
		5: column, dc, dr, r, row
	; successors=[@no_critical_edge_24]

; block @no_critical_edge_24
	; predecessors=[@for_35_continue]
		5: column, dc, dr, r, row
	; 1 pc
	jump @for_35
		5: column, dc, dr, r, row
	; successors=[@for_35]

; block @for_35_break
	; predecessors=[@for_35]
		3: column, dr, row
	; 1 pc
	jump @for_34_continue
		3: column, dr, row
	; successors=[@for_34_continue]

; block @for_34_continue
	; predecessors=[@for_35_break]
		3: column, dr, row
	; 10 pc
	const t.23(23@function,i16), 1
		4: column, dr, row, t.23
	add dr(2@function,i16), dr(2@function,i16), t.23(23@function,i16)
		3: column, dr, row
	jump @for_34
		3: column, dr, row
	; successors=[@for_34]

; block @for_34_break
	; predecessors=[@for_34]
	; 1 pc
	jump @maybeRevealAround_ret
	; successors=[@maybeRevealAround_ret]

; block @maybeRevealAround_ret
	; predecessors=[@for_34_break, @if_33_then]
	; successors=[]


; CFG for function main
; block main
	; predecessors=[]
	; 25 pc
	; begin initialize global variables
	const __random__(0@global,i32), 0
	; end initialize global variables
	const t.6(6@function,i32), 7439742
		1: t.6
	call _, initRandom [t.6(6@function,i32)]
	const needsInitialize(0@function,bool), 1
		1: needsInitialize
	call _, clearField []
		1: needsInitialize
	const t.7(7@function,u8), 20
		2: needsInitialize, t.7
	cast curr_c(1@function,i16), t.7(7@function,u8)
		2: curr_c, needsInitialize
	const t.8(8@function,u8), 10
		3: curr_c, needsInitialize, t.8
	cast curr_r(2@function,i16), t.8(8@function,u8)
		3: curr_c, curr_r, needsInitialize
	; 213:2 while true
	jump @while_40
		3: curr_c, curr_r, needsInitialize
	; successors=[@while_40]

; block @while_40
	; predecessors=[main, @no_critical_edge_58]
		3: curr_c, curr_r, needsInitialize
	; 14 pc
	call _, printField [curr_r(2@function,i16), curr_c(1@function,i16)]
		3: curr_c, curr_r, needsInitialize
	; 215:3 if !needsInitialize
	notlog t.9(9@function,bool), needsInitialize(0@function,bool)
		4: curr_c, curr_r, needsInitialize, t.9
	branch t.9(9@function,bool), false, @no_critical_edge_40
		3: curr_c, curr_r, needsInitialize
	jump @no_critical_edge_41
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_40, @no_critical_edge_41]

; block @no_critical_edge_41
	; predecessors=[@while_40]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_41_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_41_then]

; block @if_41_then
	; predecessors=[@no_critical_edge_41]
		3: curr_c, curr_r, needsInitialize
	; 7 pc
	; 216:4 if printLeft([])
	call t.10(10@function,bool), printLeft, []
		4: curr_c, curr_r, needsInitialize, t.10
	branch t.10(10@function,bool), false, @if_42_end
		3: curr_c, curr_r, needsInitialize
	jump @if_42_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_42_end, @if_42_then]

; block @if_42_then
	; predecessors=[@if_41_then]
	; 7 pc
	const t.11(11@function,u8*), [string-2]
		1: t.11
	call _, printString [t.11(11@function,u8*)]
	jump @while_40_break
	; successors=[@while_40_break]

; block @if_42_end
	; predecessors=[@if_41_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_41_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_41_end]

; block @no_critical_edge_40
	; predecessors=[@while_40]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_41_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_41_end]

; block @if_41_end
	; predecessors=[@no_critical_edge_40, @if_42_end]
		3: curr_c, curr_r, needsInitialize
	; 16 pc
	call chr(3@function,i16), getChar, []
		4: chr, curr_c, curr_r, needsInitialize
	; 223:3 if chr == 27
	const t.13(13@function,i16), 27
		5: chr, curr_c, curr_r, needsInitialize, t.13
	equals t.12(12@function,bool), chr(3@function,i16), t.13(13@function,i16)
		5: chr, curr_c, curr_r, needsInitialize, t.12
	branch t.12(12@function,bool), false, @no_critical_edge_42
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_43_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_42, @if_43_then]

; block @if_43_then
	; predecessors=[@if_41_end]
	; 1 pc
	jump @while_40_break
	; successors=[@while_40_break]

; block @no_critical_edge_42
	; predecessors=[@if_41_end]
		4: chr, curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_43_end
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_43_end]

; block @if_43_end
	; predecessors=[@no_critical_edge_42]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 228:3 if chr == 57416
	const t.15(15@function,i16), 57416
		5: chr, curr_c, curr_r, needsInitialize, t.15
	equals t.14(14@function,bool), chr(3@function,i16), t.15(15@function,i16)
		5: chr, curr_c, curr_r, needsInitialize, t.14
	branch t.14(14@function,bool), false, @no_critical_edge_43
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_44_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_43, @if_44_then]

; block @if_44_then
	; predecessors=[@if_43_end]
		3: curr_c, curr_r, needsInitialize
	; 28 pc
	const t.18(18@function,i16), 20
		4: curr_c, curr_r, needsInitialize, t.18
	add t.17(17@function,i16), curr_r(2@function,i16), t.18(18@function,i16)
		3: curr_c, needsInitialize, t.17
	const t.19(19@function,i16), 1
		4: curr_c, needsInitialize, t.17, t.19
	sub t.16(16@function,i16), t.17(17@function,i16), t.19(19@function,i16)
		3: curr_c, needsInitialize, t.16
	const t.20(20@function,i16), 20
		4: curr_c, needsInitialize, t.16, t.20
	mod curr_r(2@function,i16), t.16(16@function,i16), t.20(20@function,i16)
		3: curr_c, curr_r, needsInitialize
	jump @if_44_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_44_end]

; block @no_critical_edge_43
	; predecessors=[@if_43_end]
		4: chr, curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_44_else
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_44_else]

; block @if_44_else
	; predecessors=[@no_critical_edge_43]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 232:8 if chr == 57424
	const t.22(22@function,i16), 57424
		5: chr, curr_c, curr_r, needsInitialize, t.22
	equals t.21(21@function,bool), chr(3@function,i16), t.22(22@function,i16)
		5: chr, curr_c, curr_r, needsInitialize, t.21
	branch t.21(21@function,bool), false, @no_critical_edge_44
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_45_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_44, @if_45_then]

; block @if_45_then
	; predecessors=[@if_44_else]
		3: curr_c, curr_r, needsInitialize
	; 19 pc
	const t.24(24@function,i16), 1
		4: curr_c, curr_r, needsInitialize, t.24
	add t.23(23@function,i16), curr_r(2@function,i16), t.24(24@function,i16)
		3: curr_c, needsInitialize, t.23
	const t.25(25@function,i16), 20
		4: curr_c, needsInitialize, t.23, t.25
	mod curr_r(2@function,i16), t.23(23@function,i16), t.25(25@function,i16)
		3: curr_c, curr_r, needsInitialize
	jump @if_45_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_45_end]

; block @no_critical_edge_44
	; predecessors=[@if_44_else]
		4: chr, curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_45_else
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_45_else]

; block @if_45_else
	; predecessors=[@no_critical_edge_44]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 236:8 if chr == 57419
	const t.27(27@function,i16), 57419
		5: chr, curr_c, curr_r, needsInitialize, t.27
	equals t.26(26@function,bool), chr(3@function,i16), t.27(27@function,i16)
		5: chr, curr_c, curr_r, needsInitialize, t.26
	branch t.26(26@function,bool), false, @no_critical_edge_45
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_46_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_45, @if_46_then]

; block @if_46_then
	; predecessors=[@if_45_else]
		3: curr_c, curr_r, needsInitialize
	; 28 pc
	const t.30(30@function,i16), 40
		4: curr_c, curr_r, needsInitialize, t.30
	add t.29(29@function,i16), curr_c(1@function,i16), t.30(30@function,i16)
		3: curr_r, needsInitialize, t.29
	const t.31(31@function,i16), 1
		4: curr_r, needsInitialize, t.29, t.31
	sub t.28(28@function,i16), t.29(29@function,i16), t.31(31@function,i16)
		3: curr_r, needsInitialize, t.28
	const t.32(32@function,i16), 40
		4: curr_r, needsInitialize, t.28, t.32
	mod curr_c(1@function,i16), t.28(28@function,i16), t.32(32@function,i16)
		3: curr_c, curr_r, needsInitialize
	jump @if_46_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_46_end]

; block @no_critical_edge_45
	; predecessors=[@if_45_else]
		4: chr, curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_46_else
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_46_else]

; block @if_46_else
	; predecessors=[@no_critical_edge_45]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 240:8 if chr == 57419
	const t.34(34@function,i16), 57419
		5: chr, curr_c, curr_r, needsInitialize, t.34
	equals t.33(33@function,bool), chr(3@function,i16), t.34(34@function,i16)
		5: chr, curr_c, curr_r, needsInitialize, t.33
	branch t.33(33@function,bool), false, @no_critical_edge_46
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_47_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_46, @if_47_then]

; block @if_47_then
	; predecessors=[@if_46_else]
		3: curr_c, curr_r, needsInitialize
	; 28 pc
	const t.37(37@function,i16), 40
		4: curr_c, curr_r, needsInitialize, t.37
	add t.36(36@function,i16), curr_c(1@function,i16), t.37(37@function,i16)
		3: curr_r, needsInitialize, t.36
	const t.38(38@function,i16), 1
		4: curr_r, needsInitialize, t.36, t.38
	sub t.35(35@function,i16), t.36(36@function,i16), t.38(38@function,i16)
		3: curr_r, needsInitialize, t.35
	const t.39(39@function,i16), 40
		4: curr_r, needsInitialize, t.35, t.39
	mod curr_c(1@function,i16), t.35(35@function,i16), t.39(39@function,i16)
		3: curr_c, curr_r, needsInitialize
	jump @if_47_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_47_end]

; block @no_critical_edge_46
	; predecessors=[@if_46_else]
		4: chr, curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_47_else
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_47_else]

; block @if_47_else
	; predecessors=[@no_critical_edge_46]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 244:8 if chr == 57421
	const t.41(41@function,i16), 57421
		5: chr, curr_c, curr_r, needsInitialize, t.41
	equals t.40(40@function,bool), chr(3@function,i16), t.41(41@function,i16)
		5: chr, curr_c, curr_r, needsInitialize, t.40
	branch t.40(40@function,bool), false, @no_critical_edge_47
		4: chr, curr_c, curr_r, needsInitialize
	jump @if_48_then
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_47, @if_48_then]

; block @if_48_then
	; predecessors=[@if_47_else]
		3: curr_c, curr_r, needsInitialize
	; 19 pc
	const t.43(43@function,i16), 1
		4: curr_c, curr_r, needsInitialize, t.43
	add t.42(42@function,i16), curr_c(1@function,i16), t.43(43@function,i16)
		3: curr_r, needsInitialize, t.42
	const t.44(44@function,i16), 40
		4: curr_r, needsInitialize, t.42, t.44
	mod curr_c(1@function,i16), t.42(42@function,i16), t.44(44@function,i16)
		3: curr_c, curr_r, needsInitialize
	jump @if_48_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_48_end]

; block @no_critical_edge_47
	; predecessors=[@if_47_else]
		4: chr, curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_48_else
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_48_else]

; block @if_48_else
	; predecessors=[@no_critical_edge_47]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 248:8 if chr == 32
	const t.46(46@function,i16), 32
		5: chr, curr_c, curr_r, needsInitialize, t.46
	equals t.45(45@function,bool), chr(3@function,i16), t.46(46@function,i16)
		5: chr, curr_c, curr_r, needsInitialize, t.45
	branch t.45(45@function,bool), false, @no_critical_edge_48
		4: chr, curr_c, curr_r, needsInitialize
	jump @no_critical_edge_49
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_48, @no_critical_edge_49]

; block @no_critical_edge_49
	; predecessors=[@if_48_else]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_49_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_49_then]

; block @if_49_then
	; predecessors=[@no_critical_edge_49]
		3: curr_c, curr_r, needsInitialize
	; 9 pc
	; 249:4 if !needsInitialize
	notlog t.47(47@function,bool), needsInitialize(0@function,bool)
		4: curr_c, curr_r, needsInitialize, t.47
	branch t.47(47@function,bool), false, @no_critical_edge_61
		3: curr_c, curr_r, needsInitialize
	jump @no_critical_edge_62
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_61, @no_critical_edge_62]

; block @no_critical_edge_62
	; predecessors=[@if_49_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_50_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_50_then]

; block @if_50_then
	; predecessors=[@no_critical_edge_62]
		3: curr_c, curr_r, needsInitialize
	; 21 pc
	call cell(4@function,u8), getCell, [curr_r(2@function,i16), curr_c(1@function,i16)]
		4: cell, curr_c, curr_r, needsInitialize
	; 251:5 if !isOpen([ExprVarAccess[varName=cell, index=4, scope=function, type=u8, varIsArray=false, location=251:17]])
	call t.49(49@function,bool), isOpen, [cell(4@function,u8)]
		5: cell, curr_c, curr_r, needsInitialize, t.49
	notlog t.48(48@function,bool), t.49(49@function,bool)
		5: cell, curr_c, curr_r, needsInitialize, t.48
	branch t.48(48@function,bool), false, @no_critical_edge_64
		4: cell, curr_c, curr_r, needsInitialize
	jump @if_51_then
		4: cell, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_64, @if_51_then]

; block @if_51_then
	; predecessors=[@if_50_then]
		4: cell, curr_c, curr_r, needsInitialize
	; 17 pc
	const t.50(50@function,u8), 4
		5: cell, curr_c, curr_r, needsInitialize, t.50
	xor cell(4@function,u8), cell(4@function,u8), t.50(50@function,u8)
		4: cell, curr_c, curr_r, needsInitialize
	call _, setCell [curr_r(2@function,i16), curr_c(1@function,i16), cell(4@function,u8)]
		3: curr_c, curr_r, needsInitialize
	jump @if_51_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_51_end]

; block @no_critical_edge_64
	; predecessors=[@if_50_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_51_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_51_end]

; block @if_51_end
	; predecessors=[@no_critical_edge_64, @if_51_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @no_critical_edge_65
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_65]

; block @no_critical_edge_65
	; predecessors=[@if_51_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_50_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_50_end]

; block @no_critical_edge_61
	; predecessors=[@if_49_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_50_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_50_end]

; block @if_50_end
	; predecessors=[@no_critical_edge_61, @no_critical_edge_65]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @no_critical_edge_63
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_63]

; block @no_critical_edge_63
	; predecessors=[@if_50_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_49_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_49_end]

; block @no_critical_edge_48
	; predecessors=[@if_48_else]
		4: chr, curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_49_else
		4: chr, curr_c, curr_r, needsInitialize
	; successors=[@if_49_else]

; block @if_49_else
	; predecessors=[@no_critical_edge_48]
		4: chr, curr_c, curr_r, needsInitialize
	; 13 pc
	; 257:8 if chr == 13
	const t.52(52@function,i16), 13
		5: chr, curr_c, curr_r, needsInitialize, t.52
	equals t.51(51@function,bool), chr(3@function,i16), t.52(52@function,i16)
		4: curr_c, curr_r, needsInitialize, t.51
	branch t.51(51@function,bool), false, @no_critical_edge_50
		3: curr_c, curr_r, needsInitialize
	jump @no_critical_edge_51
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_50, @no_critical_edge_51]

; block @no_critical_edge_51
	; predecessors=[@if_49_else]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_52_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_52_then]

; block @if_52_then
	; predecessors=[@no_critical_edge_51]
		3: curr_c, curr_r, needsInitialize
	; 4 pc
	branch needsInitialize(0@function,bool), false, @no_critical_edge_59
		3: curr_c, curr_r, needsInitialize
	jump @if_53_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_59, @if_53_then]

; block @if_53_then
	; predecessors=[@if_52_then]
		2: curr_c, curr_r
	; 8 pc
	const needsInitialize(0@function,bool), 0
		3: curr_c, curr_r, needsInitialize
	call _, initField [curr_r(2@function,i16), curr_c(1@function,i16)]
		3: curr_c, curr_r, needsInitialize
	jump @if_53_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_53_end]

; block @no_critical_edge_59
	; predecessors=[@if_52_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_53_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_53_end]

; block @if_53_end
	; predecessors=[@no_critical_edge_59, @if_53_then]
		3: curr_c, curr_r, needsInitialize
	; 21 pc
	call cell(5@function,u8), getCell, [curr_r(2@function,i16), curr_c(1@function,i16)]
		4: cell, curr_c, curr_r, needsInitialize
	; 263:4 if !isOpen([ExprVarAccess[varName=cell, index=5, scope=function, type=u8, varIsArray=false, location=263:16]])
	call t.54(54@function,bool), isOpen, [cell(5@function,u8)]
		5: cell, curr_c, curr_r, needsInitialize, t.54
	notlog t.53(53@function,bool), t.54(54@function,bool)
		5: cell, curr_c, curr_r, needsInitialize, t.53
	branch t.53(53@function,bool), false, @no_critical_edge_60
		4: cell, curr_c, curr_r, needsInitialize
	jump @if_54_then
		4: cell, curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_60, @if_54_then]

; block @if_54_then
	; predecessors=[@if_53_end]
		4: cell, curr_c, curr_r, needsInitialize
	; 17 pc
	const t.56(56@function,u8), 2
		5: cell, curr_c, curr_r, needsInitialize, t.56
	or t.55(55@function,u8), cell(5@function,u8), t.56(56@function,u8)
		5: cell, curr_c, curr_r, needsInitialize, t.55
	call _, setCell [curr_r(2@function,i16), curr_c(1@function,i16), t.55(55@function,u8)]
		4: cell, curr_c, curr_r, needsInitialize
	jump @if_54_end
		4: cell, curr_c, curr_r, needsInitialize
	; successors=[@if_54_end]

; block @no_critical_edge_60
	; predecessors=[@if_53_end]
		4: cell, curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_54_end
		4: cell, curr_c, curr_r, needsInitialize
	; successors=[@if_54_end]

; block @if_54_end
	; predecessors=[@no_critical_edge_60, @if_54_then]
		4: cell, curr_c, curr_r, needsInitialize
	; 9 pc
	; 266:4 if isBomb([ExprVarAccess[varName=cell, index=5, scope=function, type=u8, varIsArray=false, location=266:15]])
	call t.57(57@function,bool), isBomb, [cell(5@function,u8)]
		4: curr_c, curr_r, needsInitialize, t.57
	branch t.57(57@function,bool), false, @if_55_end
		3: curr_c, curr_r, needsInitialize
	jump @if_55_then
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_55_end, @if_55_then]

; block @if_55_then
	; predecessors=[@if_54_end]
		2: curr_c, curr_r
	; 12 pc
	call _, printField [curr_r(2@function,i16), curr_c(1@function,i16)]
	const t.58(58@function,u8*), [string-3]
		1: t.58
	call _, printString [t.58(58@function,u8*)]
	jump @while_40_break
	; successors=[@while_40_break]

; block @while_40_break
	; predecessors=[@if_55_then, @if_43_then, @if_42_then]
	; 1 pc
	jump @main_ret
	; successors=[@main_ret]

; block @if_55_end
	; predecessors=[@if_54_end]
		3: curr_c, curr_r, needsInitialize
	; 6 pc
	call _, maybeRevealAround [curr_r(2@function,i16), curr_c(1@function,i16)]
		3: curr_c, curr_r, needsInitialize
	jump @if_52_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_52_end]

; block @no_critical_edge_50
	; predecessors=[@if_49_else]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_52_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_52_end]

; block @if_52_end
	; predecessors=[@no_critical_edge_50, @if_55_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @no_critical_edge_52
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_52]

; block @no_critical_edge_52
	; predecessors=[@if_52_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_49_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_49_end]

; block @if_49_end
	; predecessors=[@no_critical_edge_52, @no_critical_edge_63]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @no_critical_edge_53
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_53]

; block @no_critical_edge_53
	; predecessors=[@if_49_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_48_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_48_end]

; block @if_48_end
	; predecessors=[@no_critical_edge_53, @if_48_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @no_critical_edge_54
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_54]

; block @no_critical_edge_54
	; predecessors=[@if_48_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_47_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_47_end]

; block @if_47_end
	; predecessors=[@no_critical_edge_54, @if_47_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @no_critical_edge_55
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_55]

; block @no_critical_edge_55
	; predecessors=[@if_47_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_46_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_46_end]

; block @if_46_end
	; predecessors=[@no_critical_edge_55, @if_46_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @no_critical_edge_56
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_56]

; block @no_critical_edge_56
	; predecessors=[@if_46_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_45_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_45_end]

; block @if_45_end
	; predecessors=[@no_critical_edge_56, @if_45_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @no_critical_edge_57
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_57]

; block @no_critical_edge_57
	; predecessors=[@if_45_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @if_44_end
		3: curr_c, curr_r, needsInitialize
	; successors=[@if_44_end]

; block @if_44_end
	; predecessors=[@no_critical_edge_57, @if_44_then]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @no_critical_edge_58
		3: curr_c, curr_r, needsInitialize
	; successors=[@no_critical_edge_58]

; block @no_critical_edge_58
	; predecessors=[@if_44_end]
		3: curr_c, curr_r, needsInitialize
	; 1 pc
	jump @while_40
		3: curr_c, curr_r, needsInitialize
	; successors=[@while_40]

; block @main_ret
	; predecessors=[@while_40_break]
	; successors=[]


