@printString:
 Local variables
	arg 0: str
	var 1: length
	call length(1@function,i64), strlen, [str(0@argument,u8*)]
	call _, printStringLength [str(0@argument,u8*), length(1@function,i64)]
@printString_ret:

@printChar:
 Local variables
	arg 0: chr
	var 1: t.1
	var 2: t.2
	addrof t.1(1@function,u8*), chr(0@argument,u8)
	const t.2(2@function,i64), 1
	call _, printStringLength [t.1(1@function,u8*), t.2(2@function,i64)]
@printChar_ret:

@printUint:
 Local variables
	arg 0: number
	var 1: buffer
	var 2: pos
	var 3: remainder
	var 4: digit
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	var 9: t.9
	var 10: t.10
	var 11: t.11
	var 12: t.12
	var 13: t.13
	var 14: t.14
	var 15: t.15
	var 16: t.16
	var 17: t.17
	var 18: t.18
	const pos(2@function,u8), 20
	; 13:2 while true
@while_1:
	const t.5(5@function,u8), 1
	sub pos(2@function,u8), pos(2@function,u8), t.5(5@function,u8)
	const t.6(6@function,i64), 10
	mod remainder(3@function,i64), number(0@argument,i64), t.6(6@function,i64)
	const t.7(7@function,i64), 10
	div number(0@argument,i64), number(0@argument,i64), t.7(7@function,i64)
	cast t.8(8@function,u8), remainder(3@function,i64)
	const t.9(9@function,u8), 48
	add digit(4@function,u8), t.8(8@function,u8), t.9(9@function,u8)
	cast t.10(10@function,i64), pos(2@function,u8)
	array t.11(11@function,u8*), buffer(1@function,u8*) + t.10(10@function,i64)
	store [t.11(11@function,u8*)], digit(4@function,u8)
	; 19:3 if number == 0
	const t.13(13@function,i64), 0
	equals t.12(12@function,bool), number(0@argument,i64), t.13(13@function,i64)
	branch t.12(12@function,bool), false, @if_2_end
	jump @while_1_break
@if_2_end:
	jump @while_1
@while_1_break:
	cast t.15(15@function,i64), pos(2@function,u8)
	addrof t.14(14@function,u8*), [buffer(1@function,u8*) + t.15(15@function,i64)]
	const t.18(18@function,u8), 20
	sub t.17(17@function,u8), t.18(18@function,u8), pos(2@function,u8)
	cast t.16(16@function,i64), t.17(17@function,u8)
	call _, printStringLength [t.14(14@function,u8*), t.16(16@function,i64)]
@printUint_ret:

@printIntLf:
 Local variables
	arg 0: number
	var 1: t.1
	var 2: t.2
	var 3: t.3
	var 4: t.4
	; 27:2 if number < 0
	const t.2(2@function,i64), 0
	lt t.1(1@function,bool), number(0@argument,i64), t.2(2@function,i64)
	branch t.1(1@function,bool), false, @if_3_end
	const t.3(3@function,u8), 45
	call _, printChar [t.3(3@function,u8)]
	neg number(0@argument,i64), number(0@argument,i64)
@if_3_end:
	call _, printUint [number(0@argument,i64)]
	const t.4(4@function,u8), 10
	call _, printChar [t.4(4@function,u8)]
@printIntLf_ret:

@strlen:
 Local variables
	arg 0: str
	var 1: length
	var 2: t.2
	var 3: t.3
	var 4: t.4
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	const length(1@function,i64), 0
	; 37:2 for *str != 0
@for_4:
	load t.3(3@function,u8), [str(0@argument,u8*)]
	const t.4(4@function,u8), 0
	notequals t.2(2@function,bool), t.3(3@function,u8), t.4(4@function,u8)
	branch t.2(2@function,bool), false, @for_4_break
	const t.5(5@function,i64), 1
	add length(1@function,i64), length(1@function,i64), t.5(5@function,i64)
@for_4_continue:
	cast t.7(7@function,i64), str(0@argument,u8*)
	const t.8(8@function,i64), 1
	add t.6(6@function,i64), t.7(7@function,i64), t.8(8@function,i64)
	cast str(0@argument,u8*), t.6(6@function,i64)
	jump @for_4
@for_4_break:
	; 40:9 return length
	ret length(1@function,i64)
	jump @strlen_ret
@strlen_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

@main:
 Local variables
	var 0: t.0
	var 1: t.1
	var 2: t.2
	var 3: t.3
	var 4: t.4
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	var 9: t.9
	var 10: t.10
	var 11: t.11
	var 12: t.12
	var 13: t.13
	var 14: t.14
	var 15: t.15
	var 16: t.16
	var 17: t.17
	var 18: t.18
	var 19: t.19
	var 20: t.20
	var 21: t.21
	var 22: t.22
	var 23: t.23
	var 24: t.24
	var 25: t.25
	var 26: t.26
	var 27: t.27
	var 28: t.28
	var 29: t.29
	var 30: t.30
	var 31: t.31
	var 32: t.32
	var 33: t.33
	var 34: t.34
	var 35: t.35
	var 36: t.36
	var 37: t.37
	var 38: t.38
	var 39: t.39
	var 40: t.40
	var 41: t.41
	var 42: t.42
	var 43: t.43
	var 44: t.44
	var 45: t.45
	var 46: t.46
	var 47: t.47
	var 48: t.48
	var 49: t.49
	var 50: t.50
	var 51: t.51
	var 52: t.52
	var 53: t.53
	var 54: t.54
	var 55: t.55
	var 56: t.56
	var 57: t.57
	var 58: t.58
	var 59: t.59
	var 60: t.60
	var 61: t.61
	var 62: t.62
	var 63: t.63
	var 64: t.64
	var 65: t.65
	var 66: t.66
	var 67: t.67
	var 68: t.68
	var 69: t.69
	var 70: t.70
	var 71: t.71
	var 72: t.72
	var 73: t.73
	var 74: t.74
	var 75: t.75
	var 76: t.76
	var 77: t.77
	var 78: t.78
	var 79: t.79
	var 80: t.80
	var 81: t.81
	var 82: t.82
	var 83: t.83
	var 84: t.84
	var 85: t.85
	var 86: t.86
	var 87: t.87
	var 88: t.88
	var 89: t.89
	var 90: t.90
	var 91: t.91
	var 92: t.92
	var 93: t.93
	var 94: t.94
	var 95: t.95
	var 96: t.96
	var 97: t.97
	var 98: t.98
	var 99: t.99
	var 100: t.100
	const t.0(0@function,u8*), [string-0]
	call _, printString [t.0(0@function,u8*)]
	const t.3(3@function,u8), 0
	const t.4(4@function,u8), 0
	and t.2(2@function,u8), t.3(3@function,u8), t.4(4@function,u8)
	cast t.1(1@function,i64), t.2(2@function,u8)
	call _, printIntLf [t.1(1@function,i64)]
	const t.7(7@function,u8), 0
	const t.8(8@function,u8), 1
	and t.6(6@function,u8), t.7(7@function,u8), t.8(8@function,u8)
	cast t.5(5@function,i64), t.6(6@function,u8)
	call _, printIntLf [t.5(5@function,i64)]
	const t.11(11@function,u8), 1
	const t.12(12@function,u8), 0
	and t.10(10@function,u8), t.11(11@function,u8), t.12(12@function,u8)
	cast t.9(9@function,i64), t.10(10@function,u8)
	call _, printIntLf [t.9(9@function,i64)]
	const t.15(15@function,u8), 1
	const t.16(16@function,u8), 1
	and t.14(14@function,u8), t.15(15@function,u8), t.16(16@function,u8)
	cast t.13(13@function,i64), t.14(14@function,u8)
	call _, printIntLf [t.13(13@function,i64)]
	const t.17(17@function,u8*), [string-1]
	call _, printString [t.17(17@function,u8*)]
	const t.20(20@function,u8), 0
	const t.21(21@function,u8), 0
	or t.19(19@function,u8), t.20(20@function,u8), t.21(21@function,u8)
	cast t.18(18@function,i64), t.19(19@function,u8)
	call _, printIntLf [t.18(18@function,i64)]
	const t.24(24@function,u8), 0
	const t.25(25@function,u8), 1
	or t.23(23@function,u8), t.24(24@function,u8), t.25(25@function,u8)
	cast t.22(22@function,i64), t.23(23@function,u8)
	call _, printIntLf [t.22(22@function,i64)]
	const t.28(28@function,u8), 1
	const t.29(29@function,u8), 0
	or t.27(27@function,u8), t.28(28@function,u8), t.29(29@function,u8)
	cast t.26(26@function,i64), t.27(27@function,u8)
	call _, printIntLf [t.26(26@function,i64)]
	const t.32(32@function,u8), 1
	const t.33(33@function,u8), 1
	or t.31(31@function,u8), t.32(32@function,u8), t.33(33@function,u8)
	cast t.30(30@function,i64), t.31(31@function,u8)
	call _, printIntLf [t.30(30@function,i64)]
	const t.34(34@function,u8*), [string-2]
	call _, printString [t.34(34@function,u8*)]
	const t.37(37@function,u8), 0
	const t.38(38@function,u8), 0
	xor t.36(36@function,u8), t.37(37@function,u8), t.38(38@function,u8)
	cast t.35(35@function,i64), t.36(36@function,u8)
	call _, printIntLf [t.35(35@function,i64)]
	const t.41(41@function,u8), 0
	const t.42(42@function,u8), 2
	xor t.40(40@function,u8), t.41(41@function,u8), t.42(42@function,u8)
	cast t.39(39@function,i64), t.40(40@function,u8)
	call _, printIntLf [t.39(39@function,i64)]
	const t.45(45@function,u8), 1
	const t.46(46@function,u8), 0
	xor t.44(44@function,u8), t.45(45@function,u8), t.46(46@function,u8)
	cast t.43(43@function,i64), t.44(44@function,u8)
	call _, printIntLf [t.43(43@function,i64)]
	const t.49(49@function,u8), 1
	const t.50(50@function,u8), 2
	xor t.48(48@function,u8), t.49(49@function,u8), t.50(50@function,u8)
	cast t.47(47@function,i64), t.48(48@function,u8)
	call _, printIntLf [t.47(47@function,i64)]
	const t.51(51@function,u8*), [string-3]
	call _, printString [t.51(51@function,u8*)]
	; 20:19 logic and
	const t.53(53@function,bool), 0
	branch t.53(53@function,bool), false, @and_next_5
	const t.53(53@function,bool), 0
@and_next_5:
	cast t.52(52@function,i64), t.53(53@function,bool)
	call _, printIntLf [t.52(52@function,i64)]
	; 21:19 logic and
	const t.55(55@function,bool), 0
	branch t.55(55@function,bool), false, @and_next_6
	const t.55(55@function,bool), 1
@and_next_6:
	cast t.54(54@function,i64), t.55(55@function,bool)
	call _, printIntLf [t.54(54@function,i64)]
	; 22:18 logic and
	const t.57(57@function,bool), 1
	branch t.57(57@function,bool), false, @and_next_7
	const t.57(57@function,bool), 0
@and_next_7:
	cast t.56(56@function,i64), t.57(57@function,bool)
	call _, printIntLf [t.56(56@function,i64)]
	; 23:18 logic and
	const t.59(59@function,bool), 1
	branch t.59(59@function,bool), false, @and_next_8
	const t.59(59@function,bool), 1
@and_next_8:
	cast t.58(58@function,i64), t.59(59@function,bool)
	call _, printIntLf [t.58(58@function,i64)]
	const t.60(60@function,u8*), [string-4]
	call _, printString [t.60(60@function,u8*)]
	; 25:19 logic or
	const t.62(62@function,bool), 0
	branch t.62(62@function,bool), true, @or_next_9
	const t.62(62@function,bool), 0
@or_next_9:
	cast t.61(61@function,i64), t.62(62@function,bool)
	call _, printIntLf [t.61(61@function,i64)]
	; 26:19 logic or
	const t.64(64@function,bool), 0
	branch t.64(64@function,bool), true, @or_next_10
	const t.64(64@function,bool), 1
@or_next_10:
	cast t.63(63@function,i64), t.64(64@function,bool)
	call _, printIntLf [t.63(63@function,i64)]
	; 27:18 logic or
	const t.66(66@function,bool), 1
	branch t.66(66@function,bool), true, @or_next_11
	const t.66(66@function,bool), 0
@or_next_11:
	cast t.65(65@function,i64), t.66(66@function,bool)
	call _, printIntLf [t.65(65@function,i64)]
	; 28:18 logic or
	const t.68(68@function,bool), 1
	branch t.68(68@function,bool), true, @or_next_12
	const t.68(68@function,bool), 1
@or_next_12:
	cast t.67(67@function,i64), t.68(68@function,bool)
	call _, printIntLf [t.67(67@function,i64)]
	const t.69(69@function,u8*), [string-5]
	call _, printString [t.69(69@function,u8*)]
	const t.72(72@function,bool), 0
	notlog t.71(71@function,bool), t.72(72@function,bool)
	cast t.70(70@function,i64), t.71(71@function,bool)
	call _, printIntLf [t.70(70@function,i64)]
	const t.75(75@function,bool), 1
	notlog t.74(74@function,bool), t.75(75@function,bool)
	cast t.73(73@function,i64), t.74(74@function,bool)
	call _, printIntLf [t.73(73@function,i64)]
	const t.76(76@function,u8*), [string-6]
	call _, printString [t.76(76@function,u8*)]
	const t.80(80@function,u8), 10
	const t.81(81@function,u8), 6
	and t.79(79@function,u8), t.80(80@function,u8), t.81(81@function,u8)
	const t.82(82@function,u8), 1
	or t.78(78@function,u8), t.79(79@function,u8), t.82(82@function,u8)
	cast t.77(77@function,i64), t.78(78@function,u8)
	call _, printIntLf [t.77(77@function,i64)]
	; 34:20 logic or
	const t.85(85@function,u8), 1
	const t.86(86@function,u8), 2
	equals t.84(84@function,bool), t.85(85@function,u8), t.86(86@function,u8)
	branch t.84(84@function,bool), true, @or_next_13
	const t.87(87@function,u8), 2
	const t.88(88@function,u8), 3
	lt t.84(84@function,bool), t.87(87@function,u8), t.88(88@function,u8)
@or_next_13:
	cast t.83(83@function,i64), t.84(84@function,bool)
	call _, printIntLf [t.83(83@function,i64)]
	; 35:20 logic and
	const t.91(91@function,u8), 1
	const t.92(92@function,u8), 2
	equals t.90(90@function,bool), t.91(91@function,u8), t.92(92@function,u8)
	branch t.90(90@function,bool), false, @and_next_14
	const t.93(93@function,u8), 2
	const t.94(94@function,u8), 3
	lt t.90(90@function,bool), t.93(93@function,u8), t.94(94@function,u8)
@and_next_14:
	cast t.89(89@function,i64), t.90(90@function,bool)
	call _, printIntLf [t.89(89@function,i64)]
	const t.97(97@function,i16), 1
	neg t.96(96@function,i16), t.97(97@function,i16)
	cast t.95(95@function,i64), t.96(96@function,i16)
	call _, printIntLf [t.95(95@function,i64)]
	const t.100(100@function,u8), 1
	not t.99(99@function,u8), t.100(100@function,u8)
	cast t.98(98@function,i64), t.99(99@function,u8)
	call _, printIntLf [t.98(98@function,i64)]
@main_ret:

String literals
	string lit 0 "Bit-&:\n\0"
	string lit 1 "\nBit-|:\n\0"
	string lit 2 "\nBit-^:\n\0"
	string lit 3 "\nLogic-&&:\n\0"
	string lit 4 "\nLogic-||:\n\0"
	string lit 5 "\nLogic-!:\n\0"
	string lit 6 "\nmisc:\n\0"
