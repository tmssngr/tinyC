@printString:
 Local variables
	arg 0: str
	var 1: length
	; 10 pc
	call length(1@function,i64), strlen, [str(0@argument,u8*)]
	call _, printStringLength [str(0@argument,u8*), length(1@function,i64)]
@printString_ret:

@printChar:
 Local variables
	arg 0: chr
	var 1: t.1
	var 2: t.2
	; 12 pc
	addrof t.1(1@function,u8*), chr(0@argument,u8)
	const t.2(2@function,i64), 1
	call _, printStringLength [t.1(1@function,u8*), t.2(2@function,i64)]
@printChar_ret:

@printUint:
 Local variables
	arg 0: number
	var 1: buffer
	var 2: pos
	var 3: remainder
	var 4: digit
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	var 9: t.9
	var 10: t.10
	var 11: t.11
	var 12: t.12
	var 13: t.13
	var 14: t.14
	var 15: t.15
	var 16: t.16
	var 17: t.17
	var 18: t.18
	var 19: t.19
	var 20: t.20
	; 122 pc
	const pos(2@function,u8), 20
	; 13:2 while true
@while_1:
	const t.5(5@function,u8), 1
	sub pos(2@function,u8), pos(2@function,u8), t.5(5@function,u8)
	const t.6(6@function,i64), 10
	mod remainder(3@function,i64), number(0@argument,i64), t.6(6@function,i64)
	const t.7(7@function,i64), 10
	div number(0@argument,i64), number(0@argument,i64), t.7(7@function,i64)
	cast t.8(8@function,u8), remainder(3@function,i64)
	const t.9(9@function,u8), 48
	add digit(4@function,u8), t.8(8@function,u8), t.9(9@function,u8)
	cast t.11(11@function,i64), pos(2@function,u8)
	cast t.12(12@function,u8*), t.11(11@function,i64)
	addrof t.10(10@function,u8*), [buffer(1@function,u8*)]
	add t.10(10@function,u8*), t.10(10@function,u8*), t.12(12@function,u8*)
	store [t.10(10@function,u8*)], digit(4@function,u8)
	; 19:3 if number == 0
	const t.14(14@function,i64), 0
	equals t.13(13@function,bool), number(0@argument,i64), t.14(14@function,i64)
	branch t.13(13@function,bool), false, @if_2_end
	jump @while_1_break
@if_2_end:
	jump @while_1
@while_1_break:
	cast t.16(16@function,i64), pos(2@function,u8)
	cast t.17(17@function,u8*), t.16(16@function,i64)
	addrof t.15(15@function,u8*), [buffer(1@function,u8*)]
	add t.15(15@function,u8*), t.15(15@function,u8*), t.17(17@function,u8*)
	const t.20(20@function,u8), 20
	sub t.19(19@function,u8), t.20(20@function,u8), pos(2@function,u8)
	cast t.18(18@function,i64), t.19(19@function,u8)
	call _, printStringLength [t.15(15@function,u8*), t.18(18@function,i64)]
@printUint_ret:

@printIntLf:
 Local variables
	arg 0: number
	var 1: t.1
	var 2: t.2
	var 3: t.3
	var 4: t.4
	; 30 pc
	; 27:2 if number < 0
	const t.2(2@function,i64), 0
	lt t.1(1@function,bool), number(0@argument,i64), t.2(2@function,i64)
	branch t.1(1@function,bool), false, @if_3_end
	const t.3(3@function,u8), 45
	call _, printChar [t.3(3@function,u8)]
	neg number(0@argument,i64), number(0@argument,i64)
@if_3_end:
	call _, printUint [number(0@argument,i64)]
	const t.4(4@function,u8), 10
	call _, printChar [t.4(4@function,u8)]
@printIntLf_ret:

@strlen:
 Local variables
	arg 0: str
	var 1: length
	var 2: t.2
	var 3: t.3
	var 4: t.4
	var 5: t.5
	var 6: t.6
	var 7: t.7
	var 8: t.8
	; 53 pc
	const length(1@function,i64), 0
	; 37:2 for *str != 0
@for_4:
	load t.3(3@function,u8), [str(0@argument,u8*)]
	const t.4(4@function,u8), 0
	notequals t.2(2@function,bool), t.3(3@function,u8), t.4(4@function,u8)
	branch t.2(2@function,bool), false, @for_4_break
	const t.5(5@function,i64), 1
	add length(1@function,i64), length(1@function,i64), t.5(5@function,i64)
@for_4_continue:
	cast t.7(7@function,i64), str(0@argument,u8*)
	const t.8(8@function,i64), 1
	add t.6(6@function,i64), t.7(7@function,i64), t.8(8@function,i64)
	cast str(0@argument,u8*), t.6(6@function,i64)
	jump @for_4
@for_4_break:
	; 40:9 return length
	ret length(1@function,i64)
	jump @strlen_ret
@strlen_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

@main:
 Local variables
	var 0: a
	var 1: b
	var 2: c
	var 3: d
	var 4: t
	var 5: f
	var 6: b10
	var 7: b6
	var 8: b1
	var 9: t.9
	var 10: t.10
	var 11: t.11
	var 12: t.12
	var 13: t.13
	var 14: t.14
	var 15: t.15
	var 16: t.16
	var 17: t.17
	var 18: t.18
	var 19: t.19
	var 20: t.20
	var 21: t.21
	var 22: t.22
	var 23: t.23
	var 24: t.24
	var 25: t.25
	var 26: t.26
	var 27: t.27
	var 28: t.28
	var 29: t.29
	var 30: t.30
	var 31: t.31
	var 32: t.32
	var 33: t.33
	var 34: t.34
	var 35: t.35
	var 36: t.36
	var 37: t.37
	var 38: t.38
	var 39: t.39
	var 40: t.40
	var 41: t.41
	var 42: t.42
	var 43: t.43
	var 44: t.44
	var 45: t.45
	var 46: t.46
	var 47: t.47
	var 48: t.48
	var 49: t.49
	var 50: t.50
	var 51: t.51
	var 52: t.52
	var 53: t.53
	var 54: t.54
	var 55: t.55
	var 56: t.56
	var 57: t.57
	var 58: t.58
	var 59: t.59
	var 60: t.60
	var 61: t.61
	var 62: t.62
	var 63: t.63
	var 64: t.64
	var 65: t.65
	var 66: t.66
	var 67: t.67
	var 68: t.68
	var 69: t.69
	var 70: t.70
	var 71: t.71
	var 72: t.72
	; 542 pc
	; begin initialize global variables
	; end initialize global variables
	const t.9(9@function,u8*), [string-0]
	call _, printString [t.9(9@function,u8*)]
	const a(0@function,i16), 0
	const b(1@function,i16), 1
	const c(2@function,i16), 2
	const d(3@function,i16), 3
	const t(4@function,bool), 1
	const f(5@function,bool), 0
	and t.11(11@function,i16), a(0@function,i16), a(0@function,i16)
	cast t.10(10@function,i64), t.11(11@function,i16)
	call _, printIntLf [t.10(10@function,i64)]
	and t.13(13@function,i16), a(0@function,i16), b(1@function,i16)
	cast t.12(12@function,i64), t.13(13@function,i16)
	call _, printIntLf [t.12(12@function,i64)]
	and t.15(15@function,i16), b(1@function,i16), a(0@function,i16)
	cast t.14(14@function,i64), t.15(15@function,i16)
	call _, printIntLf [t.14(14@function,i64)]
	and t.17(17@function,i16), b(1@function,i16), b(1@function,i16)
	cast t.16(16@function,i64), t.17(17@function,i16)
	call _, printIntLf [t.16(16@function,i64)]
	const t.18(18@function,u8*), [string-1]
	call _, printString [t.18(18@function,u8*)]
	or t.20(20@function,i16), a(0@function,i16), a(0@function,i16)
	cast t.19(19@function,i64), t.20(20@function,i16)
	call _, printIntLf [t.19(19@function,i64)]
	or t.22(22@function,i16), a(0@function,i16), b(1@function,i16)
	cast t.21(21@function,i64), t.22(22@function,i16)
	call _, printIntLf [t.21(21@function,i64)]
	or t.24(24@function,i16), b(1@function,i16), a(0@function,i16)
	cast t.23(23@function,i64), t.24(24@function,i16)
	call _, printIntLf [t.23(23@function,i64)]
	or t.26(26@function,i16), b(1@function,i16), b(1@function,i16)
	cast t.25(25@function,i64), t.26(26@function,i16)
	call _, printIntLf [t.25(25@function,i64)]
	const t.27(27@function,u8*), [string-2]
	call _, printString [t.27(27@function,u8*)]
	xor t.29(29@function,i16), a(0@function,i16), a(0@function,i16)
	cast t.28(28@function,i64), t.29(29@function,i16)
	call _, printIntLf [t.28(28@function,i64)]
	xor t.31(31@function,i16), a(0@function,i16), c(2@function,i16)
	cast t.30(30@function,i64), t.31(31@function,i16)
	call _, printIntLf [t.30(30@function,i64)]
	xor t.33(33@function,i16), b(1@function,i16), a(0@function,i16)
	cast t.32(32@function,i64), t.33(33@function,i16)
	call _, printIntLf [t.32(32@function,i64)]
	xor t.35(35@function,i16), b(1@function,i16), c(2@function,i16)
	cast t.34(34@function,i64), t.35(35@function,i16)
	call _, printIntLf [t.34(34@function,i64)]
	const t.36(36@function,u8*), [string-3]
	call _, printString [t.36(36@function,u8*)]
	; 26:15 logic and
	copy t.38(38@function,bool), f(5@function,bool)
	branch t.38(38@function,bool), false, @and_next_5
	copy t.38(38@function,bool), f(5@function,bool)
@and_next_5:
	cast t.37(37@function,i64), t.38(38@function,bool)
	call _, printIntLf [t.37(37@function,i64)]
	; 27:15 logic and
	copy t.40(40@function,bool), f(5@function,bool)
	branch t.40(40@function,bool), false, @and_next_6
	copy t.40(40@function,bool), t(4@function,bool)
@and_next_6:
	cast t.39(39@function,i64), t.40(40@function,bool)
	call _, printIntLf [t.39(39@function,i64)]
	; 28:15 logic and
	copy t.42(42@function,bool), t(4@function,bool)
	branch t.42(42@function,bool), false, @and_next_7
	copy t.42(42@function,bool), f(5@function,bool)
@and_next_7:
	cast t.41(41@function,i64), t.42(42@function,bool)
	call _, printIntLf [t.41(41@function,i64)]
	; 29:15 logic and
	copy t.44(44@function,bool), t(4@function,bool)
	branch t.44(44@function,bool), false, @and_next_8
	copy t.44(44@function,bool), t(4@function,bool)
@and_next_8:
	cast t.43(43@function,i64), t.44(44@function,bool)
	call _, printIntLf [t.43(43@function,i64)]
	const t.45(45@function,u8*), [string-4]
	call _, printString [t.45(45@function,u8*)]
	; 31:15 logic or
	copy t.47(47@function,bool), f(5@function,bool)
	branch t.47(47@function,bool), true, @or_next_9
	copy t.47(47@function,bool), f(5@function,bool)
@or_next_9:
	cast t.46(46@function,i64), t.47(47@function,bool)
	call _, printIntLf [t.46(46@function,i64)]
	; 32:15 logic or
	copy t.49(49@function,bool), f(5@function,bool)
	branch t.49(49@function,bool), true, @or_next_10
	copy t.49(49@function,bool), t(4@function,bool)
@or_next_10:
	cast t.48(48@function,i64), t.49(49@function,bool)
	call _, printIntLf [t.48(48@function,i64)]
	; 33:15 logic or
	copy t.51(51@function,bool), t(4@function,bool)
	branch t.51(51@function,bool), true, @or_next_11
	copy t.51(51@function,bool), f(5@function,bool)
@or_next_11:
	cast t.50(50@function,i64), t.51(51@function,bool)
	call _, printIntLf [t.50(50@function,i64)]
	; 34:15 logic or
	copy t.53(53@function,bool), t(4@function,bool)
	branch t.53(53@function,bool), true, @or_next_12
	copy t.53(53@function,bool), t(4@function,bool)
@or_next_12:
	cast t.52(52@function,i64), t.53(53@function,bool)
	call _, printIntLf [t.52(52@function,i64)]
	const t.54(54@function,u8*), [string-5]
	call _, printString [t.54(54@function,u8*)]
	notlog t.56(56@function,bool), f(5@function,bool)
	cast t.55(55@function,i64), t.56(56@function,bool)
	call _, printIntLf [t.55(55@function,i64)]
	notlog t.58(58@function,bool), t(4@function,bool)
	cast t.57(57@function,i64), t.58(58@function,bool)
	call _, printIntLf [t.57(57@function,i64)]
	const t.59(59@function,u8*), [string-6]
	call _, printString [t.59(59@function,u8*)]
	const b10(6@function,u8), 10
	const b6(7@function,u8), 6
	const b1(8@function,u8), 1
	and t.62(62@function,u8), b10(6@function,u8), b6(7@function,u8)
	or t.61(61@function,u8), t.62(62@function,u8), b1(8@function,u8)
	cast t.60(60@function,i64), t.61(61@function,u8)
	call _, printIntLf [t.60(60@function,i64)]
	; 43:20 logic or
	equals t.64(64@function,bool), b(1@function,i16), c(2@function,i16)
	branch t.64(64@function,bool), true, @or_next_13
	lt t.64(64@function,bool), c(2@function,i16), d(3@function,i16)
@or_next_13:
	cast t.63(63@function,i64), t.64(64@function,bool)
	call _, printIntLf [t.63(63@function,i64)]
	; 44:20 logic and
	equals t.66(66@function,bool), b(1@function,i16), c(2@function,i16)
	branch t.66(66@function,bool), false, @and_next_14
	lt t.66(66@function,bool), c(2@function,i16), d(3@function,i16)
@and_next_14:
	cast t.65(65@function,i64), t.66(66@function,bool)
	call _, printIntLf [t.65(65@function,i64)]
	const t.68(68@function,i16), -1
	cast t.67(67@function,i64), t.68(68@function,i16)
	call _, printIntLf [t.67(67@function,i64)]
	neg t.70(70@function,i16), b(1@function,i16)
	cast t.69(69@function,i64), t.70(70@function,i16)
	call _, printIntLf [t.69(69@function,i64)]
	not t.72(72@function,u8), b1(8@function,u8)
	cast t.71(71@function,i64), t.72(72@function,u8)
	call _, printIntLf [t.71(71@function,i64)]
@main_ret:

String literals
	string lit 0 "Bit-&:\n\0"
	string lit 1 "\nBit-|:\n\0"
	string lit 2 "\nBit-^:\n\0"
	string lit 3 "\nLogic-&&:\n\0"
	string lit 4 "\nLogic-||:\n\0"
	string lit 5 "\nLogic-!:\n\0"
	string lit 6 "\nmisc:\n\0"
