@printString:
 Local variables
	arg 0: str (u8*/8)
	var 1: length (i64/8)
	; 10 pc
	call length, strlen, [str]
	call _, printStringLength [str, length]
@printString_ret:

@printChar:
 Local variables
	arg 0: chr (u8/1)
	var 1: t.1 (u8*/8)
	var 2: t.2 (i64/8)
	; 12 pc
	addrof t.1, chr
	const t.2, 1
	call _, printStringLength [t.1, t.2]
@printChar_ret:

@printUint:
 Local variables
	arg 0: number (i64/8)
	var 1: buffer[] (u8*/20)
	var 2: pos (u8/1)
	var 3: remainder (i64/8)
	var 4: digit (u8/1)
	var 5: t.5 (u8/1)
	var 6: t.6 (i64/8)
	var 7: t.7 (i64/8)
	var 8: t.8 (u8/1)
	var 9: t.9 (u8/1)
	var 10: t.10 (u8*/8)
	var 11: t.11 (i64/8)
	var 12: t.12 (u8*/8)
	var 13: t.13 (bool/1)
	var 14: t.14 (i64/8)
	var 15: t.15 (u8*/8)
	var 16: t.16 (i64/8)
	var 17: t.17 (u8*/8)
	var 18: t.18 (i64/8)
	var 19: t.19 (u8/1)
	var 20: t.20 (u8/1)
	; 122 pc
	const pos, 20
	; 13:2 while true
@while_1:
	const t.5, 1
	sub pos, pos, t.5
	const t.6, 10
	mod remainder, number, t.6
	const t.7, 10
	div number, number, t.7
	cast t.8, remainder
	const t.9, 48
	add digit, t.8, t.9
	cast t.11, pos
	cast t.12, t.11
	addrof t.10, [buffer]
	add t.10, t.10, t.12
	store [t.10], digit
	; 19:3 if number == 0
	const t.14, 0
	equals t.13, number, t.14
	branch t.13, false, @if_2_end
	jump @while_1_break
@if_2_end:
	jump @while_1
@while_1_break:
	cast t.16, pos
	cast t.17, t.16
	addrof t.15, [buffer]
	add t.15, t.15, t.17
	const t.20, 20
	sub t.19, t.20, pos
	cast t.18, t.19
	call _, printStringLength [t.15, t.18]
@printUint_ret:

@printIntLf:
 Local variables
	arg 0: number (i64/8)
	var 1: t.1 (bool/1)
	var 2: t.2 (i64/8)
	var 3: t.3 (u8/1)
	var 4: t.4 (u8/1)
	; 30 pc
	; 27:2 if number < 0
	const t.2, 0
	lt t.1, number, t.2
	branch t.1, false, @if_3_end
	const t.3, 45
	call _, printChar [t.3]
	neg number, number
@if_3_end:
	call _, printUint [number]
	const t.4, 10
	call _, printChar [t.4]
@printIntLf_ret:

@strlen:
 Local variables
	arg 0: str (u8*/8)
	var 1: length (i64/8)
	var 2: t.2 (bool/1)
	var 3: t.3 (u8/1)
	var 4: t.4 (u8/1)
	var 5: t.5 (i64/8)
	var 6: t.6 (i64/8)
	var 7: t.7 (i64/8)
	var 8: t.8 (i64/8)
	; 53 pc
	const length, 0
	; 37:2 for *str != 0
@for_4:
	load t.3, [str]
	const t.4, 0
	notequals t.2, t.3, t.4
	branch t.2, false, @for_4_break
	const t.5, 1
	add length, length, t.5
@for_4_continue:
	cast t.7, str
	const t.8, 1
	add t.6, t.7, t.8
	cast str, t.6
	jump @for_4
@for_4_break:
	; 40:9 return length
	ret length
	jump @strlen_ret
@strlen_ret:

@main:
 Local variables
	var 0: second (u8*/8)
	var 1: chr (u8/1)
	var 2: t.2 (i64/8)
	var 3: t.3 (u8*/8)
	var 4: t.4 (i64/8)
	; 43 pc
	; begin initialize global variables
	const text, [string-0]
	; end initialize global variables
	call _, printString [text]
	call _, printLength []
	const t.2, 1
	cast t.3, t.2
	move second, text
	add second, second, t.3
	call _, printString [second]
	load chr, [text]
	cast t.4, chr
	call _, printIntLf [t.4]
@main_ret:

@printLength:
 Local variables
	var 0: length (i16/2)
	var 1: ptr (u8*/8)
	var 2: t.2 (bool/1)
	var 3: t.3 (u8/1)
	var 4: t.4 (u8/1)
	var 5: t.5 (i16/2)
	var 6: t.6 (i64/8)
	var 7: t.7 (i64/8)
	var 8: t.8 (i64/8)
	var 9: t.9 (i64/8)
	; 62 pc
	const length, 0
	move ptr, text
	; 16:2 for *ptr != 0
@for_5:
	load t.3, [ptr]
	const t.4, 0
	notequals t.2, t.3, t.4
	branch t.2, false, @for_5_break
	const t.5, 1
	add length, length, t.5
@for_5_continue:
	cast t.7, ptr
	const t.8, 1
	add t.6, t.7, t.8
	cast ptr, t.6
	jump @for_5
@for_5_break:
	cast t.9, length
	call _, printIntLf [t.9]
@printLength_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

Global variables
	0: text (u8*/8)

String literals
	string lit 0 "hello world\n\0"
