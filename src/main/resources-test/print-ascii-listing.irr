@printString:
 Local variables
	arg 0: str (u8*/8)
	; 6 pc
	move r6, r1
	move r1, r6
	call r0, strlen, [r1]
	move r1, r6
	move r2, r0
	call _, printStringLength [r1, r2]

@printChar:
 Local variables
	arg 0: chr (u8/1)
	; 8 pc
	addrof r6, chr
	const r2, 1
	move chr, r1
	move r1, r6
	call _, printStringLength [r1, r2]

@strlen:
 Local variables
	arg 0: str (u8*/8)
	; 9 pc
	const r0, 0
	; 37:2 for *str != 0
	jump @for_1
@for_1_body:
	const r2, 1
	add r0, r0, r2
	cast r2(i64), r1(u8*)
	const r3, 1
	add r2, r2, r3
	cast r1(u8*), r2(i64)
@for_1:
	load r2, [r1]
	const r3, 0
	notequals r2, r2, r3
	branch r2, true, @for_1_body
	; 40:9 return length

@printNibble:
 Local variables
	arg 0: x (u8/1)
	; 6 pc
	const r6, 15
	and r1, r1, r6
	; 5:2 if x > 9
	const r6, 9
	gt r6, r1, r6
	branch r6, false, @if_2_end
	const r6, 7
	add r1, r1, r6
@if_2_end:
	const r6, 48
	add r1, r1, r6
	call _, printChar [r1]

@printHex2:
 Local variables
	arg 0: x (u8/1)
	; 7 pc
	move r6, r1
	const r1, 4
	move r7, r6
	shiftright r7, r7, r1
	move r1, r7
	call _, printNibble [r1]
	move r1, r6
	call _, printNibble [r1]

@main:
	; 36 pc
	; begin initialize global variables
	; end initialize global variables
	const r1, [string-0]
	call _, printString [r1]
	const r6, 0
	; 19:2 for i < 16
	jump @for_3
@for_3_body:
	; 20:3 if i & 7 == 0
	const r7, 7
	move r0, r6
	and r0, r0, r7
	const r7, 0
	equals r7, r0, r7
	branch r7, false, @if_4_end
	const r1, 32
	call _, printChar [r1]
@if_4_end:
	move r1, r6
	call _, printNibble [r1]
	const r7, 1
	add r6, r6, r7
@for_3:
	const r7, 16
	lt r7, r6, r7
	branch r7, true, @for_3_body
	const r1, 10
	call _, printChar [r1]
	const r6, 32
	; 27:2 for i < 128
	jump @for_5
@for_5_body:
	; 28:3 if i & 15 == 0
	const r7, 15
	move r0, r6
	and r0, r0, r7
	const r7, 0
	equals r7, r0, r7
	branch r7, false, @if_6_end
	move r1, r6
	call _, printHex2 [r1]
@if_6_end:
	; 31:3 if i & 7 == 0
	const r7, 7
	move r0, r6
	and r0, r0, r7
	const r7, 0
	equals r7, r0, r7
	branch r7, false, @if_7_end
	const r1, 32
	call _, printChar [r1]
@if_7_end:
	move r1, r6
	call _, printChar [r1]
	; 35:3 if i & 15 == 15
	const r7, 15
	move r0, r6
	and r0, r0, r7
	const r7, 15
	equals r7, r0, r7
	branch r7, false, @for_5_continue
	const r1, 10
	call _, printChar [r1]
@for_5_continue:
	const r0, 1
	add r6, r6, r0
@for_5:
	const r0, 128
	lt r0, r6, r0
	branch r0, true, @for_5_body

@printStringLength:
	mov     rdi, rsp
	
	mov     r8, rdx
	mov     rdx, rcx
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

String literals
	string lit 0 " x\0"
