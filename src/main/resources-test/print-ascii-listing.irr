@printString:
 Local variables
	arg 0: str (u8*/8)
	; 6 pc
	call r0, strlen, [str]
	call _, printStringLength [str, r0]

@printChar:
 Local variables
	arg 0: chr (u8/1)
	; 4 pc
	addrof r0, chr
	const r1, 1
	call _, printStringLength [r0, r1]

@strlen:
 Local variables
	arg 0: str (u8*/8)
	var 1: length (i64/8)
	; 31 pc
	const r0, 0
	; 37:2 for *str != 0
	move length, r0
@for_1:
	move r0, str
	load r1, [r0]
	const r2, 0
	notequals r1, r1, r2
	branch r1, false, @for_1_break
	const r0, 1
	move r1, length
	add r0, r1, r0
	move r1, str
	cast r1(i64), r1(u8*)
	const r2, 1
	add r1, r1, r2
	cast r1(u8*), r1(i64)
	move length, r0
	move str, r1
	jump @for_1
@for_1_break:
	; 40:9 return length
	move r0, length
	ret r0

@printNibble:
 Local variables
	arg 0: x (u8/1)
	; 21 pc
	const r0, 15
	move r1, x
	and r0, r1, r0
	; 5:2 if x > 9
	const r1, 9
	gt r1, r0, r1
	move x, r0
	branch r1, false, @if_2_end
	const r0, 7
	move r1, x
	add r0, r1, r0
	move x, r0
@if_2_end:
	const r0, 48
	move r1, x
	add r0, r1, r0
	call _, printChar [r0]

@printHex2:
 Local variables
	arg 0: x (u8/1)
	; 9 pc
	const r0, 4
	move r1, x
	move r2, r1
	shiftright r0, r2, r0
	call _, printNibble [r0]
	call _, printNibble [x]

@main:
 Local variables
	var 0: i (u8/1)
	var 1: i (u8/1)
	; 75 pc
	; begin initialize global variables
	; end initialize global variables
	const r0, [string-0]
	call _, printString [r0]
	const r0, 0
	; 19:2 for i < 16
	move i, r0
@for_3:
	const r0, 16
	move r1, i
	lt r0, r1, r0
	branch r0, false, @for_3_break
	; 20:3 if i & 7 == 0
	const r0, 7
	move r1, i
	move r2, r1
	and r0, r2, r0
	const r2, 0
	equals r0, r0, r2
	branch r0, false, @if_4_end
	const r0, 32
	call _, printChar [r0]
@if_4_end:
	call _, printNibble [i]
	const r0, 1
	move r1, i
	add r0, r1, r0
	move i, r0
	jump @for_3
@for_3_break:
	const r0, 10
	call _, printChar [r0]
	const r0, 32
	; 27:2 for i < 128
	move i, r0
@for_5:
	const r0, 128
	move r1, i
	lt r0, r1, r0
	branch r0, false, @main_ret
	; 28:3 if i & 15 == 0
	const r0, 15
	move r1, i
	move r2, r1
	and r0, r2, r0
	const r2, 0
	equals r0, r0, r2
	branch r0, false, @if_6_end
	call _, printHex2 [i]
@if_6_end:
	; 31:3 if i & 7 == 0
	const r0, 7
	move r1, i
	move r2, r1
	and r0, r2, r0
	const r2, 0
	equals r0, r0, r2
	branch r0, false, @if_7_end
	const r0, 32
	call _, printChar [r0]
@if_7_end:
	call _, printChar [i]
	; 35:3 if i & 15 == 15
	const r0, 15
	move r1, i
	move r2, r1
	and r0, r2, r0
	const r2, 15
	equals r0, r0, r2
	branch r0, false, @for_5_continue
	const r0, 10
	call _, printChar [r0]
@for_5_continue:
	const r0, 1
	move r1, i
	add r0, r1, r0
	move i, r0
	jump @for_5
@main_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

String literals
	string lit 0 " x\0"
