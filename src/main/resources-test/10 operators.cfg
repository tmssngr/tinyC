; CFG for function printString
; block printString
	; predecessors=[]
		1: str
	; 11 pc
	call length, strlen, [str]
		2: length, str
	call _, printStringLength [str, length]
	jump @printString_ret
	; successors=[@printString_ret]

; block @printString_ret
	; predecessors=[printString]
	; successors=[]


; CFG for function printChar
; block printChar
	; predecessors=[]
		1: chr
	; 13 pc
	addrof t.1, chr
		1: t.1
	const t.2, 1
		2: t.1, t.2
	call _, printStringLength [t.1, t.2]
	jump @printChar_ret
	; successors=[@printChar_ret]

; block @printChar_ret
	; predecessors=[printChar]
	; successors=[]


; CFG for function printUint
; block printUint
	; predecessors=[]
		1: number
	; 3 pc
	const pos, 20
		2: number, pos
	; 13:2 while true
	jump @while_1
		2: number, pos
	; successors=[@while_1]

; block @while_1
	; predecessors=[printUint, @if_2_end]
		2: number, pos
	; 90 pc
	const t.5, 1
		3: number, pos, t.5
	sub pos, pos, t.5
		2: number, pos
	const t.6, 10
		3: number, pos, t.6
	move remainder, number
		4: number, pos, remainder, t.6
	mod remainder, remainder, t.6
		3: number, pos, remainder
	const t.7, 10
		4: number, pos, remainder, t.7
	div number, number, t.7
		3: number, pos, remainder
	cast t.8(u8), remainder(i64)
		3: number, pos, t.8
	const t.9, 48
		4: number, pos, t.8, t.9
	move digit, t.8
		4: digit, number, pos, t.9
	add digit, digit, t.9
		3: digit, number, pos
	cast t.11(i64), pos(u8)
		4: digit, number, pos, t.11
	cast t.12(u8*), t.11(i64)
		4: digit, number, pos, t.12
	addrof t.10, [buffer]
		5: digit, number, pos, t.10, t.12
	add t.10, t.10, t.12
		4: digit, number, pos, t.10
	store [t.10], digit
		2: number, pos
	; 19:3 if number == 0
	const t.14, 0
		3: number, pos, t.14
	equals t.13, number, t.14
		3: number, pos, t.13
	branch t.13, false, @if_2_end
		2: number, pos
	jump @if_2_then
		2: number, pos
	; successors=[@if_2_end, @if_2_then]

; block @if_2_end
	; predecessors=[@while_1]
		2: number, pos
	; 1 pc
	jump @while_1
		2: number, pos
	; successors=[@while_1]

; block @if_2_then
	; predecessors=[@while_1]
		1: pos
	; 45 pc
	cast t.16(i64), pos(u8)
		2: pos, t.16
	cast t.17(u8*), t.16(i64)
		2: pos, t.17
	addrof t.15, [buffer]
		3: pos, t.15, t.17
	add t.15, t.15, t.17
		2: pos, t.15
	const t.20, 20
		3: pos, t.15, t.20
	move t.19, t.20
		3: pos, t.15, t.19
	sub t.19, t.19, pos
		2: t.15, t.19
	cast t.18(i64), t.19(u8)
		2: t.15, t.18
	call _, printStringLength [t.15, t.18]
	jump @printUint_ret
	; successors=[@printUint_ret]

; block @printUint_ret
	; predecessors=[@if_2_then]
	; successors=[]


; CFG for function printIntLf
; block printIntLf
	; predecessors=[]
		1: number
	; 13 pc
	; 27:2 if number < 0
	const t.2, 0
		2: number, t.2
	lt t.1, number, t.2
		2: number, t.1
	branch t.1, false, @no_critical_edge_4
		1: number
	jump @if_3_then
		1: number
	; successors=[@no_critical_edge_4, @if_3_then]

; block @no_critical_edge_4
	; predecessors=[printIntLf]
		1: number
	; 1 pc
	jump @if_3_end
		1: number
	; successors=[@if_3_end]

; block @if_3_then
	; predecessors=[printIntLf]
		1: number
	; 11 pc
	const t.3, 45
		2: number, t.3
	call _, printChar [t.3]
		1: number
	neg number, number
		1: number
	jump @if_3_end
		1: number
	; successors=[@if_3_end]

; block @if_3_end
	; predecessors=[@no_critical_edge_4, @if_3_then]
		1: number
	; 9 pc
	call _, printUint [number]
	const t.4, 10
		1: t.4
	call _, printChar [t.4]
	jump @printIntLf_ret
	; successors=[@printIntLf_ret]

; block @printIntLf_ret
	; predecessors=[@if_3_end]
	; successors=[]


; CFG for function strlen
; block strlen
	; predecessors=[]
		1: str
	; 3 pc
	const length, 0
		2: length, str
	; 37:2 for *str != 0
	jump @for_4
		2: length, str
	; successors=[@for_4]

; block @for_4
	; predecessors=[strlen, @for_4_body]
		2: length, str
	; 19 pc
	load t.3, [str]
		3: length, str, t.3
	const t.4, 0
		4: length, str, t.3, t.4
	notequals t.2, t.3, t.4
		3: length, str, t.2
	branch t.2, false, @for_4_break
		2: length, str
	jump @for_4_body
		2: length, str
	; successors=[@for_4_break, @for_4_body]

; block @for_4_body
	; predecessors=[@for_4]
		2: length, str
	; 34 pc
	const t.5, 1
		3: length, str, t.5
	add length, length, t.5
		2: length, str
	cast t.7(i64), str(u8*)
		2: length, t.7
	const t.8, 1
		3: length, t.7, t.8
	move t.6, t.7
		3: length, t.6, t.8
	add t.6, t.6, t.8
		2: length, t.6
	cast str(u8*), t.6(i64)
		2: length, str
	jump @for_4
		2: length, str
	; successors=[@for_4]

; block @for_4_break
	; predecessors=[@for_4]
		1: length
	; 4 pc
	; 40:9 return length
	ret length
	jump @strlen_ret
	; successors=[@strlen_ret]

; block @strlen_ret
	; predecessors=[@for_4_break]
	; successors=[]


; CFG for function main
; block main
	; predecessors=[]
	; 285 pc
	; begin initialize global variables
	; end initialize global variables
	const t.9, [string-0]
		1: t.9
	call _, printString [t.9]
	const a, 0
		1: a
	const b, 1
		2: a, b
	const c, 2
		3: a, b, c
	const d, 3
		4: a, b, c, d
	const t, 1
		5: a, b, c, d, t
	const f, 0
		6: a, b, c, d, f, t
	move t.11, a
		7: a, b, c, d, f, t, t.11
	and t.11, t.11, a
		7: a, b, c, d, f, t, t.11
	cast t.10(i64), t.11(i16)
		7: a, b, c, d, f, t, t.10
	call _, printIntLf [t.10]
		6: a, b, c, d, f, t
	move t.13, a
		7: a, b, c, d, f, t, t.13
	and t.13, t.13, b
		7: a, b, c, d, f, t, t.13
	cast t.12(i64), t.13(i16)
		7: a, b, c, d, f, t, t.12
	call _, printIntLf [t.12]
		6: a, b, c, d, f, t
	move t.15, b
		7: a, b, c, d, f, t, t.15
	and t.15, t.15, a
		7: a, b, c, d, f, t, t.15
	cast t.14(i64), t.15(i16)
		7: a, b, c, d, f, t, t.14
	call _, printIntLf [t.14]
		6: a, b, c, d, f, t
	move t.17, b
		7: a, b, c, d, f, t, t.17
	and t.17, t.17, b
		7: a, b, c, d, f, t, t.17
	cast t.16(i64), t.17(i16)
		7: a, b, c, d, f, t, t.16
	call _, printIntLf [t.16]
		6: a, b, c, d, f, t
	const t.18, [string-1]
		7: a, b, c, d, f, t, t.18
	call _, printString [t.18]
		6: a, b, c, d, f, t
	move t.20, a
		7: a, b, c, d, f, t, t.20
	or t.20, t.20, a
		7: a, b, c, d, f, t, t.20
	cast t.19(i64), t.20(i16)
		7: a, b, c, d, f, t, t.19
	call _, printIntLf [t.19]
		6: a, b, c, d, f, t
	move t.22, a
		7: a, b, c, d, f, t, t.22
	or t.22, t.22, b
		7: a, b, c, d, f, t, t.22
	cast t.21(i64), t.22(i16)
		7: a, b, c, d, f, t, t.21
	call _, printIntLf [t.21]
		6: a, b, c, d, f, t
	move t.24, b
		7: a, b, c, d, f, t, t.24
	or t.24, t.24, a
		7: a, b, c, d, f, t, t.24
	cast t.23(i64), t.24(i16)
		7: a, b, c, d, f, t, t.23
	call _, printIntLf [t.23]
		6: a, b, c, d, f, t
	move t.26, b
		7: a, b, c, d, f, t, t.26
	or t.26, t.26, b
		7: a, b, c, d, f, t, t.26
	cast t.25(i64), t.26(i16)
		7: a, b, c, d, f, t, t.25
	call _, printIntLf [t.25]
		6: a, b, c, d, f, t
	const t.27, [string-2]
		7: a, b, c, d, f, t, t.27
	call _, printString [t.27]
		6: a, b, c, d, f, t
	move t.29, a
		7: a, b, c, d, f, t, t.29
	xor t.29, t.29, a
		7: a, b, c, d, f, t, t.29
	cast t.28(i64), t.29(i16)
		7: a, b, c, d, f, t, t.28
	call _, printIntLf [t.28]
		6: a, b, c, d, f, t
	move t.31, a
		7: a, b, c, d, f, t, t.31
	xor t.31, t.31, c
		7: a, b, c, d, f, t, t.31
	cast t.30(i64), t.31(i16)
		7: a, b, c, d, f, t, t.30
	call _, printIntLf [t.30]
		6: a, b, c, d, f, t
	move t.33, b
		7: a, b, c, d, f, t, t.33
	xor t.33, t.33, a
		6: b, c, d, f, t, t.33
	cast t.32(i64), t.33(i16)
		6: b, c, d, f, t, t.32
	call _, printIntLf [t.32]
		5: b, c, d, f, t
	move t.35, b
		6: b, c, d, f, t, t.35
	xor t.35, t.35, c
		6: b, c, d, f, t, t.35
	cast t.34(i64), t.35(i16)
		6: b, c, d, f, t, t.34
	call _, printIntLf [t.34]
		5: b, c, d, f, t
	const t.36, [string-3]
		6: b, c, d, f, t, t.36
	call _, printString [t.36]
		5: b, c, d, f, t
	; 26:15 logic and
	move t.38, f
		6: b, c, d, f, t, t.38
	branch t.38, false, @no_critical_edge_22
		6: b, c, d, f, t, t.38
	jump @and_2nd_5
		6: b, c, d, f, t, t.38
	; successors=[@no_critical_edge_22, @and_2nd_5]

; block @no_critical_edge_22
	; predecessors=[main]
		6: b, c, d, f, t, t.38
	; 1 pc
	jump @and_next_5
		6: b, c, d, f, t, t.38
	; successors=[@and_next_5]

; block @and_2nd_5
	; predecessors=[main]
		5: b, c, d, f, t
	; 6 pc
	move t.38, f
		6: b, c, d, f, t, t.38
	jump @and_next_5
		6: b, c, d, f, t, t.38
	; successors=[@and_next_5]

; block @and_next_5
	; predecessors=[@no_critical_edge_22, @and_2nd_5]
		6: b, c, d, f, t, t.38
	; 17 pc
	cast t.37(i64), t.38(bool)
		6: b, c, d, f, t, t.37
	call _, printIntLf [t.37]
		5: b, c, d, f, t
	; 27:15 logic and
	move t.40, f
		6: b, c, d, f, t, t.40
	branch t.40, false, @no_critical_edge_23
		6: b, c, d, f, t, t.40
	jump @and_2nd_6
		6: b, c, d, f, t, t.40
	; successors=[@no_critical_edge_23, @and_2nd_6]

; block @no_critical_edge_23
	; predecessors=[@and_next_5]
		6: b, c, d, f, t, t.40
	; 1 pc
	jump @and_next_6
		6: b, c, d, f, t, t.40
	; successors=[@and_next_6]

; block @and_2nd_6
	; predecessors=[@and_next_5]
		5: b, c, d, f, t
	; 6 pc
	move t.40, t
		6: b, c, d, f, t, t.40
	jump @and_next_6
		6: b, c, d, f, t, t.40
	; successors=[@and_next_6]

; block @and_next_6
	; predecessors=[@no_critical_edge_23, @and_2nd_6]
		6: b, c, d, f, t, t.40
	; 17 pc
	cast t.39(i64), t.40(bool)
		6: b, c, d, f, t, t.39
	call _, printIntLf [t.39]
		5: b, c, d, f, t
	; 28:15 logic and
	move t.42, t
		6: b, c, d, f, t, t.42
	branch t.42, false, @no_critical_edge_24
		6: b, c, d, f, t, t.42
	jump @and_2nd_7
		6: b, c, d, f, t, t.42
	; successors=[@no_critical_edge_24, @and_2nd_7]

; block @no_critical_edge_24
	; predecessors=[@and_next_6]
		6: b, c, d, f, t, t.42
	; 1 pc
	jump @and_next_7
		6: b, c, d, f, t, t.42
	; successors=[@and_next_7]

; block @and_2nd_7
	; predecessors=[@and_next_6]
		5: b, c, d, f, t
	; 6 pc
	move t.42, f
		6: b, c, d, f, t, t.42
	jump @and_next_7
		6: b, c, d, f, t, t.42
	; successors=[@and_next_7]

; block @and_next_7
	; predecessors=[@no_critical_edge_24, @and_2nd_7]
		6: b, c, d, f, t, t.42
	; 17 pc
	cast t.41(i64), t.42(bool)
		6: b, c, d, f, t, t.41
	call _, printIntLf [t.41]
		5: b, c, d, f, t
	; 29:15 logic and
	move t.44, t
		6: b, c, d, f, t, t.44
	branch t.44, false, @no_critical_edge_25
		6: b, c, d, f, t, t.44
	jump @and_2nd_8
		6: b, c, d, f, t, t.44
	; successors=[@no_critical_edge_25, @and_2nd_8]

; block @no_critical_edge_25
	; predecessors=[@and_next_7]
		6: b, c, d, f, t, t.44
	; 1 pc
	jump @and_next_8
		6: b, c, d, f, t, t.44
	; successors=[@and_next_8]

; block @and_2nd_8
	; predecessors=[@and_next_7]
		5: b, c, d, f, t
	; 6 pc
	move t.44, t
		6: b, c, d, f, t, t.44
	jump @and_next_8
		6: b, c, d, f, t, t.44
	; successors=[@and_next_8]

; block @and_next_8
	; predecessors=[@no_critical_edge_25, @and_2nd_8]
		6: b, c, d, f, t, t.44
	; 23 pc
	cast t.43(i64), t.44(bool)
		6: b, c, d, f, t, t.43
	call _, printIntLf [t.43]
		5: b, c, d, f, t
	const t.45, [string-4]
		6: b, c, d, f, t, t.45
	call _, printString [t.45]
		5: b, c, d, f, t
	; 31:15 logic or
	move t.47, f
		6: b, c, d, f, t, t.47
	branch t.47, true, @no_critical_edge_26
		6: b, c, d, f, t, t.47
	jump @or_2nd_9
		6: b, c, d, f, t, t.47
	; successors=[@no_critical_edge_26, @or_2nd_9]

; block @no_critical_edge_26
	; predecessors=[@and_next_8]
		6: b, c, d, f, t, t.47
	; 1 pc
	jump @or_next_9
		6: b, c, d, f, t, t.47
	; successors=[@or_next_9]

; block @or_2nd_9
	; predecessors=[@and_next_8]
		5: b, c, d, f, t
	; 6 pc
	move t.47, f
		6: b, c, d, f, t, t.47
	jump @or_next_9
		6: b, c, d, f, t, t.47
	; successors=[@or_next_9]

; block @or_next_9
	; predecessors=[@no_critical_edge_26, @or_2nd_9]
		6: b, c, d, f, t, t.47
	; 17 pc
	cast t.46(i64), t.47(bool)
		6: b, c, d, f, t, t.46
	call _, printIntLf [t.46]
		5: b, c, d, f, t
	; 32:15 logic or
	move t.49, f
		6: b, c, d, f, t, t.49
	branch t.49, true, @no_critical_edge_27
		6: b, c, d, f, t, t.49
	jump @or_2nd_10
		6: b, c, d, f, t, t.49
	; successors=[@no_critical_edge_27, @or_2nd_10]

; block @no_critical_edge_27
	; predecessors=[@or_next_9]
		6: b, c, d, f, t, t.49
	; 1 pc
	jump @or_next_10
		6: b, c, d, f, t, t.49
	; successors=[@or_next_10]

; block @or_2nd_10
	; predecessors=[@or_next_9]
		5: b, c, d, f, t
	; 6 pc
	move t.49, t
		6: b, c, d, f, t, t.49
	jump @or_next_10
		6: b, c, d, f, t, t.49
	; successors=[@or_next_10]

; block @or_next_10
	; predecessors=[@no_critical_edge_27, @or_2nd_10]
		6: b, c, d, f, t, t.49
	; 17 pc
	cast t.48(i64), t.49(bool)
		6: b, c, d, f, t, t.48
	call _, printIntLf [t.48]
		5: b, c, d, f, t
	; 33:15 logic or
	move t.51, t
		6: b, c, d, f, t, t.51
	branch t.51, true, @no_critical_edge_28
		6: b, c, d, f, t, t.51
	jump @or_2nd_11
		6: b, c, d, f, t, t.51
	; successors=[@no_critical_edge_28, @or_2nd_11]

; block @no_critical_edge_28
	; predecessors=[@or_next_10]
		6: b, c, d, f, t, t.51
	; 1 pc
	jump @or_next_11
		6: b, c, d, f, t, t.51
	; successors=[@or_next_11]

; block @or_2nd_11
	; predecessors=[@or_next_10]
		5: b, c, d, f, t
	; 6 pc
	move t.51, f
		6: b, c, d, f, t, t.51
	jump @or_next_11
		6: b, c, d, f, t, t.51
	; successors=[@or_next_11]

; block @or_next_11
	; predecessors=[@no_critical_edge_28, @or_2nd_11]
		6: b, c, d, f, t, t.51
	; 17 pc
	cast t.50(i64), t.51(bool)
		6: b, c, d, f, t, t.50
	call _, printIntLf [t.50]
		5: b, c, d, f, t
	; 34:15 logic or
	move t.53, t
		6: b, c, d, f, t, t.53
	branch t.53, true, @no_critical_edge_29
		6: b, c, d, f, t, t.53
	jump @or_2nd_12
		6: b, c, d, f, t, t.53
	; successors=[@no_critical_edge_29, @or_2nd_12]

; block @no_critical_edge_29
	; predecessors=[@or_next_11]
		6: b, c, d, f, t, t.53
	; 1 pc
	jump @or_next_12
		6: b, c, d, f, t, t.53
	; successors=[@or_next_12]

; block @or_2nd_12
	; predecessors=[@or_next_11]
		5: b, c, d, f, t
	; 6 pc
	move t.53, t
		6: b, c, d, f, t, t.53
	jump @or_next_12
		6: b, c, d, f, t, t.53
	; successors=[@or_next_12]

; block @or_next_12
	; predecessors=[@no_critical_edge_29, @or_2nd_12]
		6: b, c, d, f, t, t.53
	; 95 pc
	cast t.52(i64), t.53(bool)
		6: b, c, d, f, t, t.52
	call _, printIntLf [t.52]
		5: b, c, d, f, t
	const t.54, [string-5]
		6: b, c, d, f, t, t.54
	call _, printString [t.54]
		5: b, c, d, f, t
	notlog t.56, f
		5: b, c, d, t, t.56
	cast t.55(i64), t.56(bool)
		5: b, c, d, t, t.55
	call _, printIntLf [t.55]
		4: b, c, d, t
	notlog t.58, t
		4: b, c, d, t.58
	cast t.57(i64), t.58(bool)
		4: b, c, d, t.57
	call _, printIntLf [t.57]
		3: b, c, d
	const t.59, [string-6]
		4: b, c, d, t.59
	call _, printString [t.59]
		3: b, c, d
	const b10, 10
		4: b, b10, c, d
	const b6, 6
		5: b, b10, b6, c, d
	const b1, 1
		6: b, b1, b10, b6, c, d
	move t.62, b10
		6: b, b1, b6, c, d, t.62
	and t.62, t.62, b6
		5: b, b1, c, d, t.62
	move t.61, t.62
		5: b, b1, c, d, t.61
	or t.61, t.61, b1
		5: b, b1, c, d, t.61
	cast t.60(i64), t.61(u8)
		5: b, b1, c, d, t.60
	call _, printIntLf [t.60]
		4: b, b1, c, d
	; 43:20 logic or
	equals t.64, b, c
		5: b, b1, c, d, t.64
	branch t.64, true, @no_critical_edge_30
		5: b, b1, c, d, t.64
	jump @or_2nd_13
		5: b, b1, c, d, t.64
	; successors=[@no_critical_edge_30, @or_2nd_13]

; block @no_critical_edge_30
	; predecessors=[@or_next_12]
		5: b, b1, c, d, t.64
	; 1 pc
	jump @or_next_13
		5: b, b1, c, d, t.64
	; successors=[@or_next_13]

; block @or_2nd_13
	; predecessors=[@or_next_12]
		4: b, b1, c, d
	; 8 pc
	lt t.64, c, d
		5: b, b1, c, d, t.64
	jump @or_next_13
		5: b, b1, c, d, t.64
	; successors=[@or_next_13]

; block @or_next_13
	; predecessors=[@no_critical_edge_30, @or_2nd_13]
		5: b, b1, c, d, t.64
	; 19 pc
	cast t.63(i64), t.64(bool)
		5: b, b1, c, d, t.63
	call _, printIntLf [t.63]
		4: b, b1, c, d
	; 44:20 logic and
	equals t.66, b, c
		5: b, b1, c, d, t.66
	branch t.66, false, @no_critical_edge_31
		5: b, b1, c, d, t.66
	jump @and_2nd_14
		5: b, b1, c, d, t.66
	; successors=[@no_critical_edge_31, @and_2nd_14]

; block @no_critical_edge_31
	; predecessors=[@or_next_13]
		3: b, b1, t.66
	; 1 pc
	jump @and_next_14
		3: b, b1, t.66
	; successors=[@and_next_14]

; block @and_2nd_14
	; predecessors=[@or_next_13]
		4: b, b1, c, d
	; 8 pc
	lt t.66, c, d
		3: b, b1, t.66
	jump @and_next_14
		3: b, b1, t.66
	; successors=[@and_next_14]

; block @and_next_14
	; predecessors=[@no_critical_edge_31, @and_2nd_14]
		3: b, b1, t.66
	; 45 pc
	cast t.65(i64), t.66(bool)
		3: b, b1, t.65
	call _, printIntLf [t.65]
		2: b, b1
	const t.68, -1
		3: b, b1, t.68
	cast t.67(i64), t.68(i16)
		3: b, b1, t.67
	call _, printIntLf [t.67]
		2: b, b1
	neg t.70, b
		2: b1, t.70
	cast t.69(i64), t.70(i16)
		2: b1, t.69
	call _, printIntLf [t.69]
		1: b1
	not t.72, b1
		1: t.72
	cast t.71(i64), t.72(u8)
		1: t.71
	call _, printIntLf [t.71]
	jump @main_ret
	; successors=[@main_ret]

; block @main_ret
	; predecessors=[@and_next_14]
	; successors=[]


