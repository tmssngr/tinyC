@printChar:
 Local variables
	arg 0: chr (u8/1)
	var 1: t.1 (u8*/8)
	var 2: t.2 (i64/8)
	; 12 pc
	addrof t.1, chr
	const t.2, 1
	call _, printStringLength [t.1, t.2]
@printChar_ret:

@printUint:
 Local variables
	arg 0: number (i64/8)
	var 1: buffer[] (u8*/20)
	var 2: pos (u8/1)
	var 3: remainder (i64/8)
	var 4: digit (u8/1)
	var 5: t.5 (u8/1)
	var 6: t.6 (i64/8)
	var 7: t.7 (i64/8)
	var 8: t.8 (u8/1)
	var 9: t.9 (u8/1)
	var 10: t.10 (u8*/8)
	var 11: t.11 (i64/8)
	var 12: t.12 (u8*/8)
	var 13: t.13 (bool/1)
	var 14: t.14 (i64/8)
	var 15: t.15 (u8*/8)
	var 16: t.16 (i64/8)
	var 17: t.17 (u8*/8)
	var 18: t.18 (i64/8)
	var 19: t.19 (u8/1)
	var 20: t.20 (u8/1)
	; 122 pc
	const pos, 20
	; 13:2 while true
@while_1:
	const t.5, 1
	sub pos, pos, t.5
	const t.6, 10
	mod remainder, number, t.6
	const t.7, 10
	div number, number, t.7
	cast t.8(u8), remainder(i64)
	const t.9, 48
	add digit, t.8, t.9
	cast t.11(i64), pos(u8)
	cast t.12(u8*), t.11(i64)
	addrof t.10, [buffer]
	add t.10, t.10, t.12
	store [t.10], digit
	; 19:3 if number == 0
	const t.14, 0
	equals t.13, number, t.14
	branch t.13, false, @if_2_end
	jump @while_1_break
@if_2_end:
	jump @while_1
@while_1_break:
	cast t.16(i64), pos(u8)
	cast t.17(u8*), t.16(i64)
	addrof t.15, [buffer]
	add t.15, t.15, t.17
	const t.20, 20
	sub t.19, t.20, pos
	cast t.18(i64), t.19(u8)
	call _, printStringLength [t.15, t.18]
@printUint_ret:

@printIntLf:
 Local variables
	arg 0: number (i64/8)
	var 1: t.1 (bool/1)
	var 2: t.2 (i64/8)
	var 3: t.3 (u8/1)
	var 4: t.4 (u8/1)
	; 30 pc
	; 27:2 if number < 0
	const t.2, 0
	lt t.1, number, t.2
	branch t.1, false, @if_3_end
	const t.3, 45
	call _, printChar [t.3]
	neg number, number
@if_3_end:
	call _, printUint [number]
	const t.4, 10
	call _, printChar [t.4]
@printIntLf_ret:

@main:
 Local variables
	var 0: a (i16/2)
	var 1: b (i16*/8)
	var 2: c (i16/2)
	var 3: d (i16*/8)
	var 4: t.4 (i64/8)
	var 5: t.5 (i16/2)
	var 6: t.6 (i16/2)
	var 7: t.7 (i64/8)
	var 8: t.8 (i16/2)
	var 9: t.9 (i16/2)
	var 10: t.10 (i16/2)
	var 11: t.11 (i64/8)
	; 72 pc
	const a, 10
	cast t.4(i64), a(i16)
	call _, printIntLf [t.4]
	addrof b, a
	load t.5, [b]
	const t.6, 1
	sub c, t.5, t.6
	cast t.7(i64), c(i16)
	call _, printIntLf [t.7]
	addrof d, c
	load t.9, [d]
	const t.10, 1
	sub t.8, t.9, t.10
	store [d], t.8
	cast t.11(i64), c(i16)
	call _, printIntLf [t.11]
@main_ret:

@printStringLength:
	mov     rdi, rsp
	
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	mov     rdx, [rdi+18h]
	mov     r8, [rdi+10h]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

