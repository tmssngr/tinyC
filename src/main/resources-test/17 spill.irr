@printChar:
 Local variables
	arg 0: chr (u8/1)
	; 8 pc
	addrof r6, chr
	const r2, 1
	move chr, r1
	move r1, r6
	call _, printStringLength [r1, r2]

@printUint:
 Local variables
	arg 0: number (i64/8)
	var 1: buffer[] (u8*/20)
	; 26 pc
	move r6, r1
	const r7, 20
	; 13:2 while true
@while_1:
	const r3, 1
	sub r7, r7, r3
	const r3, 10
	move r4, r6
	move r0, r4
	mod r2, r0, r3
	move r4, r2
	const r3, 10
	move r0, r6
	div r0, r0, r3
	move r6, r0
	cast r0(u8), r4(i64)
	const r3, 48
	add r0, r0, r3
	cast r3(i64), r7(u8)
	cast r3(u8*), r3(i64)
	addrof r4, [buffer]
	add r4, r4, r3
	store [r4], r0
	; 19:3 if number == 0
	const r0, 0
	equals r0, r6, r0
	branch r0, false, @while_1
	cast r6(i64), r7(u8)
	cast r6(u8*), r6(i64)
	addrof r1, [buffer]
	add r1, r1, r6
	const r6, 20
	sub r6, r6, r7
	cast r2(i64), r6(u8)
	call _, printStringLength [r1, r2]

@printIntLf:
 Local variables
	arg 0: number (i64/8)
	; 8 pc
	move r6, r1
	; 27:2 if number < 0
	const r7, 0
	lt r7, r6, r7
	branch r7, false, @if_3_end
	const r1, 45
	call _, printChar [r1]
	neg r6, r6
@if_3_end:
	move r1, r6
	call _, printUint [r1]
	const r1, 10
	call _, printChar [r1]

@main:
 Local variables
	var 0: c (i16/2)
	var 1: d (i16/2)
	; 38 pc
	; begin initialize global variables
	; end initialize global variables
	const r6, 0
	const r7, 1
	const r0, 2
	const r2, 3
	move r3, r6
	add r3, r3, r7
	cast r1(i64), r3(i16)
	move c, r0
	move d, r2
	call _, printIntLf [r1]
	move r0, c
	move r2, r0
	move r3, d
	add r2, r2, r3
	cast r1(i64), r2(i16)
	move c, r0
	move d, r3
	call _, printIntLf [r1]
	move r0, d
	move r2, c
	add r0, r0, r2
	cast r1(i64), r0(i16)
	call _, printIntLf [r1]
	add r7, r7, r6
	cast r1(i64), r7(i16)
	call _, printIntLf [r1]

@printStringLength:
	mov     rdi, rsp
	
	mov     r8, rdx
	mov     rdx, rcx
	lea     rcx, [hStdOut]
	mov     rcx, [rcx]
	xor     r9, r9
	push    0
	sub     rsp, 20h
	  call    [WriteFile]
	mov     rsp, rdi
	ret

