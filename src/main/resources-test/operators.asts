void printString(u8* str) {
	i64 length;

	length = strlen(str);
	printStringLength(str, length);
}

void printChar(u8 chr) {
	printStringLength(&chr, 1);
}

void printUint(i64 number) {
	u8* buffer[20];
	u8 pos;
	i64 remainder;
	u8 digit;

	pos = 20;
	while (true) {
		pos = pos - 1;
		remainder = number % 10;
		number = number / 10;
		digit = ((u8)remainder) + 48;
		buffer[(i64)pos] = digit;
		if (number == 0) {
			break;
		}
	}
	printStringLength(&buffer[(i64)pos], (i64)(20 - pos));
}

void printIntLf(i64 number) {
	if (number < 0) {
		printChar(45);
		number = -number;
	}
	printUint(number);
	printChar(10);
}

i64 strlen(u8* str) {
	i64 length;

	length = 0;
	for (; (*str) != 0; str = (u8*)(((i64)str) + 1)) {
		length = length + 1;
	}
	return length;
}

void printStringLength(u8* str, i64 length) {
}

void main() {
	i16 a;
	i16 b;
	i16 c;
	i16 d;
	bool t;
	bool f;
	u8 b10;
	u8 b6;
	u8 b1;

	printString("Bit-&:\n");
	a = 0;
	b = 1;
	c = 2;
	d = 3;
	t = true;
	f = false;
	printIntLf((i64)(a & a));
	printIntLf((i64)(a & b));
	printIntLf((i64)(b & a));
	printIntLf((i64)(b & b));
	printString("\nBit-|:\n");
	printIntLf((i64)(a | a));
	printIntLf((i64)(a | b));
	printIntLf((i64)(b | a));
	printIntLf((i64)(b | b));
	printString("\nBit-^:\n");
	printIntLf((i64)(a ^ a));
	printIntLf((i64)(a ^ c));
	printIntLf((i64)(b ^ a));
	printIntLf((i64)(b ^ c));
	printString("\nLogic-&&:\n");
	printIntLf((i64)(f && f));
	printIntLf((i64)(f && t));
	printIntLf((i64)(t && f));
	printIntLf((i64)(t && t));
	printString("\nLogic-||:\n");
	printIntLf((i64)(f || f));
	printIntLf((i64)(f || t));
	printIntLf((i64)(t || f));
	printIntLf((i64)(t || t));
	printString("\nLogic-!:\n");
	printIntLf((i64)(!f));
	printIntLf((i64)(!t));
	printString("\nmisc:\n");
	b10 = 10;
	b6 = 6;
	b1 = 1;
	printIntLf((i64)((b10 & b6) | b1));
	printIntLf((i64)((b == c) || (c < d)));
	printIntLf((i64)((b == c) && (c < d)));
	printIntLf((i64)-1);
	printIntLf((i64)(-b));
	printIntLf((i64)(~b1));
}
